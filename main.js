/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ReferencePlugin,
  handleMovementEffects: () => handleMovementEffects
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/state.ts
var import_state = require("@codemirror/state");
var that = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "that") {
      return tr["annotations"][0].value.that.app;
    }
    return value;
  }
});
var hoveredCursor = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "hoveredCursor") {
      if (value)
        return [
          ...value.filter(
            (cursor) => cursor.user != tr["annotations"][0].value.user
          ),
          {
            cursor: tr["annotations"][0].value.cursor,
            user: tr["annotations"][0].value.user
          }
        ];
      return [
        {
          cursor: tr["annotations"][0].value.cursor,
          user: tr["annotations"][0].value.user
        }
      ];
    } else if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "removeHoveredCursor") {
      if (value)
        return value.filter(
          (cursor) => cursor.user != tr["annotations"][0].value.user
        );
      return value;
    }
    return value;
  }
});
var backlinks = import_state.StateField.define({
  create() {
    return [];
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(
          tr.effects[0].value
        );
        if (data.type == "backlink") {
          if (data.backlinks.length == 0)
            return value;
          let referencingLocation = data.backlinks[0]["referencingLocation"]["filename"];
          let filteredValues = value.filter(
            (backlink) => backlink.referencingLocation.filename != referencingLocation
          );
          return [...filteredValues, ...data.backlinks];
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var hoverElement = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "hover-start") {
          return Object.assign({}, data);
        } else if (data.type == "hover") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "hover-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var backlinkHoverElement = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "backlink-start") {
          return Object.assign({}, data);
        } else if (data.type == "backlink-update") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "backlink-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var cursorElement = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "cursor-start") {
          return {};
        } else if (data.type == "cursor") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "cursor-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var editorChange = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "sync") {
          return value;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var thatAnnotation = import_state.Annotation.define();
var hoveredCursorAnnotation = import_state.Annotation.define();
var hoverEffect = import_state.StateEffect.define();
var backlinkHoverEffect = import_state.StateEffect.define();
var cursorEffect = import_state.StateEffect.define();
var backlinkEffect = import_state.StateEffect.define();
var state = import_state.EditorState.create({
  extensions: [
    that,
    hoveredCursor,
    backlinks,
    hoverElement,
    backlinkHoverElement,
    cursorElement,
    editorChange
  ]
});
function getThat() {
  return state.field(that);
}
function updateThat(that2) {
  state = state.update({
    annotations: thatAnnotation.of({
      type: "that",
      that: that2
    })
  }).state;
}
function getHoveredCursor() {
  return state.field(hoveredCursor);
}
function updateHoveredCursor(cursor, user) {
  state = state.update({
    annotations: hoveredCursorAnnotation.of({
      type: "hoveredCursor",
      cursor,
      user
    })
  }).state;
}
function removeHoveredCursor(user) {
  state = state.update({
    annotations: hoveredCursorAnnotation.of({
      type: "removeHoveredCursor",
      user
    })
  }).state;
}
function getHover() {
  return state.field(hoverElement);
}
function updateHover(value) {
  state = state.update({
    effects: hoverEffect.of(
      JSON.stringify(Object.assign(value, { type: "hover" }))
    )
  }).state;
}
function resetHover() {
  state = state.update({
    effects: hoverEffect.of(
      JSON.stringify({
        type: "hover-off"
      })
    )
  }).state;
}
function getBacklinkHover() {
  return state.field(backlinkHoverElement);
}
function updateBacklinkHover(value) {
  state = state.update({
    effects: backlinkHoverEffect.of(
      JSON.stringify(Object.assign(value, { type: "backlink-update" }))
    )
  }).state;
}
function resetBacklinkHover() {
  state = state.update({
    effects: backlinkHoverEffect.of(
      JSON.stringify({
        type: "backlink-off"
      })
    )
  }).state;
}
function getCursor() {
  return state.field(cursorElement);
}
function updateCursor(value) {
  state = state.update({
    effects: cursorEffect.of(
      JSON.stringify(Object.assign(value, { type: "cursor" }))
    )
  }).state;
}
function resetCursor() {
  state = state.update({
    effects: cursorEffect.of(
      JSON.stringify({
        type: "cursor-off"
      })
    )
  }).state;
}
function updateBacklinks(value) {
  state = state.update({
    effects: backlinkEffect.of(
      JSON.stringify(Object.assign({ backlinks: value }, { type: "backlink" }))
    )
  }).state;
}

// src/widget/highlightWidget.ts
var import_view = require("@codemirror/view");

// src/constants.ts
var REFERENCE_REGEX = /\[\u2197\]\(urn:([^)]*)\)/g;
var ACTION_TYPE = {
  MOUSE: "mouse",
  CURSOR: "cursor",
  BACKLINK: "backlink"
};
var SVG_HOVER_COLOR = "rgb(187, 215, 230)";
var PORTAL_TEXT_SLICE_SIZE = 100;

// src/widget/highlightWidget.ts
var HighlighterWidget = class extends import_view.WidgetType {
  constructor(name, view) {
    super();
    this.name = name;
    this.view = view;
  }
  eq(other) {
    return this.name === other.name;
  }
  toDOM() {
    const span = document.createElement("fragment");
    span.textContent = this.name;
    span.style.backgroundColor = SVG_HOVER_COLOR;
    span.style.color = "black";
    return span;
  }
};
var highlighterDecoration = (match, view) => import_view.Decoration.replace({
  widget: new HighlighterWidget(match[1], view)
});
var highlightMatcher = new import_view.MatchDecorator({
  regexp: /\+\+\+(.*?)\+\+\+/g,
  decoration: (match, view, pos) => {
    return highlighterDecoration(match, view);
  }
});
var highlights = import_view.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.highlights = highlightMatcher.createDeco(view);
    }
    update(update) {
      this.highlights = highlightMatcher.updateDeco(update, this.highlights);
    }
    destroy() {
      this.highlights = import_view.Decoration.none;
    }
  },
  {
    decorations: (instance) => instance.highlights,
    provide: (plugin) => import_view.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.highlights) || import_view.Decoration.none;
    })
  }
);

// src/widget/referenceWidget.ts
var import_view4 = require("@codemirror/view");

// src/references.ts
var import_obsidian4 = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);
var v5_default = v5;

// src/utils.ts
var import_obsidian = require("obsidian");
function encodeURIComponentString(str) {
  return encodeURIComponent(str).replace(/[:()]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}
function decodeURIComponentString(str) {
  return decodeURIComponent(
    str.replace(/%3A/g, ":").replace(/%28/g, "(").replace(/%29/g, ")")
  );
}
function processURI(dataString) {
  let [prefix, text, suffix, file, from, to, portal, toggle] = dataString.split(":");
  prefix = decodeURIComponentString(prefix);
  text = decodeURIComponentString(text);
  suffix = decodeURIComponentString(suffix);
  file = decodeURIComponentString(file);
  from = decodeURIComponentString(from);
  to = decodeURIComponentString(to);
  if (portal)
    portal = decodeURIComponentString(portal);
  toggle = decodeURIComponentString(toggle);
  return [
    prefix,
    text,
    suffix,
    file,
    parseInt(from),
    parseInt(to),
    portal,
    toggle
  ];
}
function getPrefixAndSuffix(document2, from, to) {
  let prefix = document2.slice(from - 25, from).split("\n").slice(-1)[0];
  let suffix = document2.slice(to, to + 25).split("\n")[0];
  return { prefix, suffix };
}
function findTextPositions(text, searchTerm, prefix = "", suffix = "") {
  let rollingIndex = 0;
  const lines = text.split("\n").map((line, i) => {
    let data = { line, index: rollingIndex, length: line.length + 1, i };
    rollingIndex += data.length;
    return data;
  });
  if (text.includes(prefix + searchTerm + suffix)) {
    let matchIndex = text.indexOf(prefix + searchTerm + suffix);
    let startIndex = lines.findIndex((line) => line.index > matchIndex + prefix.length) - 1;
    let endIndex = lines.findIndex(
      (line) => line.index > matchIndex + prefix.length + searchTerm.length
    ) - 1;
    if (startIndex == -2)
      startIndex = lines.length - 1;
    if (endIndex == -2)
      endIndex = lines.length - 1;
    return {
      rangeStart: {
        line: startIndex,
        ch: matchIndex + prefix.length - lines[startIndex].index
      },
      rangeEnd: {
        line: endIndex,
        ch: matchIndex + prefix.length + searchTerm.length - lines[endIndex].index
      },
      lines
    };
  }
  return null;
}
function handleRemoveHoveredCursor(user) {
  if (getHoveredCursor()) {
    let nonCursors = getHoveredCursor().filter((element) => {
      return element.user !== user;
    }).map((element) => element.cursor.closest("span"));
    getHoveredCursor().filter((element) => element.user === user).forEach((element) => {
      if (!nonCursors.includes(element.cursor.closest("span"))) {
        let svg = element.cursor;
        if (!svg)
          throw new Error("SVG not found");
        if (svg.classList.contains("reference-icon"))
          svg.style.backgroundColor = "white";
        else {
          svg.setAttribute("fill", "white");
          svg.style.backgroundColor = "";
        }
        element.cursor.style.backgroundColor = "white";
      }
    });
    removeHoveredCursor(user);
  }
}

// src/workspace.ts
var import_obsidian2 = require("obsidian");
function collectLeavesByTab(split, result = []) {
  const type = split.type;
  if (!type)
    throw new Error("Split type not found");
  if (type == "tabs" || type == "split") {
    const children = split.children;
    if (!children)
      throw new Error("Split children not found");
    if (children) {
      for (const child of children) {
        let emptyList = [];
        collectLeavesByTab(child, result);
      }
    }
  } else if (type == "leaf") {
    const parentSplitId = split.parent.id;
    if (!parentSplitId)
      throw new Error("Split parent id not found");
    let idx = result.findIndex((tab) => {
      const tabId = tab[0].parent.id;
      return tabId == parentSplitId;
    });
    if (idx == -1) {
      result.push([split]);
    } else {
      result[idx].push(split);
    }
  }
  return result;
}
function collectLeavesByTabHelper() {
  const { workspace } = getThat();
  const currLeaf = workspace.getLeaf();
  const rootSplit = currLeaf.getRoot();
  return collectLeavesByTab(rootSplit);
}
function getCurrentTabIndex(leavesByTab, span) {
  let workspaceTab = span.closest(".workspace-tabs");
  let currTabIdx = leavesByTab.findIndex((tab) => {
    const leafTab = tab[0].view.containerEl.closest(".workspace-tabs");
    return leafTab == workspaceTab;
  });
  return currTabIdx;
}
function getAdjacentTabs(leavesByTab, currTabIdx, file) {
  let rightAdjacentTab = [];
  let leftAdjacentTab = [];
  let adjacentTabs = [];
  if (leavesByTab[currTabIdx + 1]) {
    rightAdjacentTab = leavesByTab[currTabIdx + 1];
    adjacentTabs = [...adjacentTabs, ...rightAdjacentTab];
  }
  if (leavesByTab[currTabIdx - 1]) {
    leftAdjacentTab = leavesByTab[currTabIdx - 1];
    adjacentTabs = [...adjacentTabs, ...leftAdjacentTab];
  }
  let index = adjacentTabs.findIndex(
    (x) => x.getViewState().state.file == file
  );
  return { adjacentTabs, rightAdjacentTab, leftAdjacentTab, index };
}
async function openFileInAdjacentTab(leavesByTab, currTabIdx, file, type) {
  let { adjacentTabs, rightAdjacentTab, leftAdjacentTab } = getAdjacentTabs(
    leavesByTab,
    currTabIdx,
    file
  );
  let allTabNames = leavesByTab.map(
    (tab) => tab.map((x) => x.getViewState().state.file)
  );
  let rightAdjacentTabNames = rightAdjacentTab.map(
    (x) => x.getViewState().state.file
  );
  let leftAdjacentTabNames = leftAdjacentTab.map(
    (x) => x.getViewState().state.file
  );
  const { workspace } = getThat();
  if (allTabNames.filter((v, i) => i != currTabIdx).flat().includes(file) && !rightAdjacentTabNames.includes(file) && !leftAdjacentTabNames.includes(file)) {
    let currentTabNames = [];
    let currentTab = [];
    allTabNames.forEach((tabNames, i) => {
      if (tabNames != rightAdjacentTabNames && tabNames != leftAdjacentTabNames && currTabIdx != i) {
        if (tabNames.includes(file)) {
          currentTabNames = tabNames;
          currentTab = leavesByTab[i];
        }
      }
    });
    const originalLeaf = currentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = currentTab[currentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    console.log("open file new tab");
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (rightAdjacentTabNames.includes(file)) {
    const originalLeaf = rightAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = rightAdjacentTab[rightAdjacentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    console.log("open existing file right tab");
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (leftAdjacentTabNames.includes(file)) {
    const originalLeaf = leftAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = leftAdjacentTab[leftAdjacentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    console.log("open existing file left tab");
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (rightAdjacentTab.length > 0) {
    const originalLeaf = rightAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let currLeaf = workspace.getLeaf();
    workspace.setActiveLeaf(originalLeaf);
    let newLeaf = workspace.getLeaf(true);
    await openFileInLeaf(newLeaf, file);
    workspace.revealLeaf(newLeaf);
    workspace.setActiveLeaf(currLeaf);
    console.log("open new file right tab");
    return { newLeaf, temp: true, originalLeaf };
  } else if (leftAdjacentTab.length > 0) {
    const originalLeaf = leftAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let currLeaf = workspace.getLeaf();
    workspace.setActiveLeaf(originalLeaf);
    let newLeaf = workspace.getLeaf(true);
    await openFileInLeaf(newLeaf, file);
    workspace.revealLeaf(newLeaf);
    workspace.setActiveLeaf(currLeaf);
    console.log("open new file left tab");
    return { newLeaf, temp: true, originalLeaf };
  } else {
    const currLeaf = workspace.getLeaf();
    let newLeaf = workspace.createLeafBySplit(currLeaf);
    await openFileInLeaf(newLeaf, file);
    console.log("open new file left tab");
    return { newLeaf, temp: true, originalLeaf: currLeaf };
  }
}
async function openFileInLeaf(leaf, file) {
  let targetFile = getThat().vault.getAbstractFileByPath(file);
  if (targetFile && targetFile instanceof import_obsidian2.TFile)
    await leaf.openFile(targetFile, { active: false });
}

// src/effects.ts
var import_obsidian3 = require("obsidian");

// src/mark.ts
var import_view2 = require("@codemirror/view");
var import_state4 = require("@codemirror/state");
var addHighlight = import_state4.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var addDefaultHighlight = import_state4.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var resetHighlight = import_state4.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var highlightField = import_state4.StateField.define({
  create() {
    return import_view2.Decoration.none;
  },
  update(higlights, tr) {
    higlights = higlights.map(tr.changes);
    for (let e of tr.effects)
      if (e.is(addDefaultHighlight)) {
        higlights = higlights.update({
          add: [defaultHighlightMark.range(e.value.from, e.value.to)]
        });
      } else if (e.is(addHighlight)) {
        higlights = higlights.update({
          add: [highlightMark.range(e.value.from, e.value.to)]
        });
      } else if (e.is(resetHighlight)) {
        higlights = higlights.update({
          filter: (from, to) => {
            return !(from === e.value.from && to === e.value.to);
          }
        });
      }
    return higlights;
  },
  provide: (f2) => import_view2.EditorView.decorations.from(f2)
});
var highlightMark = import_view2.Decoration.mark({ class: "highlight" });
var defaultHighlightMark = import_view2.Decoration.mark({ class: "default-highlight" });
var theme = import_view2.EditorView.baseTheme({});
function highlightSelection(view, from, to) {
  let effects = [addHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  if (!view.state.field(highlightField, false))
    effects.push(import_state4.StateEffect.appendConfig.of([highlightField, theme]));
  view.dispatch({ effects });
  return true;
}
function defaultHighlightSelection(view, from, to) {
  let effects = [addDefaultHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  console.log("DEFAULT HIGHLIGHT SELECTION RANGES");
  console.log(view.state.selection.ranges);
  console.log(from, to);
  if (!view.state.field(highlightField, false))
    effects.push(import_state4.StateEffect.appendConfig.of([highlightField, theme]));
  view.dispatch({ effects });
  return true;
}
function removeHighlight(view, from, to) {
  let effects = [resetHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  view.dispatch({ effects });
  return true;
}

// src/effects.ts
var import_view3 = require("@codemirror/view");
function getEditorView(leaf) {
  var _a;
  if (!leaf)
    return null;
  const view = leaf.view;
  const editor = (_a = view.sourceMode) == null ? void 0 : _a.cmEditor;
  if (!editor.CodeMirror && editor.cm instanceof import_view3.EditorView) {
    const editorView = editor.cm;
    return editorView;
  }
  return null;
}
function checkSpanElementExists(span, containerEl) {
  const spanElements = containerEl.getElementsByTagName("span");
  for (let i = 0; i < spanElements.length; i++) {
    if (spanElements[i] === span) {
      return true;
    }
  }
  return false;
}
function parseCSSString(css) {
  const cssPropertiesRegex = /([\w-]+)\s*:\s*([^;]+)\s*;?/g;
  let cssPropertiesObject = {};
  let match;
  while ((match = cssPropertiesRegex.exec(css)) !== null) {
    cssPropertiesObject[match[1]] = match[2];
  }
  return cssPropertiesObject;
}
function delay(milliseconds) {
  return new Promise((resolve) => {
    setTimeout(resolve, milliseconds);
  });
}
function tempDirectionIndicator(leaf, text, prefix, suffix, dataString, isSame, user) {
  if (user === ACTION_TYPE.BACKLINK) {
    const editor2 = getMarkdownView(leaf).editor;
    const backlinkContainer2 = getBacklinkContainer(editor2);
    const windowHeight2 = leaf.view.containerEl.querySelector(".cm-scroller").getBoundingClientRect().height;
    const scrollTop2 = leaf.view.containerEl.querySelector(".cm-scroller").scrollTop;
    const scrollBottom2 = scrollTop2 + windowHeight2;
    let container = editor2.containerEl;
    let content = container.querySelector(".cm-content");
    let references = content.querySelectorAll(".reference-data-span");
    let visibleElements2 = [];
    for (let i = 0; i < references.length; i++) {
      let bbox = references[i].getBoundingClientRect();
      if (bbox.top >= scrollTop2 && bbox.bottom <= scrollBottom2) {
        visibleElements2.push(references[i]);
      }
    }
    let dataStrings = visibleElements2.map(
      (el) => el.getAttribute("data")
    );
    let startTop2 = leaf.view.editor.getScrollInfo().top;
    if (!dataStrings.includes(dataString)) {
      let positions2 = findTextPositions(
        leaf.view.data,
        text,
        prefix.slice(0, prefix.length - 1),
        suffix.slice(1, suffix.length)
      );
      if (!positions2)
        throw new Error("Positions not found");
      let rangeStart2 = positions2.rangeStart;
      let rangeEnd2 = positions2.rangeEnd;
      leaf.view.editor.scrollIntoView(
        {
          from: Object.assign(rangeStart2, { ch: 0 }),
          to: Object.assign(rangeEnd2, { ch: 0 })
        },
        true
      );
    }
    setTimeout(() => {
      let endTop = leaf.view.editor.getScrollInfo().top;
      console.log(endTop);
      let container2 = leaf.containerEl.querySelector(".view-content");
      container2.classList.remove("no-shadow");
      container2.classList.remove("new-shadow");
      container2.classList.remove("top-shadow");
      container2.classList.remove("bottom-shadow");
      if (startTop2 === endTop && isSame) {
        container2.classList.add("no-shadow");
      } else if (startTop2 === endTop && !isSame) {
        container2.classList.add("new-shadow");
      } else if (startTop2 < endTop) {
        container2.classList.add("top-shadow");
      } else {
        container2.classList.add("bottom-shadow");
      }
    }, 25);
    return;
  }
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  const windowHeight = leaf.view.containerEl.querySelector(".cm-scroller").getBoundingClientRect().height;
  const scrollTop = leaf.view.containerEl.querySelector(".cm-scroller").scrollTop;
  const scrollBottom = scrollTop + windowHeight;
  let visibleElements = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    let style = backlinkContainer.children[i].getAttribute("style");
    if (style == null)
      continue;
    let cssProperties = parseCSSString(style);
    let top = parseFloat(cssProperties["top"].replace("px", ""));
    if (top == null)
      continue;
    if (scrollTop <= top && top <= scrollBottom && backlinkContainer.children[i]) {
      let reference = backlinkContainer.children[i].getAttribute("reference");
      if (reference) {
        visibleElements.push(JSON.parse(reference).dataString);
      }
    }
  }
  console.log(!visibleElements.includes(dataString));
  let startTop = leaf.view.editor.getScrollInfo().top;
  let positions = findTextPositions(
    leaf.view.data,
    text,
    prefix.slice(0, prefix.length - 1),
    suffix.slice(1, suffix.length)
  );
  if (!positions)
    throw new Error("Positions not found");
  let rangeStart = positions.rangeStart;
  let rangeEnd = positions.rangeEnd;
  leaf.view.editor.scrollIntoView(
    {
      from: Object.assign(rangeStart, { ch: 0 }),
      to: Object.assign(rangeEnd, { ch: 0 })
    },
    true
  );
  console.log(startTop);
  setTimeout(() => {
    let endTop = leaf.view.editor.getScrollInfo().top;
    console.log(endTop);
    let container = leaf.containerEl.querySelector(".view-content");
    container.classList.remove("no-shadow");
    container.classList.remove("new-shadow");
    container.classList.remove("top-shadow");
    container.classList.remove("bottom-shadow");
    if (startTop === endTop && isSame) {
      container.classList.add("no-shadow");
    } else if (startTop === endTop && !isSame) {
      container.classList.add("new-shadow");
    } else if (startTop < endTop) {
      container.classList.add("top-shadow");
    } else {
      container.classList.add("bottom-shadow");
    }
  }, 25);
}
function endEffectRemoveHighlights(workspace, leafId, uuid, backlinkUUID) {
  var _a, _b, _c, _d, _e;
  const workspaceContainer = workspace.containerEl;
  const span = workspaceContainer.querySelector("." + uuid);
  (_b = (_a = span == null ? void 0 : span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.remove("reference-span-selected");
  span == null ? void 0 : span.classList.remove("reference-data-span-selected");
  if (backlinkUUID) {
    const backlinkSpan = workspaceContainer.querySelector("." + backlinkUUID);
    (_d = (_c = backlinkSpan == null ? void 0 : backlinkSpan.parentElement) == null ? void 0 : _c.querySelector(".reference-span")) == null ? void 0 : _d.classList.remove("reference-span-selected");
    backlinkSpan == null ? void 0 : backlinkSpan.classList.remove("reference-data-span-selected");
  }
  let targetLeaf = workspace.getLeafById(leafId);
  if (!targetLeaf) {
    resetCursor();
    throw new Error("Target leaf not found");
  }
  let container = (_e = getContainerElement(targetLeaf)) == null ? void 0 : _e.querySelector(".view-content");
  if (container) {
    container.classList.remove("no-shadow");
    container.classList.remove("new-shadow");
    container.classList.remove("top-shadow");
    container.classList.remove("bottom-shadow");
  }
}
async function startBacklinkEffect(span) {
  var _a, _b, _c, _d;
  let source = getBacklinkHover();
  let destination = getCursor();
  let updateState = updateBacklinkHover;
  if (source != null)
    return;
  updateState({
    type: `${ACTION_TYPE.BACKLINK}-start`
  });
  if (!span)
    return;
  let uuid = Array.from(span.classList).filter((el) => el.includes("uuid"))[0];
  (_b = (_a = span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.add("reference-span-selected");
  span.classList.add("reference-data-span-selected");
  updateState({
    uuid
  });
  const referenceData = span.getAttribute("reference");
  if (!referenceData)
    throw new Error("Reference data not found");
  const backlink = JSON.parse(referenceData);
  const dataString = backlink.dataString;
  if (destination != null && destination.dataString == dataString) {
    updateState(destination);
    return;
  }
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  let leavesByTab = collectLeavesByTabHelper();
  let currTabIdx = getCurrentTabIndex(leavesByTab, span);
  let backlinkLeaf = leavesByTab[currTabIdx].filter((leaf) => {
    let containerEl = getContainerElement(leaf);
    const exists = checkSpanElementExists(span, containerEl);
    return exists;
  })[0];
  let backlinkLeafID = backlinkLeaf.id;
  if (!backlinkLeafID)
    throw new Error("Leaf id not found");
  if (backlinkLeaf && backlinkLeaf.view instanceof import_obsidian3.MarkdownView) {
    const editorView = getEditorView(backlinkLeaf);
    if (!editorView)
      throw new Error("Editor view not found");
    const viewport = backlinkLeaf.view.editor.getScrollInfo();
    removeHighlight(editorView, from, to);
    highlightSelection(editorView, from, to);
    updateState({
      dataString,
      originalTop: editorView.documentTop,
      backlinkLeafId: backlinkLeafID
    });
  }
  let referencingFile = backlink.referencingLocation.filename;
  const { newLeaf, temp, originalLeaf } = await openFileInAdjacentTab(
    leavesByTab,
    currTabIdx,
    referencingFile
  );
  let id = newLeaf.id;
  if (!id)
    throw new Error("Leaf id not found");
  updateState({
    leafId: id,
    temp,
    peek: true
  });
  const originalLeafId = originalLeaf.id;
  const matches = [
    ...backlink.referencingLocation.text.matchAll(REFERENCE_REGEX)
  ];
  if (matches.length == 0)
    throw new Error("Matches not found");
  tempDirectionIndicator(
    newLeaf,
    backlink.referencingLocation.text,
    backlink.referencingLocation.prefix + "-",
    "-" + backlink.referencingLocation.suffix,
    matches[0][1],
    id === originalLeafId,
    ACTION_TYPE.BACKLINK
  );
  const cursorViewport = newLeaf.view.editor.getScrollInfo();
  updateState({
    cursorViewport
  });
  let backlinkSpan = newLeaf.containerEl.querySelector(
    `span[data="${backlink.dataString}"]`
  );
  if (backlinkSpan) {
    let backlinkUUID = Array.from(backlinkSpan.classList).filter(
      (el) => el.includes("uuid")
    )[0];
    (_d = (_c = backlinkSpan.parentElement) == null ? void 0 : _c.querySelector(".reference-span")) == null ? void 0 : _d.classList.add("reference-span-selected");
    backlinkSpan.classList.add("reference-data-span-selected");
    updateState({
      backlinkUUID
    });
  }
  if (originalLeafId) {
    updateState({
      originalLeafId
    });
  }
  return;
}
async function startReferenceEffect(span, type) {
  var _a, _b;
  let source = type == ACTION_TYPE.MOUSE ? getHover() : getCursor();
  let destination = type == ACTION_TYPE.MOUSE ? getCursor() : getHover();
  let updateState = type == ACTION_TYPE.MOUSE ? updateHover : updateCursor;
  if (source != null) {
    if (ACTION_TYPE.CURSOR == type) {
      await endReferenceCursorEffect();
    } else {
      return;
    }
  }
  updateState({
    type: `${type}-start`
  });
  if (!span)
    return;
  let uuid = Array.from(span.classList).filter((el) => el.includes("uuid"))[0];
  (_b = (_a = span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.add("reference-span-selected");
  span.classList.add("reference-data-span-selected");
  updateState({
    uuid
  });
  const dataString = span.getAttribute("data");
  if (!dataString)
    throw new Error("Data string not found");
  if (destination != null && destination.dataString == dataString && ACTION_TYPE.CURSOR != type) {
    updateHover(destination);
    return;
  }
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  let leavesByTab = collectLeavesByTabHelper();
  let currTabIdx = getCurrentTabIndex(leavesByTab, span);
  let currLeaf = getThat().workspace.getLeaf();
  let currLeafID = currLeaf.id;
  if (!currLeafID)
    throw new Error("currLeafID id not found");
  const { newLeaf, temp, originalLeaf } = await openFileInAdjacentTab(
    leavesByTab,
    currTabIdx,
    file,
    type
  );
  let id = newLeaf.id;
  if (!id)
    throw new Error("Leaf id not found");
  updateState({
    leafId: id,
    temp,
    peek: true
  });
  const originalLeafId = originalLeaf.id;
  console.log(newLeaf && newLeaf.view instanceof import_obsidian3.MarkdownView);
  if (newLeaf && newLeaf.view instanceof import_obsidian3.MarkdownView) {
    const editorView = getEditorView(newLeaf);
    if (!editorView)
      throw new Error("Editor view not found");
    const viewport = newLeaf.view.editor.getScrollInfo();
    removeHighlight(editorView, from, to);
    highlightSelection(editorView, from, to);
    console.log("leaves are equal" + id === originalLeafId);
    tempDirectionIndicator(
      newLeaf,
      text,
      prefix,
      suffix,
      dataString,
      id === originalLeafId
    );
    const cursorViewport = newLeaf.view.editor.getScrollInfo();
    updateState({
      dataString,
      originalTop: editorView.documentTop,
      // originalLeafId: currLeafID,
      cursorViewport
    });
  }
  if (originalLeafId) {
    updateState({
      originalLeafId
    });
  }
}
async function endReferenceCursorEffect() {
  var _a, _b;
  if (!getCursor() || Object.keys(getCursor()).length == 0) {
    resetCursor();
    return;
  }
  const {
    dataString,
    leafId,
    originalLeafId,
    temp,
    cursorViewport,
    peek,
    uuid,
    removed
  } = getCursor();
  resetCursor();
  if (getHover() != null && getHover().dataString == dataString) {
    resetCursor();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  endEffectRemoveHighlights(workspace, leafId, uuid);
  const activeLeaf = getThat().workspace.getLeaf();
  const activeLeafId = activeLeaf.id;
  let editorView = getEditorView(targetLeaf);
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  removeHighlight(editorView, from, to);
  if (!removed)
    defaultHighlightSelection(editorView, from, to);
  if (activeLeafId === leafId) {
    resetCursor();
    let containerEl = getContainerElement(targetLeaf);
    if (containerEl != null) {
      (_a = containerEl.querySelector(".view-content")) == null ? void 0 : _a.setAttribute("style", "");
    }
    return;
  }
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian3.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
    if (getHover() != null) {
      const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getHover();
      let [prefix2, text2, suffix2, file2, from2, to2] = processURI(dataString2);
      const cursorLeaf = workspace.getLeafById(leafId2);
      workspace.revealLeaf(cursorLeaf);
      const editorView2 = getEditorView(cursorLeaf);
      highlightSelection(editorView2, from2, to2);
    } else {
      let containerEl = getContainerElement(targetLeaf);
      if (containerEl != null) {
        (_b = containerEl.querySelector(".view-content")) == null ? void 0 : _b.setAttribute("style", "");
      }
    }
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
  }
  if (peek) {
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf)
      throw new Error("Original leaf not found");
    workspace.revealLeaf(originalLeaf);
  }
  resetCursor();
}
async function endReferenceHoverEffect() {
  if (!getHover() || Object.keys(getHover()).length == 0) {
    resetHover();
    return;
  }
  let { dataString, leafId, originalLeafId, temp, cursorViewport, peek, uuid } = getHover();
  resetHover();
  if (getCursor() != null && getCursor().dataString == dataString) {
    resetHover();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  endEffectRemoveHighlights(workspace, leafId, uuid);
  let editorView = getEditorView(targetLeaf);
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  removeHighlight(editorView, from, to);
  defaultHighlightSelection(editorView, from, to);
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian3.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
    if (getCursor() != null && getCursor().dataString) {
      const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getCursor();
      let [prefix2, text2, suffix2, file2, from2, to2, portal, toggle] = processURI(dataString2);
      const cursorLeaf = workspace.getLeafById(leafId2);
      workspace.revealLeaf(cursorLeaf);
      const editorView2 = getEditorView(cursorLeaf);
      if (!editorView2)
        throw new Error("Editor view not found");
      highlightSelection(editorView2, from2, to2);
    } else {
      let containerEl = getContainerElement(targetLeaf);
      if (containerEl != null) {
        setTimeout(() => {
          var _a;
          (_a = containerEl.querySelector(".view-content")) == null ? void 0 : _a.setAttribute("style", "");
        }, 50);
      }
    }
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf)
      throw new Error("Original leaf not found");
    workspace.revealLeaf(originalLeaf);
  }
  if (peek) {
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf) {
      resetHover();
      throw new Error("Original leaf not found");
    }
    workspace.revealLeaf(originalLeaf);
  }
  resetHover();
}
async function endBacklinkHoverEffect() {
  if (!getBacklinkHover() || Object.keys(getBacklinkHover()).length == 0) {
    resetBacklinkHover();
    return;
  }
  const {
    dataString,
    leafId,
    originalLeafId,
    backlinkLeafId,
    temp,
    cursorViewport,
    peek,
    uuid,
    backlinkUUID
  } = getBacklinkHover();
  resetBacklinkHover();
  if (getCursor() != null && getCursor().dataString == dataString) {
    resetBacklinkHover();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  endEffectRemoveHighlights(workspace, leafId, uuid, backlinkUUID);
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian3.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
  }
  let containerEl = getContainerElement(targetLeaf);
  if (containerEl != null) {
    setTimeout(() => {
      var _a;
      (_a = containerEl.querySelector(".view-content")) == null ? void 0 : _a.setAttribute("style", "");
    }, 50);
  }
  let editorView = getEditorView(targetLeaf);
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  const originalLeaf = workspace.getLeafById(backlinkLeafId);
  if (!originalLeaf) {
    resetBacklinkHover();
    throw new Error("Original leaf not found");
  }
  let originalEditorView = getEditorView(originalLeaf);
  removeHighlight(originalEditorView, from, to);
  defaultHighlightSelection(originalEditorView, from, to);
  if (getCursor() != null && getCursor().dataString) {
    const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getCursor();
    let [prefix2, text2, suffix2, file2, from2, to2] = processURI(dataString2);
    const cursorLeaf = workspace.getLeafById(leafId2);
    workspace.revealLeaf(cursorLeaf);
    const editorView2 = getEditorView(cursorLeaf);
    highlightSelection(editorView2, from2, to2);
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
  }
  if (peek) {
    let originalLeaf2 = workspace.getLeafById(originalLeafId);
    if (!originalLeaf2) {
      resetBacklinkHover();
      throw new Error("Original leaf not found");
    }
    workspace.revealLeaf(originalLeaf2);
  }
  resetBacklinkHover();
}

// src/references.ts
function generateDefaultHighlights(leaf) {
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  let editorView = getCodeMirrorEditorView(editor);
  let backlinks2 = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    backlinks2.push(backlinkContainer.children.item(i));
  }
  for (let backlink of backlinks2) {
    let reference = backlink.getAttribute("reference") ? JSON.parse(backlink.getAttribute("reference")) : null;
    if (reference) {
      let referenceFrom = reference.referencedLocation.from;
      let referenceTo = reference.referencedLocation.to;
      console.log("default highlight selection");
      defaultHighlightSelection(editorView, referenceFrom, referenceTo);
    }
  }
}
function createReferenceIcon(portalText = null) {
  const span = document.createElement("span");
  span.style.cursor = "pointer";
  span.classList.add("reference-data-span");
  span.classList.add("uuid-" + v4_default());
  if (portalText == null) {
    return span;
  }
  if (portalText != "inline reference widget |*|") {
    let portal = document.createElement("div");
    portal.classList.add("portal");
    portalText.split(":").forEach((text, index) => {
      if (index === 0 || index === 2)
        portal.innerHTML += decodeURIComponentString(text);
      else if (index === 1) {
        portal.innerHTML += `<span class="text-accent";>${text}</span>`;
      }
    });
    portal.style.userSelect = "none";
    portal.style.pointerEvents = "none";
    span.appendChild(portal);
  }
  return span;
}
function getCodeMirrorEditorView(editor) {
  return editor.cm;
}
function getContainerElement(editorOrLeaf) {
  return editorOrLeaf.containerEl;
}
function getBacklinkID(backlink) {
  const jsonString = JSON.stringify(backlink);
  const id = v5_default(jsonString, "fb813ebb-1b53-4306-aa9c-655627447f0b");
  return `backlink-${id}`;
}
function getBacklinkContainer(editor) {
  const containerEl = getContainerElement(editor);
  const referenceMarkContainerID = "referenceMarkContainer";
  const container = containerEl.querySelector(`#${referenceMarkContainerID}`);
  if (container) {
    return container;
  } else {
    const newContainer = document.createElement("div");
    newContainer.id = referenceMarkContainerID;
    containerEl.querySelector(".cm-scroller").appendChild(newContainer);
    return newContainer;
  }
}
function getLeafBBoxElements(leaf) {
  const title = getContainerElement(leaf).querySelector(".inline-title");
  if (!title) {
    throw new Error("Missing title");
  }
  const titleBbox = title.getBoundingClientRect();
  const line = getContainerElement(leaf).querySelector(".cm-line");
  if (!line) {
    throw new Error("Document has no lines");
  }
  const lineBbox = line.getBoundingClientRect();
  return { titleBbox, lineBbox };
}
function layoutBacklinks(leaf, backlinksToLeaf, showPortals) {
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  let backlinks2 = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    backlinks2.push(backlinkContainer.children.item(i));
  }
  let backlinkIds = backlinksToLeaf.map((x) => getBacklinkID(x));
  backlinks2.map((x) => x.id).forEach((id) => {
    if (!backlinkIds.includes(id)) {
      let element = document.getElementById(id);
      if (element)
        element.remove();
    }
  });
  const { titleBbox, lineBbox } = getLeafBBoxElements(leaf);
  let referenceMarkers = backlinksToLeaf.map((backlink) => {
    const { from } = backlink.referencedLocation;
    const bbox = getCodeMirrorEditorView(editor).coordsAtPos(from);
    if (!bbox)
      return;
    let referenceMarker = backlinkContainer.querySelector(
      `#${getBacklinkID(backlink)}`
    );
    if (referenceMarker === null) {
      referenceMarker = createBacklinkMark(backlink);
      backlinkContainer.appendChild(referenceMarker);
    }
    if (bbox) {
      referenceMarker.style.position = "absolute";
      referenceMarker.setAttribute("top", bbox.top.toString());
      referenceMarker.style.top = bbox.top - titleBbox.top + 32 + "px";
      referenceMarker.style.left = lineBbox.width + 40 + "px";
    }
    return referenceMarker;
  });
  let lastYBottom = -Infinity;
  let margin = 4;
  referenceMarkers.sort(
    (a, b) => parseInt(a.getAttribute("top")) - parseInt(b.getAttribute("top"))
  ).forEach((marker) => {
    if (!marker)
      return;
    const portal = marker.querySelector(".portal");
    if (showPortals) {
      if (portal) {
        portal.style.display = "inline";
        marker.classList.add("backlink-span");
      }
    } else {
      if (portal) {
        portal.style.display = "none";
      }
      marker.classList.remove("backlink-span");
    }
    let top = parseInt(marker.getAttribute("top"));
    top = Math.max(top, lastYBottom + margin);
    lastYBottom = top + marker.getBoundingClientRect().height + margin;
    marker.setAttribute("top", top.toString());
    marker.style.top = top - titleBbox.top + 32 + "px";
    marker.style.left = lineBbox.width + 40 + "px";
  });
}
var debounceTimer;
async function updateBacklinkMarkPositions(backlinks2) {
  clearTimeout(debounceTimer);
  debounceTimer = setTimeout(async () => {
    console.log("updatebacklinkmarkpositions");
    const leaves = getThat().workspace.getLeavesOfType(
      "markdown"
    );
    setTimeout(async () => {
      let allBacklinks;
      if (!backlinks2)
        allBacklinks = await generateBacklinks();
      else
        allBacklinks = backlinks2;
      await Promise.all(
        leaves.map(async (leaf) => {
          const backlinksToLeaf = allBacklinks.filter(
            // @ts-ignore
            (b) => b.referencedLocation.filename == leaf.view.file.path
          );
          const showPortals = getContainerElement(leaf).innerWidth > 900;
          layoutBacklinks(leaf, backlinksToLeaf, showPortals);
        })
      );
    }, 1e3);
  }, 100);
}
function createBacklinkMark(backlink) {
  let span = createReferenceIcon(backlink.portalText);
  span.classList.add("backlink-data-span");
  const portal = span.querySelector(".portal");
  span.style.position = "absolute";
  span.id = getBacklinkID(backlink);
  span.setAttribute("reference", JSON.stringify(backlink));
  const resizeObserver = new ResizeObserver((entries) => {
    if (portal && portal.style.display != "none") {
      span.classList.add("backlink-portal-open");
    } else {
      span.classList.remove("backlink-portal-open");
    }
  });
  resizeObserver.observe(span);
  span.addEventListener("click", openBacklinkReference);
  return span;
}
var existingObserver = null;
async function addReferencesToLeaf(leaf, backlinks2) {
  console.log("add references to leaf");
  await updateBacklinkMarkPositions(backlinks2);
  await delay(1e3);
  console.log("initial load");
  generateDefaultHighlights(leaf);
  if (existingObserver) {
    existingObserver.disconnect();
  }
  const newObserver = new ResizeObserver(async () => {
    await updateBacklinkMarkPositions();
    await delay(1e3);
    console.log("resize load");
    generateDefaultHighlights(leaf);
  });
  const markdownView = getMarkdownView(leaf);
  let workspaceTabs = markdownView.containerEl.closest(".workspace-tabs");
  if (!workspaceTabs) {
    throw new Error("Missing workspace tabs");
  }
  newObserver.observe(workspaceTabs);
  existingObserver = newObserver;
  return leaf;
}
function getMarkdownView(leaf) {
  if (!(leaf.view instanceof import_obsidian4.MarkdownView)) {
    throw new Error("Unexpected non-markdown view");
  }
  return leaf.view;
}
function findMatchPositions(line, regex) {
  let match;
  const positions = [];
  while ((match = regex.exec(line)) !== null) {
    positions.push({
      match: match[0],
      start: match.index,
      end: match.index + match[0].length
    });
  }
  return positions;
}
function createBacklinkData(referencingFileData, referencingFile) {
  let backlinks2 = [];
  let matches = [...referencingFileData.matchAll(REFERENCE_REGEX)];
  matches.forEach((match) => {
    if (match[1].split(":").length != 8)
      return;
    let [prefix, text, suffix, filename, from, to, portal, toggle] = processURI(
      match[1]
    );
    const referencedLocation = {
      prefix,
      text,
      suffix,
      filename,
      from,
      to,
      portal,
      toggle
    };
    let index = referencingFileData.indexOf(match[0]);
    const referencingSurroundingStrings = getPrefixAndSuffix(
      referencingFileData,
      index,
      index + match[0].length
    );
    const referencingLocation = {
      prefix: referencingSurroundingStrings.prefix,
      text: referencingFileData.slice(index, index + match[0].length),
      suffix: referencingSurroundingStrings.suffix,
      filename: referencingFile.path,
      from: match.index,
      // TODO do weird string format
      to: match.index + match[0].length,
      // TODO do weird string format
      portal,
      toggle
    };
    if (portal == "portal") {
      const getLineText = (text2, index2) => {
        const startOfLine = text2.lastIndexOf("\n", index2 - 1) + 1;
        const endOfLine = text2.indexOf("\n", index2);
        return text2.slice(
          startOfLine,
          endOfLine !== -1 ? endOfLine : void 0
        );
      };
      let line = getLineText(referencingFileData, index);
      let matchPositions = findMatchPositions(
        line,
        new RegExp(REFERENCE_REGEX)
      );
      let matchIndex = 0;
      for (let i = 0; i < matchPositions.length; i++) {
        if (matchPositions[i].match == match[0]) {
          break;
        } else {
          matchIndex += matchPositions[i].end - matchPositions[i].start - 1;
        }
      }
      let portalText = line.replace(new RegExp(REFERENCE_REGEX, "g"), "\u2197");
      let portalTextSlice = portalText.slice(0, PORTAL_TEXT_SLICE_SIZE);
      let portalTextIndex = line.indexOf(match[0]) - matchIndex;
      portalTextSlice = "\u2197";
      let startPortalText = portalText.substring(
        Math.max(portalTextIndex - 25, 0),
        portalTextIndex
      );
      if (portalText.substring(Math.max(portalTextIndex - 25, 0), portalTextIndex).length > 0 && portalTextIndex - 25 > 0)
        startPortalText = "..." + startPortalText;
      let endPortalText = portalText.substring(
        portalTextIndex + 1,
        Math.max(portalTextIndex + 25, portalText.length)
      );
      if (portalText.substring(
        portalTextIndex + 1,
        Math.max(portalTextIndex + 25, portalText.length)
      ).length > 0 && portalTextIndex + 25 < portalText.length)
        endPortalText = endPortalText + "...";
      backlinks2.push({
        referencedLocation,
        referencingLocation,
        dataString: match[1],
        portalText: encodeURIComponentString(startPortalText) + ":" + portalTextSlice + ":" + encodeURIComponentString(endPortalText)
      });
    } else {
      backlinks2.push({
        referencedLocation,
        referencingLocation,
        dataString: match[1]
      });
    }
  });
  return backlinks2;
}
async function generateBacklinks() {
  console.log("generating references");
  let backlinks2 = [];
  let markdownFiles = this.app.vault.getMarkdownFiles();
  await Promise.all(
    markdownFiles.map((file) => this.app.vault.read(file))
  ).then((files) => {
    const zippedArray = markdownFiles.map((file, index) => ({
      markdownFile: file,
      fileData: files[index]
    }));
    zippedArray.forEach((file) => {
      let fileBacklinks = createBacklinkData(file.fileData, file.markdownFile);
      updateBacklinks(fileBacklinks);
      backlinks2.push(...fileBacklinks);
    });
  });
  return backlinks2;
}
function updateReferenceColor(span, user) {
  const portal = span.querySelector(".portal");
  if (span && !portal) {
    handleRemoveHoveredCursor(user);
    span.style.backgroundColor = SVG_HOVER_COLOR;
    updateHoveredCursor(span, user);
  }
}
async function openBacklinkReference(ev) {
  let cursor = getCursor();
  let hover = getBacklinkHover();
  let leaf = getThat().workspace.getLeafById(hover.leafId);
  let container = leaf.containerEl;
  if (!container)
    throw new Error("Container not found");
  container.querySelector(".view-content").style.boxShadow = "none";
  if (cursor && hover && cursor.dataString && hover.dataString && cursor.dataString == hover.dataString) {
    updateCursor({
      temp: false,
      cursorViewport: null,
      peek: false
    });
  }
  updateBacklinkHover({
    temp: false,
    cursorViewport: null,
    peek: false
  });
  handleRemoveHoveredCursor(ACTION_TYPE.CURSOR);
  resetCursor();
}
async function openReference(ev) {
  let cursor = getCursor();
  let hover = getHover();
  let leaf = getThat().workspace.getLeafById(hover.leafId);
  let container = leaf.containerEl;
  if (!container)
    throw new Error("Container not found");
  container.querySelector(".view-content").style.boxShadow = "none";
  if (cursor && hover && cursor.dataString && hover.dataString && cursor.dataString == hover.dataString) {
    updateCursor({
      temp: false,
      cursorViewport: null,
      peek: false
    });
  }
  updateHover({
    temp: false,
    cursorViewport: null,
    peek: false
  });
  handleRemoveHoveredCursor(ACTION_TYPE.CURSOR);
  resetCursor();
}

// src/widget/referenceWidget.ts
function processLine(line) {
  let lineCopy = line == null ? void 0 : line.cloneNode(true);
  lineCopy == null ? void 0 : lineCopy.querySelectorAll(".reference-span").forEach((span) => {
    span.innerHTML = "\u2197";
  });
  return lineCopy;
}
function getReferencePosition(view, currLine, reference, content) {
  let lines = view.contentDOM.querySelectorAll(".cm-line");
  let activeLineIndex;
  let seenActive = false;
  lines.forEach((line, i) => {
    if (seenActive)
      return;
    if (line == currLine) {
      seenActive = true;
      activeLineIndex = i;
    }
  });
  if (activeLineIndex === void 0)
    return;
  let activeLine = lines[activeLineIndex];
  let activeLineCopy = processLine(activeLine);
  let parts = activeLineCopy.innerText.split("\u2197");
  let lineReferences = activeLine == null ? void 0 : activeLine.querySelectorAll(".reference-data-span");
  let lineReferencesData = Array.from(lineReferences || []).map(
    (span) => "[\u2197](urn:" + span.getAttribute("data") + ")"
  );
  if (!content)
    throw new Error("Reference not found");
  let index = null;
  lineReferencesData.forEach((reference2, i) => {
    if (!index) {
      if (reference2.includes(content)) {
        index = i;
      }
    }
  });
  if (!index && index != 0)
    throw new Error("Reference not found");
  let startText = [
    ...parts.slice(0, index + 1),
    ...lineReferencesData.slice(0, index)
  ].join("");
  startText = startText.replace(/\u{200B}/g, "");
  let prevLineCharCount = Array.from(lines).slice(0, activeLineIndex).reduce((acc, line) => {
    let processedLine = processLine(line);
    let parts2 = processedLine.innerText.split("\u2197");
    let lineReferences2 = line == null ? void 0 : line.querySelectorAll(".reference-data-span");
    let lineReferencesData2 = Array.from(lineReferences2 || []).map(
      (span) => "[\u2197](urn:" + span.getAttribute("data") + ")"
    );
    let allSerializedText = [...parts2, ...lineReferencesData2].join("") + "\n";
    allSerializedText = allSerializedText.replace(/\u{200B}/g, "");
    return allSerializedText.length + acc;
  }, 0);
  let from = prevLineCharCount + startText.length;
  let to = from + reference.length;
  return { from, to };
}
async function serializeReference(content, referenceSpan, view, toggleValue = null) {
  var _a;
  content = typeof content == "string" ? content : content[1];
  const [prefix, text, suffix, file, from, to, portal, toggle] = content.split(":");
  let newToggle = toggleValue ? toggleValue : toggle === "f" ? "t" : "f";
  let reference = `[\u2197](urn:${prefix}:${text}:${suffix}:${file}:${from}:${to}:${portal}:${newToggle})`;
  let currLine = (_a = referenceSpan == null ? void 0 : referenceSpan.parentElement) == null ? void 0 : _a.parentElement;
  const results = getReferencePosition(
    view,
    currLine,
    reference,
    text
  );
  if (results) {
    const transaction = view.state.update({
      changes: { from: results.from, to: results.to, insert: reference }
    });
    view.dispatch(transaction);
    console.log("updatebacklinkpositions");
    await updateBacklinkMarkPositions();
  }
  return;
}
var ReferenceWidget = class extends import_view4.WidgetType {
  constructor(name, view, pos, referenceSpan = null, parentElement = null, serialized = false) {
    super();
    this.name = name;
    this.view = view;
    this.pos = pos;
    this.referenceSpan = referenceSpan;
    this.parentElement = parentElement;
    this.serialized = serialized;
  }
  eq(other) {
    return this.name === other.name;
  }
  getView() {
    return this.view;
  }
  // this runs when re-serialized as well
  destroy() {
    console.log(this.serialized);
    if (this.serialized) {
      this.serialized = false;
      return;
    }
    setTimeout(() => {
      const regex = /\[↗\]\(urn:([^)]*)\)/g;
      let content = regex.exec(this.name);
      if (!content)
        throw new Error("Invalid reference");
      let reference = content[0];
      let dataString = content[1];
      const [prefix, text, suffix, file, from, to, portal, toggle = "f"] = dataString.split(":");
      let decodedFile = decodeURIComponentString(file);
      let leavesByTab = collectLeavesByTabHelper();
      let leaf = leavesByTab.flat().filter((leaf2) => {
        return leaf2.getViewState().state.file == decodedFile;
      })[0];
      let view = getEditorView(leaf);
      removeHighlight(view, parseInt(from), parseInt(to));
      const editor = getMarkdownView(leaf).editor;
      const backlinkContainer = getBacklinkContainer(editor);
      const backlinks2 = Array.from(
        backlinkContainer.querySelectorAll(".reference-data-span")
      );
      const backlinkData = backlinks2.map((backlink) => {
        let reference2 = backlink.getAttribute("reference");
        if (!reference2)
          return {};
        return JSON.parse(reference2);
      });
      const backlinkIndex = backlinkData.findIndex((backlink) => {
        return backlink.dataString === dataString && backlink.referencedLocation.filename === decodeURIComponentString(file);
      });
      backlinks2[backlinkIndex].remove();
    }, 10);
  }
  toDOM() {
    const regex = /\[↗\]\(urn:([^)]*)\)/g;
    let content = regex.exec(this.name);
    if (!content)
      throw new Error("Invalid reference");
    const [prefix, text, suffix, file, from, to, portal, toggle = "f"] = content[1].split(":");
    const span = createReferenceIcon(
      portal == "portal" ? "inline reference widget |*|" : null
    );
    if (content)
      span.setAttribute("data", content[1]);
    const containerSpan = document.createElement("span");
    containerSpan.classList.add("reference-container-span");
    const referenceSpan = document.createElement("span");
    referenceSpan.classList.add("reference-span");
    referenceSpan.innerHTML = decodeURIComponentString(text);
    referenceSpan.classList.toggle("reference-span-hidden", toggle === "f");
    containerSpan.appendChild(referenceSpan);
    containerSpan.appendChild(span);
    this.referenceSpan = referenceSpan;
    setTimeout(() => {
      this.parentElement = containerSpan.parentElement;
    }, 20);
    containerSpan.addEventListener("click", async (ev) => {
      var _a;
      if (ev.metaKey || ev.ctrlKey) {
        openReference(ev);
      } else {
        this.serialized = true;
        await serializeReference(content, referenceSpan, this.view);
        referenceSpan.classList.toggle("reference-span-hidden");
        if (content)
          this.name = content[0];
        if (referenceSpan) {
          this.referenceSpan = referenceSpan;
          this.parentElement = (_a = referenceSpan == null ? void 0 : referenceSpan.parentElement) == null ? void 0 : _a.parentElement;
        }
      }
    });
    return containerSpan;
  }
};
var referenceDecoration = (match, view, pos) => {
  let decoration = import_view4.Decoration.replace({
    widget: new ReferenceWidget(match[0], view, pos)
  });
  return decoration;
};
var referenceMatcher = new import_view4.MatchDecorator({
  // regexp: /\[\u2197\]\(urn:[\s\S^\)]*\)/g,
  // regexp: /\[\u2197\]\(urn:([^:]*:){5,6}[^:]*\)/g,
  // regexp: /\[\u2197\]\(urn:([^:]*:){6}[^:)]*\)/g,
  regexp: /\[\u2197\]\(urn:([^:]*:){7}[^:)]*\)/g,
  decoration: (match, view, pos) => {
    return referenceDecoration(match, view, pos);
  }
});
var referenceResources = import_view4.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.referenceResources = referenceMatcher.createDeco(view);
    }
    update(update) {
      this.referenceResources = referenceMatcher.updateDeco(
        update,
        this.referenceResources
      );
    }
    destroy() {
      this.referenceResources = import_view4.Decoration.none;
    }
  },
  {
    decorations: (instance) => instance.referenceResources,
    provide: (plugin) => import_view4.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.referenceResources) || import_view4.Decoration.none;
    })
  }
);

// src/clipboard.ts
var import_obsidian5 = require("obsidian");
async function updateClipboard(toggle = false, only = false) {
  const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
  if (view) {
    let selection = view.editor.getSelection();
    if (view.file) {
      const text = view.data;
      const from = view.editor.posToOffset(view.editor.getCursor("from"));
      const to = view.editor.posToOffset(view.editor.getCursor("to"));
      const { prefix, suffix } = getPrefixAndSuffix(text, from, to);
      let reference = `[\u2197](urn:${encodeURIComponentString(
        prefix
      )}-:${encodeURIComponentString(selection)}:-${encodeURIComponentString(
        suffix
      )}:${encodeURIComponentString(view.file.path)}:${from}:${to}:${// only ? "portal" : "no-portal"
      "portal"}:${toggle ? "t" : "f"})`;
      await navigator.clipboard.writeText(reference);
    }
  }
}

// src/main.ts
var import_view5 = require("@codemirror/view");
var lastMouse = null;
async function handleMovementEffects(evt) {
  let span;
  if (evt.target && (evt.target instanceof HTMLSpanElement || evt.target instanceof SVGElement || evt.target instanceof SVGPathElement)) {
    span = evt.target;
    while (!(span instanceof HTMLSpanElement) && span.parentElement != null) {
      span = span.parentElement;
    }
  } else if (lastMouse) {
    const mouseX = lastMouse.clientX;
    const mouseY = lastMouse.clientY;
    span = document.elementFromPoint(mouseX, mouseY);
  }
  if (!evt.metaKey && !evt.ctrlKey) {
    if (getHover() != null) {
      await endReferenceHoverEffect();
      handleRemoveHoveredCursor(ACTION_TYPE.MOUSE);
    } else if (getBacklinkHover() != null) {
      await endBacklinkHoverEffect();
    }
    return;
  } else {
    if (span && span instanceof HTMLSpanElement && (span == null ? void 0 : span.parentElement) && (span == null ? void 0 : span.parentElement.classList.contains("reference-container-span"))) {
      console.log("start hover reference effect");
      if (!span.getAttribute("data")) {
        span = span.parentElement;
        span = span.querySelector(".reference-data-span");
        if (!span)
          throw new Error("Span element not found");
      }
      updateReferenceColor(span, ACTION_TYPE.MOUSE);
      startReferenceEffect(span, ACTION_TYPE.MOUSE);
    } else if (span && span instanceof HTMLSpanElement && span.getAttribute("reference")) {
      console.log("start hover backlink effect");
      startBacklinkEffect(span);
    } else if (getHover() != null) {
      console.log("end hover reference effect");
      const requiredKeys = [
        "dataString",
        "leafId",
        "originalLeafId",
        "temp",
        "cursorViewport",
        "peek",
        "uuid"
      ];
      const allKeysPresent = () => requiredKeys.every((key) => key in getHover());
      if (!allKeysPresent()) {
        await new Promise((resolve) => setTimeout(resolve, 50));
      }
      await endReferenceHoverEffect();
      handleRemoveHoveredCursor(ACTION_TYPE.MOUSE);
    } else if (getBacklinkHover() != null) {
      console.log("end hover backlink effect");
      const requiredKeys = [
        "dataString",
        "leafId",
        "originalLeafId",
        "backlinkLeafId",
        "temp",
        "cursorViewport",
        "peek",
        "uuid",
        "backlinkUUID"
      ];
      const allKeysPresent = () => requiredKeys.every((key) => key in getBacklinkHover());
      if (!allKeysPresent()) {
        await new Promise((resolve) => setTimeout(resolve, 50));
      }
      await endBacklinkHoverEffect();
    }
  }
  console.log("handleMovementEffects");
  await updateBacklinkMarkPositions();
}
var ReferencePlugin = class extends import_obsidian6.Plugin {
  onload() {
    setTimeout(async () => {
      const backlinks2 = await generateBacklinks();
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      let promises = leaves.map(
        (leaf) => {
          return addReferencesToLeaf(leaf, backlinks2);
        }
      );
      await Promise.all(promises);
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", async (ev) => {
          try {
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
            if ((activeView == null ? void 0 : activeView.leaf) != null) {
              await addReferencesToLeaf(activeView.leaf);
            }
          } catch (e) {
            console.log(e);
          }
        })
      );
    }, 4e3);
    updateThat(this);
    this.registerEditorExtension([
      highlights,
      referenceResources,
      import_view5.EditorView.updateListener.of(function(e) {
        if (Math.abs(e.changes.desc.newLength - e.changes.desc.length) > 1) {
          console.log("NEW PASTE EVENT");
          let inserted = e.changes.inserted;
          let referencedFile;
          inserted.forEach((change) => {
            change.text.forEach((text) => {
              const regex = /\[↗\]\(urn:([^)]*)\)/g;
              let content = regex.exec(text);
              if (content) {
                console.log(content);
                const [prefix, text2, suffix, file, from, to, portal, toggle] = content[1].split(":");
                referencedFile = decodeURIComponentString(file);
              }
            });
          });
          let leavesByTab = collectLeavesByTabHelper();
          let leaf = leavesByTab.flat().filter((leaf2) => {
            return leaf2.getViewState().state.file == referencedFile;
          })[0];
          if (leaf) {
            setTimeout(() => {
              addReferencesToLeaf(leaf);
            }, 2e3);
          }
        }
      })
    ]);
    let prevX = 0;
    let prevY = 0;
    this.registerDomEvent(document, "mousemove", async (evt) => {
      let difference = Math.abs(prevX - evt.clientX) + Math.abs(prevY - evt.clientY);
      prevX = evt.clientX;
      prevY = evt.clientY;
      lastMouse = evt;
      if (difference > 10) {
        return;
      }
      handleMovementEffects(evt);
    });
    this.registerDomEvent(document, "click", async (evt) => {
      console.log("click");
      handleMovementEffects(evt);
      updateBacklinkMarkPositions();
    });
    this.registerDomEvent(document, "keyup", async (evt) => {
      if (evt.metaKey || evt.ctrlKey || evt.key === "Backspace")
        return;
      console.log(evt);
      console.log("keyup");
      handleMovementEffects(evt);
      updateBacklinkMarkPositions();
    });
    this.registerDomEvent(document, "keydown", async (evt) => {
      var _a, _b;
      if (evt.metaKey || evt.ctrlKey) {
        handleMovementEffects(evt);
      }
      if (evt.key == "v" && (evt.metaKey || evt.ctrlKey)) {
        console.log("hello");
        let currentLeaf = getThat().workspace.getLeaf();
        await addReferencesToLeaf(currentLeaf);
      } else if (evt.key == "\xC7" && (evt.metaKey || evt.ctrlKey) && evt.shiftKey && evt.altKey) {
        updateClipboard(false);
        new import_obsidian6.Notice("Copied reference to clipboard");
      } else if ((evt.key == "c" || evt.key == "C") && (evt.metaKey || evt.ctrlKey) && evt.shiftKey) {
        updateClipboard(true);
        new import_obsidian6.Notice("Copied reference to clipboard");
      } else if ((evt.key == "s" || evt.key == "S") && (evt.metaKey || evt.ctrlKey) && evt.shiftKey) {
        let target = evt.target;
        let children = Array.from(target.children);
        let currentLine = children.filter(
          (child) => child.classList.contains("cm-active")
        )[0];
        const spans = Array.from(
          currentLine.querySelectorAll(".reference-span")
        );
        let hasOneHidden = false;
        spans.forEach((span) => {
          if (span.classList.contains("reference-span-hidden")) {
            hasOneHidden = true;
          }
        });
        if (spans.every(
          (span) => span.classList.contains("reference-span-hidden")
        ) || hasOneHidden) {
          new import_obsidian6.Notice("Toggle annotations on");
          for (const span of spans) {
            let referenceSpan = (_a = span.parentElement) == null ? void 0 : _a.querySelector(
              ".reference-data-span"
            );
            let content = referenceSpan == null ? void 0 : referenceSpan.getAttribute("data");
            const activeView = this.app.workspace.getLeaf();
            const editor = getMarkdownView(activeView).editor;
            const editorView = getCodeMirrorEditorView(editor);
            await serializeReference(content, span, editorView, "f");
            if (!span.classList.contains("reference-span-hidden")) {
              span.classList.add("reference-span-hidden");
            }
            span.classList.remove("reference-span-hidden");
          }
        } else {
          new import_obsidian6.Notice("Toggle annotations off");
          for (const span of spans) {
            let referenceSpan = (_b = span.parentElement) == null ? void 0 : _b.querySelector(
              ".reference-data-span"
            );
            let content = referenceSpan == null ? void 0 : referenceSpan.getAttribute("data");
            const activeView = this.app.workspace.getLeaf();
            const editor = getMarkdownView(activeView).editor;
            const editorView = getCodeMirrorEditorView(editor);
            await serializeReference(content, span, editorView, "t");
            if (span.classList.contains("reference-span-hidden")) {
              span.classList.remove("reference-span-hidden");
            }
            span.classList.add("reference-span-hidden");
          }
        }
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3N0YXRlLnRzIiwgInNyYy93aWRnZXQvaGlnaGxpZ2h0V2lkZ2V0LnRzIiwgInNyYy9jb25zdGFudHMudHMiLCAic3JjL3dpZGdldC9yZWZlcmVuY2VXaWRnZXQudHMiLCAic3JjL3JlZmVyZW5jZXMudHMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsICJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwgIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcGFyc2UuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MzUuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uYXRpdmUuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcyIsICJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3NoYTEuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NS5qcyIsICJzcmMvdXRpbHMudHMiLCAic3JjL3dvcmtzcGFjZS50cyIsICJzcmMvZWZmZWN0cy50cyIsICJzcmMvbWFyay50cyIsICJzcmMvY2xpcGJvYXJkLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBQbHVnaW4sIE1hcmtkb3duVmlldywgTm90aWNlLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmltcG9ydCB7IHVwZGF0ZVRoYXQsIGdldEhvdmVyLCBnZXRCYWNrbGlua0hvdmVyLCBnZXRUaGF0IH0gZnJvbSBcIi4vc3RhdGVcIjtcbmltcG9ydCB7IGhpZ2hsaWdodHMsIHJlZmVyZW5jZVJlc291cmNlcyB9IGZyb20gXCIuL3dpZGdldFwiO1xuaW1wb3J0IHsgdXBkYXRlQ2xpcGJvYXJkIH0gZnJvbSBcIi4vY2xpcGJvYXJkXCI7XG5pbXBvcnQge1xuXHRnZW5lcmF0ZUJhY2tsaW5rcyxcblx0YWRkUmVmZXJlbmNlc1RvTGVhZixcblx0dXBkYXRlQmFja2xpbmtNYXJrUG9zaXRpb25zLFxuXHRnZXRNYXJrZG93blZpZXcsXG5cdGdldENvZGVNaXJyb3JFZGl0b3JWaWV3LFxuXHR1cGRhdGVSZWZlcmVuY2VDb2xvcixcbn0gZnJvbSBcIi4vcmVmZXJlbmNlc1wiO1xuaW1wb3J0IHtcblx0c3RhcnRSZWZlcmVuY2VFZmZlY3QsXG5cdGVuZFJlZmVyZW5jZUhvdmVyRWZmZWN0LFxuXHRzdGFydEJhY2tsaW5rRWZmZWN0LFxuXHRlbmRCYWNrbGlua0hvdmVyRWZmZWN0LFxufSBmcm9tIFwiLi9lZmZlY3RzXCI7XG5pbXBvcnQgeyBkZWNvZGVVUklDb21wb25lbnRTdHJpbmcsIGhhbmRsZVJlbW92ZUhvdmVyZWRDdXJzb3IgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgQUNUSU9OX1RZUEUgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuaW1wb3J0IHsgc2VyaWFsaXplUmVmZXJlbmNlIH0gZnJvbSBcIi4vd2lkZ2V0L3JlZmVyZW5jZVdpZGdldFwiO1xuaW1wb3J0IHsgQmFja2xpbmsgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgY29sbGVjdExlYXZlc0J5VGFiSGVscGVyIH0gZnJvbSBcIi4vd29ya3NwYWNlXCI7XG5cbmxldCBsYXN0TW91c2U6IE1vdXNlRXZlbnQgfCBudWxsID0gbnVsbDtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVNb3ZlbWVudEVmZmVjdHMoZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuXHRsZXQgc3BhbjtcblxuXHRpZiAoXG5cdFx0ZXZ0LnRhcmdldCAmJlxuXHRcdChldnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNwYW5FbGVtZW50IHx8XG5cdFx0XHRldnQudGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCB8fFxuXHRcdFx0ZXZ0LnRhcmdldCBpbnN0YW5jZW9mIFNWR1BhdGhFbGVtZW50KVxuXHQpIHtcblx0XHQvLyBJZiBlbGVtZW50IGlzIHN2ZywgZmluZCB0aGUgY29udGFpbmluZyBwYXJlbnQgc3BhblxuXHRcdHNwYW4gPSBldnQudGFyZ2V0O1xuXHRcdHdoaWxlICghKHNwYW4gaW5zdGFuY2VvZiBIVE1MU3BhbkVsZW1lbnQpICYmIHNwYW4ucGFyZW50RWxlbWVudCAhPSBudWxsKSB7XG5cdFx0XHRzcGFuID0gc3Bhbi5wYXJlbnRFbGVtZW50O1xuXHRcdH1cblx0fSBlbHNlIGlmIChsYXN0TW91c2UpIHtcblx0XHRjb25zdCBtb3VzZVggPSBsYXN0TW91c2UuY2xpZW50WDtcblx0XHRjb25zdCBtb3VzZVkgPSBsYXN0TW91c2UuY2xpZW50WTtcblx0XHRzcGFuID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChtb3VzZVgsIG1vdXNlWSk7XG5cdH1cblxuXHQvLyBpZiBrZXkgbm90IHByZXNzZWQsIG1vdXNlIG1vdmVtZW50IHNob3VsZCBlbmQgaG92ZXIgZWZmZWN0IGltbWVkaWF0ZWx5XG5cdGlmICghZXZ0Lm1ldGFLZXkgJiYgIWV2dC5jdHJsS2V5KSB7XG5cdFx0aWYgKGdldEhvdmVyKCkgIT0gbnVsbCkge1xuXHRcdFx0YXdhaXQgZW5kUmVmZXJlbmNlSG92ZXJFZmZlY3QoKTtcblx0XHRcdGhhbmRsZVJlbW92ZUhvdmVyZWRDdXJzb3IoQUNUSU9OX1RZUEUuTU9VU0UpO1xuXHRcdH0gZWxzZSBpZiAoZ2V0QmFja2xpbmtIb3ZlcigpICE9IG51bGwpIHtcblx0XHRcdGF3YWl0IGVuZEJhY2tsaW5rSG92ZXJFZmZlY3QoKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9IGVsc2Uge1xuXHRcdGlmIChcblx0XHRcdHNwYW4gJiZcblx0XHRcdHNwYW4gaW5zdGFuY2VvZiBIVE1MU3BhbkVsZW1lbnQgJiZcblx0XHRcdHNwYW4/LnBhcmVudEVsZW1lbnQgJiZcblx0XHRcdHNwYW4/LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicmVmZXJlbmNlLWNvbnRhaW5lci1zcGFuXCIpXG5cdFx0KSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInN0YXJ0IGhvdmVyIHJlZmVyZW5jZSBlZmZlY3RcIik7XG5cdFx0XHQvLyBpZiAoZ2V0SG92ZXIoKSAhPSBudWxsKSByZXR1cm47XG5cdFx0XHRpZiAoIXNwYW4uZ2V0QXR0cmlidXRlKFwiZGF0YVwiKSkge1xuXHRcdFx0XHRzcGFuID0gc3Bhbi5wYXJlbnRFbGVtZW50O1xuXHRcdFx0XHRzcGFuID0gc3Bhbi5xdWVyeVNlbGVjdG9yKFwiLnJlZmVyZW5jZS1kYXRhLXNwYW5cIikgYXMgSFRNTFNwYW5FbGVtZW50O1xuXHRcdFx0XHRpZiAoIXNwYW4pIHRocm93IG5ldyBFcnJvcihcIlNwYW4gZWxlbWVudCBub3QgZm91bmRcIik7XG5cdFx0XHR9XG5cdFx0XHR1cGRhdGVSZWZlcmVuY2VDb2xvcihzcGFuLCBBQ1RJT05fVFlQRS5NT1VTRSk7XG5cdFx0XHRzdGFydFJlZmVyZW5jZUVmZmVjdChzcGFuLCBBQ1RJT05fVFlQRS5NT1VTRSk7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdHNwYW4gJiZcblx0XHRcdHNwYW4gaW5zdGFuY2VvZiBIVE1MU3BhbkVsZW1lbnQgJiZcblx0XHRcdHNwYW4uZ2V0QXR0cmlidXRlKFwicmVmZXJlbmNlXCIpXG5cdFx0KSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInN0YXJ0IGhvdmVyIGJhY2tsaW5rIGVmZmVjdFwiKTtcblx0XHRcdC8vIGlmIChnZXRCYWNrbGlua0hvdmVyKCkgIT0gbnVsbCkgcmV0dXJuO1xuXHRcdFx0c3RhcnRCYWNrbGlua0VmZmVjdChzcGFuKTtcblx0XHR9IGVsc2UgaWYgKGdldEhvdmVyKCkgIT0gbnVsbCkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJlbmQgaG92ZXIgcmVmZXJlbmNlIGVmZmVjdFwiKTtcblx0XHRcdC8vIERlZmluZSB0aGUga2V5cyB5b3UncmUgd2FpdGluZyBmb3Jcblx0XHRcdGNvbnN0IHJlcXVpcmVkS2V5cyA9IFtcblx0XHRcdFx0XCJkYXRhU3RyaW5nXCIsXG5cdFx0XHRcdFwibGVhZklkXCIsXG5cdFx0XHRcdFwib3JpZ2luYWxMZWFmSWRcIixcblx0XHRcdFx0XCJ0ZW1wXCIsXG5cdFx0XHRcdFwiY3Vyc29yVmlld3BvcnRcIixcblx0XHRcdFx0XCJwZWVrXCIsXG5cdFx0XHRcdFwidXVpZFwiLFxuXHRcdFx0XTtcblx0XHRcdC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGFsbCByZXF1aXJlZCBrZXlzIGFyZSBwcmVzZW50XG5cblx0XHRcdGNvbnN0IGFsbEtleXNQcmVzZW50ID0gKCkgPT5cblx0XHRcdFx0cmVxdWlyZWRLZXlzLmV2ZXJ5KChrZXkpID0+IGtleSBpbiBnZXRIb3ZlcigpKTtcblx0XHRcdC8vIFdhaXQgdW50aWwgYWxsIGtleXMgYXJlIHByZXNlbnRcblx0XHRcdGlmICghYWxsS2V5c1ByZXNlbnQoKSkge1xuXHRcdFx0XHRhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MCkpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgZW5kUmVmZXJlbmNlSG92ZXJFZmZlY3QoKTtcblx0XHRcdGhhbmRsZVJlbW92ZUhvdmVyZWRDdXJzb3IoQUNUSU9OX1RZUEUuTU9VU0UpO1xuXHRcdH0gZWxzZSBpZiAoZ2V0QmFja2xpbmtIb3ZlcigpICE9IG51bGwpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiZW5kIGhvdmVyIGJhY2tsaW5rIGVmZmVjdFwiKTtcblx0XHRcdC8vIERlZmluZSB0aGUga2V5cyB5b3UncmUgd2FpdGluZyBmb3Jcblx0XHRcdGNvbnN0IHJlcXVpcmVkS2V5cyA9IFtcblx0XHRcdFx0XCJkYXRhU3RyaW5nXCIsXG5cdFx0XHRcdFwibGVhZklkXCIsXG5cdFx0XHRcdFwib3JpZ2luYWxMZWFmSWRcIixcblx0XHRcdFx0XCJiYWNrbGlua0xlYWZJZFwiLFxuXHRcdFx0XHRcInRlbXBcIixcblx0XHRcdFx0XCJjdXJzb3JWaWV3cG9ydFwiLFxuXHRcdFx0XHRcInBlZWtcIixcblx0XHRcdFx0XCJ1dWlkXCIsXG5cdFx0XHRcdFwiYmFja2xpbmtVVUlEXCIsXG5cdFx0XHRdO1xuXHRcdFx0Ly8gRnVuY3Rpb24gdG8gY2hlY2sgaWYgYWxsIHJlcXVpcmVkIGtleXMgYXJlIHByZXNlbnRcblx0XHRcdGNvbnN0IGFsbEtleXNQcmVzZW50ID0gKCkgPT5cblx0XHRcdFx0cmVxdWlyZWRLZXlzLmV2ZXJ5KChrZXkpID0+IGtleSBpbiBnZXRCYWNrbGlua0hvdmVyKCkpO1xuXHRcdFx0Ly8gV2FpdCB1bnRpbCBhbGwga2V5cyBhcmUgcHJlc2VudFxuXHRcdFx0aWYgKCFhbGxLZXlzUHJlc2VudCgpKSB7XG5cdFx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwKSk7XG5cdFx0XHR9XG5cdFx0XHRhd2FpdCBlbmRCYWNrbGlua0hvdmVyRWZmZWN0KCk7XG5cdFx0fVxuXHR9XG5cdGNvbnNvbGUubG9nKFwiaGFuZGxlTW92ZW1lbnRFZmZlY3RzXCIpO1xuXHRhd2FpdCB1cGRhdGVCYWNrbGlua01hcmtQb3NpdGlvbnMoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0b25sb2FkKCkge1xuXHRcdC8vXG5cdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBiYWNrbGlua3M6IEJhY2tsaW5rW10gPSBhd2FpdCBnZW5lcmF0ZUJhY2tsaW5rcygpO1xuXHRcdFx0Y29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcIm1hcmtkb3duXCIpO1xuXG5cdFx0XHRsZXQgcHJvbWlzZXM6IFByb21pc2U8V29ya3NwYWNlTGVhZj5bXSA9IGxlYXZlcy5tYXAoXG5cdFx0XHRcdChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGFkZFJlZmVyZW5jZXNUb0xlYWYobGVhZiwgYmFja2xpbmtzKTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblxuXHRcdFx0YXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG5cdFx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImFjdGl2ZS1sZWFmLWNoYW5nZVwiLCBhc3luYyAoZXYpID0+IHtcblx0XHRcdFx0XHQvLyBUaGlzIHNob3VsZCBjcmVhdGUgcmVmZXJlbmNlTWFya2VycyBpZiB0aGV5IGRvbid0IGV4aXN0IGFuZCB1cGRhdGVcblx0XHRcdFx0XHQvLyBlbHNlIHVwZGF0ZSBvbmx5XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPVxuXHRcdFx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdFx0XHRcdFx0aWYgKGFjdGl2ZVZpZXc/LmxlYWYgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRhd2FpdCBhZGRSZWZlcmVuY2VzVG9MZWFmKGFjdGl2ZVZpZXcubGVhZik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHR9LCA0MDAwKTtcblxuXHRcdHVwZGF0ZVRoYXQodGhpcyk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKFtcblx0XHRcdGhpZ2hsaWdodHMsXG5cdFx0XHRyZWZlcmVuY2VSZXNvdXJjZXMsXG5cdFx0XHRFZGl0b3JWaWV3LnVwZGF0ZUxpc3RlbmVyLm9mKGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdC8vIHRoaXMgcmVjb2duaXplcyB3aGVuIGEgcGFzdGUgZXZlbnQgb2YgbW9yZSB0aGFuIGEgY2hhcmFjdGVyIGhhcyBvY2N1cmVkXG5cdFx0XHRcdC8vIGlmIHRoaXMgaXMgYSBuZXcgcmVmZXJlbmNlLCB3YW50IHRvIHVwZGF0ZSB0aGUgcmVmZXJlbmNlZCBwYWdlIHRvIHJlZmxlY3QgdGhpc1xuXHRcdFx0XHRpZiAoTWF0aC5hYnMoZS5jaGFuZ2VzLmRlc2MubmV3TGVuZ3RoIC0gZS5jaGFuZ2VzLmRlc2MubGVuZ3RoKSA+IDEpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIk5FVyBQQVNURSBFVkVOVFwiKTtcblxuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmUgLSB0aGlzIGlzIGEgcHJpdmF0ZSBhdHRyaWJ1dGVcblx0XHRcdFx0XHRsZXQgaW5zZXJ0ZWQgPSBlLmNoYW5nZXMuaW5zZXJ0ZWQ7XG5cblx0XHRcdFx0XHRsZXQgcmVmZXJlbmNlZEZpbGU6IHN0cmluZztcblxuXHRcdFx0XHRcdGluc2VydGVkLmZvckVhY2goKGNoYW5nZTogeyBsZW5ndGg6IG51bWJlcjsgdGV4dDogc3RyaW5nW10gfSkgPT4ge1xuXHRcdFx0XHRcdFx0Y2hhbmdlLnRleHQuZm9yRWFjaCgodGV4dCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjb25zdCByZWdleCA9IC9cXFtcdTIxOTdcXF1cXCh1cm46KFteKV0qKVxcKS9nO1xuXHRcdFx0XHRcdFx0XHRsZXQgY29udGVudCA9IHJlZ2V4LmV4ZWModGV4dCk7XG5cdFx0XHRcdFx0XHRcdGlmIChjb250ZW50KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coY29udGVudCk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgW3ByZWZpeCwgdGV4dCwgc3VmZml4LCBmaWxlLCBmcm9tLCB0bywgcG9ydGFsLCB0b2dnbGVdID1cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRlbnRbMV0uc3BsaXQoXCI6XCIpO1xuXHRcdFx0XHRcdFx0XHRcdHJlZmVyZW5jZWRGaWxlID0gZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nKGZpbGUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdGxldCBsZWF2ZXNCeVRhYiA9IGNvbGxlY3RMZWF2ZXNCeVRhYkhlbHBlcigpO1xuXHRcdFx0XHRcdGxldCBsZWFmID0gbGVhdmVzQnlUYWIuZmxhdCgpLmZpbHRlcigobGVhZikgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGxlYWYuZ2V0Vmlld1N0YXRlKCkuc3RhdGUuZmlsZSA9PSByZWZlcmVuY2VkRmlsZTtcblx0XHRcdFx0XHR9KVswXTtcblxuXHRcdFx0XHRcdGlmIChsZWFmKSB7XG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdFx0YWRkUmVmZXJlbmNlc1RvTGVhZihsZWFmKTtcblx0XHRcdFx0XHRcdH0sIDIwMDApOyAvLy8gdGhpcyB0aW1lb3V0IGlzIHRvIG1ha2Ugc3VyZSB0aGUgY2hhbmdlcyBoYXZlIGZpbmlzaGVkIHdyaXRpbmcgdG8gZmlsZS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdF0pO1xuXG5cdFx0bGV0IHByZXZYID0gMDtcblx0XHRsZXQgcHJldlkgPSAwO1xuXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCBcIm1vdXNlbW92ZVwiLCBhc3luYyAoZXZ0KSA9PiB7XG5cdFx0XHRsZXQgZGlmZmVyZW5jZSA9XG5cdFx0XHRcdE1hdGguYWJzKHByZXZYIC0gZXZ0LmNsaWVudFgpICsgTWF0aC5hYnMocHJldlkgLSBldnQuY2xpZW50WSk7XG5cdFx0XHRwcmV2WCA9IGV2dC5jbGllbnRYO1xuXHRcdFx0cHJldlkgPSBldnQuY2xpZW50WTtcblx0XHRcdGxhc3RNb3VzZSA9IGV2dDtcblx0XHRcdGlmIChkaWZmZXJlbmNlID4gMTApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aGFuZGxlTW92ZW1lbnRFZmZlY3RzKGV2dCk7XG5cdFx0fSk7XG5cblx0XHQvLyBvbiBzZWxlY3Rpb24gY2hhbmdlcywgZXZlbnQgb3ZlciBjbGljayBhbmQga2V5ZG93blxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJjbGlja1wiLCBhc3luYyAoZXZ0KSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhcImNsaWNrXCIpO1xuXHRcdFx0aGFuZGxlTW92ZW1lbnRFZmZlY3RzKGV2dCk7XG5cdFx0XHQvLyBhd2FpdCBjaGVja0ZvY3VzQ3Vyc29yKGV2dCk7XG5cdFx0XHR1cGRhdGVCYWNrbGlua01hcmtQb3NpdGlvbnMoKTtcblx0XHR9KTtcblxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJrZXl1cFwiLCBhc3luYyAoZXZ0KSA9PiB7XG5cdFx0XHRpZiAoZXZ0Lm1ldGFLZXkgfHwgZXZ0LmN0cmxLZXkgfHwgZXZ0LmtleSA9PT0gXCJCYWNrc3BhY2VcIikgcmV0dXJuO1xuXHRcdFx0Y29uc29sZS5sb2coZXZ0KTtcblx0XHRcdGNvbnNvbGUubG9nKFwia2V5dXBcIik7XG5cdFx0XHRoYW5kbGVNb3ZlbWVudEVmZmVjdHMoZXZ0KTtcblx0XHRcdC8vIGF3YWl0IGNoZWNrRm9jdXNDdXJzb3IoZXZ0KTtcblx0XHRcdHVwZGF0ZUJhY2tsaW5rTWFya1Bvc2l0aW9ucygpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCBcImtleWRvd25cIiwgYXN5bmMgKGV2dCkgPT4ge1xuXHRcdFx0aWYgKGV2dC5tZXRhS2V5IHx8IGV2dC5jdHJsS2V5KSB7XG5cdFx0XHRcdC8vIENoYW5nZSB0aGUgY3Vyc29yIHN0eWxlIG9mIHRoZSBib2R5XG5cdFx0XHRcdGhhbmRsZU1vdmVtZW50RWZmZWN0cyhldnQpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQ29weSB3aXRoIHRvZ2dsZSBvZmZcblx0XHRcdGlmIChldnQua2V5ID09IFwidlwiICYmIChldnQubWV0YUtleSB8fCBldnQuY3RybEtleSkpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJoZWxsb1wiKTtcblx0XHRcdFx0bGV0IGN1cnJlbnRMZWFmID0gZ2V0VGhhdCgpLndvcmtzcGFjZS5nZXRMZWFmKCk7XG5cdFx0XHRcdGF3YWl0IGFkZFJlZmVyZW5jZXNUb0xlYWYoY3VycmVudExlYWYpO1xuXHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0ZXZ0LmtleSA9PSBcIlx1MDBDN1wiICYmXG5cdFx0XHRcdChldnQubWV0YUtleSB8fCBldnQuY3RybEtleSkgJiZcblx0XHRcdFx0ZXZ0LnNoaWZ0S2V5ICYmXG5cdFx0XHRcdGV2dC5hbHRLZXlcblx0XHRcdCkge1xuXHRcdFx0XHR1cGRhdGVDbGlwYm9hcmQoZmFsc2UpO1xuXHRcdFx0XHRuZXcgTm90aWNlKFwiQ29waWVkIHJlZmVyZW5jZSB0byBjbGlwYm9hcmRcIik7XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHQoZXZ0LmtleSA9PSBcImNcIiB8fCBldnQua2V5ID09IFwiQ1wiKSAmJlxuXHRcdFx0XHQoZXZ0Lm1ldGFLZXkgfHwgZXZ0LmN0cmxLZXkpICYmXG5cdFx0XHRcdGV2dC5zaGlmdEtleVxuXHRcdFx0KSB7XG5cdFx0XHRcdC8vIENvcHkgd2l0aCB0b2dnbGUgb25cblx0XHRcdFx0dXBkYXRlQ2xpcGJvYXJkKHRydWUpO1xuXHRcdFx0XHRuZXcgTm90aWNlKFwiQ29waWVkIHJlZmVyZW5jZSB0byBjbGlwYm9hcmRcIik7XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHQoZXZ0LmtleSA9PSBcInNcIiB8fCBldnQua2V5ID09IFwiU1wiKSAmJlxuXHRcdFx0XHQoZXZ0Lm1ldGFLZXkgfHwgZXZ0LmN0cmxLZXkpICYmXG5cdFx0XHRcdGV2dC5zaGlmdEtleVxuXHRcdFx0KSB7XG5cdFx0XHRcdC8vIENvcHkgd2l0aCBTIG9uXG5cdFx0XHRcdGxldCB0YXJnZXQgPSBldnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0XHRsZXQgY2hpbGRyZW4gPSBBcnJheS5mcm9tKHRhcmdldC5jaGlsZHJlbik7XG5cdFx0XHRcdGxldCBjdXJyZW50TGluZSA9IGNoaWxkcmVuLmZpbHRlcigoY2hpbGQpID0+XG5cdFx0XHRcdFx0Y2hpbGQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY20tYWN0aXZlXCIpXG5cdFx0XHRcdClbMF07XG5cblx0XHRcdFx0Y29uc3Qgc3BhbnMgPSBBcnJheS5mcm9tPEhUTUxTcGFuRWxlbWVudD4oXG5cdFx0XHRcdFx0Y3VycmVudExpbmUucXVlcnlTZWxlY3RvckFsbChcIi5yZWZlcmVuY2Utc3BhblwiKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGxldCBoYXNPbmVIaWRkZW4gPSBmYWxzZTtcblx0XHRcdFx0c3BhbnMuZm9yRWFjaCgoc3BhbikgPT4ge1xuXHRcdFx0XHRcdGlmIChzcGFuLmNsYXNzTGlzdC5jb250YWlucyhcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiKSkge1xuXHRcdFx0XHRcdFx0aGFzT25lSGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRzcGFucy5ldmVyeSgoc3BhbikgPT5cblx0XHRcdFx0XHRcdHNwYW4uY2xhc3NMaXN0LmNvbnRhaW5zKFwicmVmZXJlbmNlLXNwYW4taGlkZGVuXCIpXG5cdFx0XHRcdFx0KSB8fFxuXHRcdFx0XHRcdGhhc09uZUhpZGRlblxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRuZXcgTm90aWNlKFwiVG9nZ2xlIGFubm90YXRpb25zIG9uXCIpO1xuXG5cdFx0XHRcdFx0Zm9yIChjb25zdCBzcGFuIG9mIHNwYW5zKSB7XG5cdFx0XHRcdFx0XHQvLyBXYW50IHRvIHNlcmlhbGl6ZSByZWZlcmVuY2VzIGF0IHNvbWUgcG9pbnRcblx0XHRcdFx0XHRcdGxldCByZWZlcmVuY2VTcGFuID0gc3Bhbi5wYXJlbnRFbGVtZW50Py5xdWVyeVNlbGVjdG9yKFxuXHRcdFx0XHRcdFx0XHRcIi5yZWZlcmVuY2UtZGF0YS1zcGFuXCJcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRsZXQgY29udGVudCA9IHJlZmVyZW5jZVNwYW4/LmdldEF0dHJpYnV0ZShcImRhdGFcIik7XG5cdFx0XHRcdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoKTtcblx0XHRcdFx0XHRcdGNvbnN0IGVkaXRvciA9IGdldE1hcmtkb3duVmlldyhhY3RpdmVWaWV3KS5lZGl0b3I7XG5cdFx0XHRcdFx0XHRjb25zdCBlZGl0b3JWaWV3ID0gZ2V0Q29kZU1pcnJvckVkaXRvclZpZXcoZWRpdG9yKTtcblxuXHRcdFx0XHRcdFx0YXdhaXQgc2VyaWFsaXplUmVmZXJlbmNlKGNvbnRlbnQsIHNwYW4sIGVkaXRvclZpZXcsIFwiZlwiKTtcblxuXHRcdFx0XHRcdFx0aWYgKCFzcGFuLmNsYXNzTGlzdC5jb250YWlucyhcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiKSkge1xuXHRcdFx0XHRcdFx0XHRzcGFuLmNsYXNzTGlzdC5hZGQoXCJyZWZlcmVuY2Utc3Bhbi1oaWRkZW5cIik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHNwYW4uY2xhc3NMaXN0LnJlbW92ZShcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIlRvZ2dsZSBhbm5vdGF0aW9ucyBvZmZcIik7XG5cblx0XHRcdFx0XHRmb3IgKGNvbnN0IHNwYW4gb2Ygc3BhbnMpIHtcblx0XHRcdFx0XHRcdGxldCByZWZlcmVuY2VTcGFuID0gc3Bhbi5wYXJlbnRFbGVtZW50Py5xdWVyeVNlbGVjdG9yKFxuXHRcdFx0XHRcdFx0XHRcIi5yZWZlcmVuY2UtZGF0YS1zcGFuXCJcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGxldCBjb250ZW50ID0gcmVmZXJlbmNlU3Bhbj8uZ2V0QXR0cmlidXRlKFwiZGF0YVwiKTtcblx0XHRcdFx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpO1xuXHRcdFx0XHRcdFx0Y29uc3QgZWRpdG9yID0gZ2V0TWFya2Rvd25WaWV3KGFjdGl2ZVZpZXcpLmVkaXRvcjtcblx0XHRcdFx0XHRcdGNvbnN0IGVkaXRvclZpZXcgPSBnZXRDb2RlTWlycm9yRWRpdG9yVmlldyhlZGl0b3IpO1xuXG5cdFx0XHRcdFx0XHRhd2FpdCBzZXJpYWxpemVSZWZlcmVuY2UoY29udGVudCwgc3BhbiwgZWRpdG9yVmlldywgXCJ0XCIpO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIGNsYXNzIGlmIGl0IGV4aXN0c1xuXHRcdFx0XHRcdFx0aWYgKHNwYW4uY2xhc3NMaXN0LmNvbnRhaW5zKFwicmVmZXJlbmNlLXNwYW4taGlkZGVuXCIpKSB7XG5cdFx0XHRcdFx0XHRcdHNwYW4uY2xhc3NMaXN0LnJlbW92ZShcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gQWRkIHRoZSBjbGFzc1xuXHRcdFx0XHRcdFx0c3Bhbi5jbGFzc0xpc3QuYWRkKFwicmVmZXJlbmNlLXNwYW4taGlkZGVuXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0b251bmxvYWQoKSB7fVxufVxuIiwgImltcG9ydCB7XG5cdEVkaXRvclN0YXRlLFxuXHRTdGF0ZUZpZWxkLFxuXHRBbm5vdGF0aW9uLFxuXHRTdGF0ZUVmZmVjdCxcbn0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5pbXBvcnQgeyBCYWNrbGluayB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGxldCB0aGF0ID0gU3RhdGVGaWVsZC5kZWZpbmU8QXBwIHwgbnVsbD4oe1xuXHRjcmVhdGUoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cdHVwZGF0ZSh2YWx1ZSwgdHI6IGFueSkge1xuXHRcdGlmIChcblx0XHRcdHRyW1wiYW5ub3RhdGlvbnNcIl0ubGVuZ3RoID09IDIgJiZcblx0XHRcdHRyW1wiYW5ub3RhdGlvbnNcIl1bMF0udmFsdWUudHlwZSA9PSBcInRoYXRcIlxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHRyW1wiYW5ub3RhdGlvbnNcIl1bMF0udmFsdWUudGhhdC5hcHA7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcbn0pO1xuXG5leHBvcnQgbGV0IGhvdmVyZWRDdXJzb3IgPSBTdGF0ZUZpZWxkLmRlZmluZTxhbnk+KHtcblx0Y3JlYXRlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9LFxuXHR1cGRhdGUodmFsdWUsIHRyOiBhbnkpIHtcblx0XHRpZiAoXG5cdFx0XHR0cltcImFubm90YXRpb25zXCJdLmxlbmd0aCA9PSAyICYmXG5cdFx0XHR0cltcImFubm90YXRpb25zXCJdWzBdLnZhbHVlLnR5cGUgPT0gXCJob3ZlcmVkQ3Vyc29yXCJcblx0XHQpIHtcblx0XHRcdGlmICh2YWx1ZSlcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHQuLi52YWx1ZS5maWx0ZXIoXG5cdFx0XHRcdFx0XHQoY3Vyc29yOiBhbnkpID0+IGN1cnNvci51c2VyICE9IHRyW1wiYW5ub3RhdGlvbnNcIl1bMF0udmFsdWUudXNlclxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Y3Vyc29yOiB0cltcImFubm90YXRpb25zXCJdWzBdLnZhbHVlLmN1cnNvcixcblx0XHRcdFx0XHRcdHVzZXI6IHRyW1wiYW5ub3RhdGlvbnNcIl1bMF0udmFsdWUudXNlcixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdO1xuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGN1cnNvcjogdHJbXCJhbm5vdGF0aW9uc1wiXVswXS52YWx1ZS5jdXJzb3IsXG5cdFx0XHRcdFx0dXNlcjogdHJbXCJhbm5vdGF0aW9uc1wiXVswXS52YWx1ZS51c2VyLFxuXHRcdFx0XHR9LFxuXHRcdFx0XTtcblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0dHJbXCJhbm5vdGF0aW9uc1wiXS5sZW5ndGggPT0gMiAmJlxuXHRcdFx0dHJbXCJhbm5vdGF0aW9uc1wiXVswXS52YWx1ZS50eXBlID09IFwicmVtb3ZlSG92ZXJlZEN1cnNvclwiXG5cdFx0KSB7XG5cdFx0XHRpZiAodmFsdWUpXG5cdFx0XHRcdHJldHVybiB2YWx1ZS5maWx0ZXIoXG5cdFx0XHRcdFx0KGN1cnNvcjogYW55KSA9PiBjdXJzb3IudXNlciAhPSB0cltcImFubm90YXRpb25zXCJdWzBdLnZhbHVlLnVzZXJcblx0XHRcdFx0KTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxufSk7XG5cbmV4cG9ydCBsZXQgYmFja2xpbmtzID0gU3RhdGVGaWVsZC5kZWZpbmU8QmFja2xpbmtbXT4oe1xuXHRjcmVhdGUoKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9LFxuXHR1cGRhdGUodmFsdWUsIHRyKSB7XG5cdFx0Lypcblx0XHRcdEkgIHdhbnQgdG8gZ2V0IHRoZSBjdXJyZW50IGFjdGl2ZUxlYWYgYW5kIHJlY29tcHV0ZSB0aGUgcmVmZXJlbmNlc1xuXHRcdFx0bWVyZ2UgdGhpcyBpbnRvIHRoZSByZWZlcmVuY2VzIGZpZWxkXG5cdFx0Ki9cblxuXHRcdGlmICh0ci5lZmZlY3RzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxldCBkYXRhOiB7IHR5cGU6IHN0cmluZzsgYmFja2xpbmtzOiBCYWNrbGlua1tdIH0gPSBKU09OLnBhcnNlKFxuXHRcdFx0XHRcdHRyLmVmZmVjdHNbMF0udmFsdWVcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKGRhdGEudHlwZSA9PSBcImJhY2tsaW5rXCIpIHtcblx0XHRcdFx0XHRpZiAoZGF0YS5iYWNrbGlua3MubGVuZ3RoID09IDApIHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRsZXQgcmVmZXJlbmNpbmdMb2NhdGlvbiA9XG5cdFx0XHRcdFx0XHRkYXRhLmJhY2tsaW5rc1swXVtcInJlZmVyZW5jaW5nTG9jYXRpb25cIl1bXCJmaWxlbmFtZVwiXTtcblx0XHRcdFx0XHRsZXQgZmlsdGVyZWRWYWx1ZXMgPSB2YWx1ZS5maWx0ZXIoXG5cdFx0XHRcdFx0XHQoYmFja2xpbmspID0+XG5cdFx0XHRcdFx0XHRcdGJhY2tsaW5rLnJlZmVyZW5jaW5nTG9jYXRpb24uZmlsZW5hbWUgIT0gcmVmZXJlbmNpbmdMb2NhdGlvblxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5maWx0ZXJlZFZhbHVlcywgLi4uZGF0YS5iYWNrbGlua3NdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxufSk7XG5cbmV4cG9ydCBsZXQgaG92ZXJFbGVtZW50ID0gU3RhdGVGaWVsZC5kZWZpbmU8b2JqZWN0IHwgbnVsbD4oe1xuXHRjcmVhdGUoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cdHVwZGF0ZSh2YWx1ZSwgdHIpIHtcblx0XHRpZiAodHIuZWZmZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRsZXQgZGF0YSA9IEpTT04ucGFyc2UodHIuZWZmZWN0c1swXS52YWx1ZSk7XG5cdFx0XHRcdGlmIChkYXRhLnR5cGUgPT0gXCJob3Zlci1zdGFydFwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcImhvdmVyXCIpIHtcblx0XHRcdFx0XHRpZiAodmFsdWUpIHJldHVybiBPYmplY3QuYXNzaWduKHZhbHVlLCBkYXRhKTtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJob3Zlci1vZmZcIikge1xuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxufSk7XG5cbmV4cG9ydCBsZXQgYmFja2xpbmtIb3ZlckVsZW1lbnQgPSBTdGF0ZUZpZWxkLmRlZmluZTxvYmplY3QgfCBudWxsPih7XG5cdGNyZWF0ZSgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblx0dXBkYXRlKHZhbHVlLCB0cikge1xuXHRcdGlmICh0ci5lZmZlY3RzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxldCBkYXRhID0gSlNPTi5wYXJzZSh0ci5lZmZlY3RzWzBdLnZhbHVlKTtcblx0XHRcdFx0aWYgKGRhdGEudHlwZSA9PSBcImJhY2tsaW5rLXN0YXJ0XCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiYmFja2xpbmstdXBkYXRlXCIpIHtcblx0XHRcdFx0XHRpZiAodmFsdWUpIHJldHVybiBPYmplY3QuYXNzaWduKHZhbHVlLCBkYXRhKTtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJiYWNrbGluay1vZmZcIikge1xuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxufSk7XG5cbmV4cG9ydCBsZXQgY3Vyc29yRWxlbWVudCA9IFN0YXRlRmllbGQuZGVmaW5lPG9iamVjdCB8IG51bGw+KHtcblx0Y3JlYXRlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9LFxuXHR1cGRhdGUodmFsdWUsIHRyKSB7XG5cdFx0aWYgKHRyLmVmZmVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bGV0IGRhdGEgPSBKU09OLnBhcnNlKHRyLmVmZmVjdHNbMF0udmFsdWUpO1xuXHRcdFx0XHRpZiAoZGF0YS50eXBlID09IFwiY3Vyc29yLXN0YXJ0XCIpIHtcblx0XHRcdFx0XHRyZXR1cm4ge307XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiY3Vyc29yXCIpIHtcblx0XHRcdFx0XHRpZiAodmFsdWUpIHJldHVybiBPYmplY3QuYXNzaWduKHZhbHVlLCBkYXRhKTtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJjdXJzb3Itb2ZmXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcbn0pO1xuXG5leHBvcnQgbGV0IGVkaXRvckNoYW5nZSA9IFN0YXRlRmllbGQuZGVmaW5lPG51bGw+KHtcblx0Y3JlYXRlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9LFxuXHR1cGRhdGUodmFsdWUsIHRyKSB7XG5cdFx0aWYgKHRyLmVmZmVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bGV0IGRhdGEgPSBKU09OLnBhcnNlKHRyLmVmZmVjdHNbMF0udmFsdWUpO1xuXHRcdFx0XHRpZiAoZGF0YS50eXBlID09IFwic3luY1wiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB0aGF0QW5ub3RhdGlvbiA9IEFubm90YXRpb24uZGVmaW5lPGFueT4oKTtcbmV4cG9ydCBjb25zdCBob3ZlcmVkQ3Vyc29yQW5ub3RhdGlvbiA9IEFubm90YXRpb24uZGVmaW5lPGFueT4oKTtcbmV4cG9ydCBjb25zdCBob3ZlckVmZmVjdCA9IFN0YXRlRWZmZWN0LmRlZmluZTxzdHJpbmc+KCk7XG5leHBvcnQgY29uc3QgYmFja2xpbmtIb3ZlckVmZmVjdCA9IFN0YXRlRWZmZWN0LmRlZmluZTxzdHJpbmc+KCk7XG5leHBvcnQgY29uc3QgY3Vyc29yRWZmZWN0ID0gU3RhdGVFZmZlY3QuZGVmaW5lPHN0cmluZz4oKTtcbmV4cG9ydCBjb25zdCBiYWNrbGlua0VmZmVjdCA9IFN0YXRlRWZmZWN0LmRlZmluZTxzdHJpbmc+KCk7XG5cbmV4cG9ydCBsZXQgc3RhdGU6IGFueSA9IEVkaXRvclN0YXRlLmNyZWF0ZSh7XG5cdGV4dGVuc2lvbnM6IFtcblx0XHR0aGF0LFxuXHRcdGhvdmVyZWRDdXJzb3IsXG5cdFx0YmFja2xpbmtzLFxuXHRcdGhvdmVyRWxlbWVudCxcblx0XHRiYWNrbGlua0hvdmVyRWxlbWVudCxcblx0XHRjdXJzb3JFbGVtZW50LFxuXHRcdGVkaXRvckNoYW5nZSxcblx0XSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhhdCgpOiBBcHAge1xuXHRyZXR1cm4gc3RhdGUuZmllbGQodGhhdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVUaGF0KHRoYXQ6IGFueSkge1xuXHRzdGF0ZSA9IHN0YXRlLnVwZGF0ZSh7XG5cdFx0YW5ub3RhdGlvbnM6IHRoYXRBbm5vdGF0aW9uLm9mKHtcblx0XHRcdHR5cGU6IFwidGhhdFwiLFxuXHRcdFx0dGhhdCxcblx0XHR9KSxcblx0fSkuc3RhdGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIb3ZlcmVkQ3Vyc29yKCkge1xuXHRyZXR1cm4gc3RhdGUuZmllbGQoaG92ZXJlZEN1cnNvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVIb3ZlcmVkQ3Vyc29yKGN1cnNvcjogSFRNTE9yU1ZHRWxlbWVudCwgdXNlcjogc3RyaW5nKSB7XG5cdHN0YXRlID0gc3RhdGUudXBkYXRlKHtcblx0XHRhbm5vdGF0aW9uczogaG92ZXJlZEN1cnNvckFubm90YXRpb24ub2Yoe1xuXHRcdFx0dHlwZTogXCJob3ZlcmVkQ3Vyc29yXCIsXG5cdFx0XHRjdXJzb3IsXG5cdFx0XHR1c2VyLFxuXHRcdH0pLFxuXHR9KS5zdGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhvdmVyZWRDdXJzb3IodXNlcjogc3RyaW5nKSB7XG5cdHN0YXRlID0gc3RhdGUudXBkYXRlKHtcblx0XHRhbm5vdGF0aW9uczogaG92ZXJlZEN1cnNvckFubm90YXRpb24ub2Yoe1xuXHRcdFx0dHlwZTogXCJyZW1vdmVIb3ZlcmVkQ3Vyc29yXCIsXG5cdFx0XHR1c2VyLFxuXHRcdH0pLFxuXHR9KS5zdGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhvdmVyKCkge1xuXHRyZXR1cm4gc3RhdGUuZmllbGQoaG92ZXJFbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUhvdmVyKHZhbHVlOiBvYmplY3QpIHtcblx0c3RhdGUgPSBzdGF0ZS51cGRhdGUoe1xuXHRcdGVmZmVjdHM6IGhvdmVyRWZmZWN0Lm9mKFxuXHRcdFx0SlNPTi5zdHJpbmdpZnkoT2JqZWN0LmFzc2lnbih2YWx1ZSwgeyB0eXBlOiBcImhvdmVyXCIgfSkpXG5cdFx0KSxcblx0fSkuc3RhdGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEhvdmVyKCkge1xuXHRzdGF0ZSA9IHN0YXRlLnVwZGF0ZSh7XG5cdFx0ZWZmZWN0czogaG92ZXJFZmZlY3Qub2YoXG5cdFx0XHRKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdHR5cGU6IFwiaG92ZXItb2ZmXCIsXG5cdFx0XHR9KVxuXHRcdCksXG5cdH0pLnN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2xpbmtIb3ZlcigpIHtcblx0cmV0dXJuIHN0YXRlLmZpZWxkKGJhY2tsaW5rSG92ZXJFbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUJhY2tsaW5rSG92ZXIodmFsdWU6IG9iamVjdCkge1xuXHRzdGF0ZSA9IHN0YXRlLnVwZGF0ZSh7XG5cdFx0ZWZmZWN0czogYmFja2xpbmtIb3ZlckVmZmVjdC5vZihcblx0XHRcdEpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24odmFsdWUsIHsgdHlwZTogXCJiYWNrbGluay11cGRhdGVcIiB9KSlcblx0XHQpLFxuXHR9KS5zdGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0QmFja2xpbmtIb3ZlcigpIHtcblx0c3RhdGUgPSBzdGF0ZS51cGRhdGUoe1xuXHRcdGVmZmVjdHM6IGJhY2tsaW5rSG92ZXJFZmZlY3Qub2YoXG5cdFx0XHRKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdHR5cGU6IFwiYmFja2xpbmstb2ZmXCIsXG5cdFx0XHR9KVxuXHRcdCksXG5cdH0pLnN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3Vyc29yKCkge1xuXHRyZXR1cm4gc3RhdGUuZmllbGQoY3Vyc29yRWxlbWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDdXJzb3IodmFsdWU6IG9iamVjdCkge1xuXHRzdGF0ZSA9IHN0YXRlLnVwZGF0ZSh7XG5cdFx0ZWZmZWN0czogY3Vyc29yRWZmZWN0Lm9mKFxuXHRcdFx0SlNPTi5zdHJpbmdpZnkoT2JqZWN0LmFzc2lnbih2YWx1ZSwgeyB0eXBlOiBcImN1cnNvclwiIH0pKVxuXHRcdCksXG5cdH0pLnN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRDdXJzb3IoKSB7XG5cdHN0YXRlID0gc3RhdGUudXBkYXRlKHtcblx0XHRlZmZlY3RzOiBjdXJzb3JFZmZlY3Qub2YoXG5cdFx0XHRKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdHR5cGU6IFwiY3Vyc29yLW9mZlwiLFxuXHRcdFx0fSlcblx0XHQpLFxuXHR9KS5zdGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJhY2tsaW5rcygpOiBCYWNrbGlua1tdIHtcblx0cmV0dXJuIHN0YXRlLmZpZWxkKGJhY2tsaW5rcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVCYWNrbGlua3ModmFsdWU6IEJhY2tsaW5rW10pIHtcblx0c3RhdGUgPSBzdGF0ZS51cGRhdGUoe1xuXHRcdGVmZmVjdHM6IGJhY2tsaW5rRWZmZWN0Lm9mKFxuXHRcdFx0SlNPTi5zdHJpbmdpZnkoT2JqZWN0LmFzc2lnbih7IGJhY2tsaW5rczogdmFsdWUgfSwgeyB0eXBlOiBcImJhY2tsaW5rXCIgfSkpXG5cdFx0KSxcblx0fSkuc3RhdGU7XG59XG4iLCAiaW1wb3J0IHtcblx0RWRpdG9yVmlldyxcblx0V2lkZ2V0VHlwZSxcblx0RGVjb3JhdGlvbixcblx0RGVjb3JhdGlvblNldCxcblx0Vmlld1BsdWdpbixcblx0Vmlld1VwZGF0ZSxcblx0TWF0Y2hEZWNvcmF0b3IsXG59IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XG5pbXBvcnQgeyBTVkdfSE9WRVJfQ09MT1IgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbi8qIGhpZ2hsaWdodCAqL1xuY2xhc3MgSGlnaGxpZ2h0ZXJXaWRnZXQgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBuYW1lOiBzdHJpbmcsIHByaXZhdGUgdmlldzogRWRpdG9yVmlldykge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRlcShvdGhlcjogSGlnaGxpZ2h0ZXJXaWRnZXQpIHtcblx0XHRyZXR1cm4gdGhpcy5uYW1lID09PSBvdGhlci5uYW1lO1xuXHR9XG5cblx0dG9ET00oKSB7XG5cdFx0Y29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmcmFnbWVudFwiKTtcblx0XHRzcGFuLnRleHRDb250ZW50ID0gdGhpcy5uYW1lO1xuXHRcdHNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gU1ZHX0hPVkVSX0NPTE9SO1xuXHRcdHNwYW4uc3R5bGUuY29sb3IgPSBcImJsYWNrXCI7XG5cblx0XHRyZXR1cm4gc3Bhbjtcblx0fVxufVxuXG5jb25zdCBoaWdobGlnaHRlckRlY29yYXRpb24gPSAobWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSwgdmlldzogRWRpdG9yVmlldykgPT5cblx0RGVjb3JhdGlvbi5yZXBsYWNlKHtcblx0XHR3aWRnZXQ6IG5ldyBIaWdobGlnaHRlcldpZGdldChtYXRjaFsxXSwgdmlldyksXG5cdH0pO1xuXG5jb25zdCBoaWdobGlnaHRNYXRjaGVyID0gbmV3IE1hdGNoRGVjb3JhdG9yKHtcblx0cmVnZXhwOiAvXFwrXFwrXFwrKC4qPylcXCtcXCtcXCsvZyxcblx0ZGVjb3JhdGlvbjogKG1hdGNoLCB2aWV3LCBwb3MpID0+IHtcblx0XHRyZXR1cm4gaGlnaGxpZ2h0ZXJEZWNvcmF0aW9uKG1hdGNoLCB2aWV3KTtcblx0fSxcbn0pO1xuXG5leHBvcnQgY29uc3QgaGlnaGxpZ2h0cyA9IFZpZXdQbHVnaW4uZnJvbUNsYXNzKFxuXHRjbGFzcyB7XG5cdFx0aGlnaGxpZ2h0czogRGVjb3JhdGlvblNldDtcblx0XHRjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XG5cdFx0XHR0aGlzLmhpZ2hsaWdodHMgPSBoaWdobGlnaHRNYXRjaGVyLmNyZWF0ZURlY28odmlldyk7XG5cdFx0fVxuXHRcdHVwZGF0ZSh1cGRhdGU6IFZpZXdVcGRhdGUpIHtcblx0XHRcdHRoaXMuaGlnaGxpZ2h0cyA9IGhpZ2hsaWdodE1hdGNoZXIudXBkYXRlRGVjbyh1cGRhdGUsIHRoaXMuaGlnaGxpZ2h0cyk7XG5cdFx0fVxuXHRcdGRlc3Ryb3koKSB7XG5cdFx0XHR0aGlzLmhpZ2hsaWdodHMgPSBEZWNvcmF0aW9uLm5vbmU7XG5cdFx0fVxuXHR9LFxuXHR7XG5cdFx0ZGVjb3JhdGlvbnM6IChpbnN0YW5jZSkgPT4gaW5zdGFuY2UuaGlnaGxpZ2h0cyxcblx0XHRwcm92aWRlOiAocGx1Z2luKSA9PlxuXHRcdFx0RWRpdG9yVmlldy5hdG9taWNSYW5nZXMub2YoKHZpZXcpID0+IHtcblx0XHRcdFx0cmV0dXJuIHZpZXcucGx1Z2luKHBsdWdpbik/LmhpZ2hsaWdodHMgfHwgRGVjb3JhdGlvbi5ub25lO1xuXHRcdFx0fSksXG5cdH1cbik7XG4iLCAiZXhwb3J0IGxldCBSRUZFUkVOQ0VfUkVHRVggPSAvXFxbXFx1MjE5N1xcXVxcKHVybjooW14pXSopXFwpL2c7XG5cbmV4cG9ydCBsZXQgQUNUSU9OX1RZUEUgPSB7XG5cdE1PVVNFOiBcIm1vdXNlXCIsXG5cdENVUlNPUjogXCJjdXJzb3JcIixcblx0QkFDS0xJTks6IFwiYmFja2xpbmtcIixcbn07XG5cbmV4cG9ydCBsZXQgU1ZHX0hPVkVSX0NPTE9SID0gXCJyZ2IoMTg3LCAyMTUsIDIzMClcIjtcbmV4cG9ydCBsZXQgU1ZHX0hPVkVSX0NPTE9SX0xJR0hUID0gXCJyZ2IoMTg3LCAyMTUsIDIzMCwgMC41KVwiO1xuZXhwb3J0IGxldCBTVkdfQ09MT1IgPSBcInJnYigyMTUsIDIzNSwgMClcIjtcblxuZXhwb3J0IGNvbnN0IFJFRkVSRU5DRV9JQ09OX0hFSUdIVCA9IDIwO1xuXG5leHBvcnQgY29uc3QgUE9SVEFMX1RFWFRfU0xJQ0VfU0laRSA9IDEwMDtcbiIsICJpbXBvcnQge1xuXHRFZGl0b3JWaWV3LFxuXHRXaWRnZXRUeXBlLFxuXHREZWNvcmF0aW9uLFxuXHREZWNvcmF0aW9uU2V0LFxuXHRWaWV3UGx1Z2luLFxuXHRWaWV3VXBkYXRlLFxuXHRNYXRjaERlY29yYXRvcixcbn0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcblxuaW1wb3J0IHtcblx0b3BlblJlZmVyZW5jZSxcblx0Y3JlYXRlUmVmZXJlbmNlSWNvbixcblx0dXBkYXRlQmFja2xpbmtNYXJrUG9zaXRpb25zLFxuXHRnZXRNYXJrZG93blZpZXcsXG5cdGdldEJhY2tsaW5rQ29udGFpbmVyLFxufSBmcm9tIFwiLi4vcmVmZXJlbmNlc1wiO1xuaW1wb3J0IHsgZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuaW1wb3J0IHsgcmVtb3ZlSGlnaGxpZ2h0IH0gZnJvbSBcInNyYy9tYXJrXCI7XG5pbXBvcnQgeyBjb2xsZWN0TGVhdmVzQnlUYWJIZWxwZXIgfSBmcm9tIFwic3JjL3dvcmtzcGFjZVwiO1xuaW1wb3J0IHsgZ2V0RWRpdG9yVmlldyB9IGZyb20gXCJzcmMvZWZmZWN0c1wiO1xuaW1wb3J0IHsgQmFja2xpbmsgfSBmcm9tIFwic3JjL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIHByb2Nlc3NMaW5lKGxpbmU6IEVsZW1lbnQpIHtcblx0bGV0IGxpbmVDb3B5ID0gbGluZT8uY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuXHRsaW5lQ29weT8ucXVlcnlTZWxlY3RvckFsbChcIi5yZWZlcmVuY2Utc3BhblwiKS5mb3JFYWNoKChzcGFuKSA9PiB7XG5cdFx0c3Bhbi5pbm5lckhUTUwgPSBcIlx1MjE5N1wiO1xuXHR9KTtcblxuXHRyZXR1cm4gbGluZUNvcHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWZlcmVuY2VQb3NpdGlvbihcblx0dmlldzogRWRpdG9yVmlldyxcblx0Y3VyckxpbmU6IEhUTUxTcGFuRWxlbWVudCxcblx0cmVmZXJlbmNlOiBzdHJpbmcsXG5cdGNvbnRlbnQ6IHN0cmluZ1xuKSB7XG5cdGxldCBsaW5lcyA9IHZpZXcuY29udGVudERPTS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNtLWxpbmVcIik7XG5cblx0Ly8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgYWN0aXZlTGluZVxuXHRsZXQgYWN0aXZlTGluZUluZGV4O1xuXHRsZXQgc2VlbkFjdGl2ZSA9IGZhbHNlO1xuXG5cdGxpbmVzLmZvckVhY2goKGxpbmUsIGkpID0+IHtcblx0XHRpZiAoc2VlbkFjdGl2ZSkgcmV0dXJuO1xuXHRcdGlmIChsaW5lID09IGN1cnJMaW5lKSB7XG5cdFx0XHRzZWVuQWN0aXZlID0gdHJ1ZTtcblx0XHRcdGFjdGl2ZUxpbmVJbmRleCA9IGk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoYWN0aXZlTGluZUluZGV4ID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuXHRsZXQgYWN0aXZlTGluZSA9IGxpbmVzW2FjdGl2ZUxpbmVJbmRleF07XG5cdC8vIG1ha2UgY29weSBvZiBhY3RpdmVMaW5lIGVsZW1lbnRcblx0bGV0IGFjdGl2ZUxpbmVDb3B5ID0gcHJvY2Vzc0xpbmUoYWN0aXZlTGluZSk7XG5cdC8vIG5vbi1yZWZlcmVuY2UgcGFydHMgb2YgdGhlIHRleHRcblx0bGV0IHBhcnRzID0gYWN0aXZlTGluZUNvcHkuaW5uZXJUZXh0LnNwbGl0KFwiXHUyMTk3XCIpO1xuXG5cdC8vIGdldCBhbGwgcmVmZXJlbmNlc1xuXHRsZXQgbGluZVJlZmVyZW5jZXMgPSBhY3RpdmVMaW5lPy5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlZmVyZW5jZS1kYXRhLXNwYW5cIik7XG5cblx0Ly8gZ2V0IHRoZSBmdWxsIHNlcmlhbGl6ZWQgdmVyc2lvbiBmb3IgdGhlc2UgcmVmZXJlbmNlc1xuXHRsZXQgbGluZVJlZmVyZW5jZXNEYXRhID0gQXJyYXkuZnJvbShsaW5lUmVmZXJlbmNlcyB8fCBbXSkubWFwKFxuXHRcdChzcGFuKSA9PiBcIltcdTIxOTddKHVybjpcIiArIHNwYW4uZ2V0QXR0cmlidXRlKFwiZGF0YVwiKSArIFwiKVwiXG5cdCk7XG5cblx0aWYgKCFjb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJSZWZlcmVuY2Ugbm90IGZvdW5kXCIpO1xuXHRsZXQgaW5kZXg6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRsaW5lUmVmZXJlbmNlc0RhdGEuZm9yRWFjaCgocmVmZXJlbmNlLCBpKSA9PiB7XG5cdFx0aWYgKCFpbmRleCkge1xuXHRcdFx0aWYgKHJlZmVyZW5jZS5pbmNsdWRlcyhjb250ZW50KSkge1xuXHRcdFx0XHRpbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoIWluZGV4ICYmIGluZGV4ICE9IDApIHRocm93IG5ldyBFcnJvcihcIlJlZmVyZW5jZSBub3QgZm91bmRcIik7XG5cblx0Ly8gZ2V0IHRoZSB0ZXh0IGJlZm9yZSB0aGUgcmVmZXJlbmNlXG5cdGxldCBzdGFydFRleHQgPSBbXG5cdFx0Li4ucGFydHMuc2xpY2UoMCwgaW5kZXggKyAxKSxcblx0XHQuLi5saW5lUmVmZXJlbmNlc0RhdGEuc2xpY2UoMCwgaW5kZXgpLFxuXHRdLmpvaW4oXCJcIik7XG5cdHN0YXJ0VGV4dCA9IHN0YXJ0VGV4dC5yZXBsYWNlKC9cXHV7MjAwQn0vZywgXCJcIik7XG5cblx0Ly8gZ2V0IGFsbCB0aGUgcHJpb3IgbGluZXMgdG8gYWN0aXZlIGxpbmUgYW5kIHRoZSBsZW5ndGggb2YgdGhlIHRleHRcblx0bGV0IHByZXZMaW5lQ2hhckNvdW50ID0gQXJyYXkuZnJvbShsaW5lcylcblx0XHQuc2xpY2UoMCwgYWN0aXZlTGluZUluZGV4KVxuXHRcdC5yZWR1Y2UoKGFjYywgbGluZSkgPT4ge1xuXHRcdFx0bGV0IHByb2Nlc3NlZExpbmUgPSBwcm9jZXNzTGluZShsaW5lKTsgLy8gY29udGVudHMgb2YgYSBsaW5lIGlzIGp1c3QgYSBzaW5nbGUgYXJyb3cgY2hhcmFjdGVyXG5cdFx0XHRsZXQgcGFydHMgPSBwcm9jZXNzZWRMaW5lLmlubmVyVGV4dC5zcGxpdChcIlx1MjE5N1wiKTtcblxuXHRcdFx0bGV0IGxpbmVSZWZlcmVuY2VzID0gbGluZT8ucXVlcnlTZWxlY3RvckFsbChcIi5yZWZlcmVuY2UtZGF0YS1zcGFuXCIpO1xuXHRcdFx0bGV0IGxpbmVSZWZlcmVuY2VzRGF0YSA9IEFycmF5LmZyb20obGluZVJlZmVyZW5jZXMgfHwgW10pLm1hcChcblx0XHRcdFx0KHNwYW4pID0+IFwiW1x1MjE5N10odXJuOlwiICsgc3Bhbi5nZXRBdHRyaWJ1dGUoXCJkYXRhXCIpICsgXCIpXCJcblx0XHRcdCk7XG5cdFx0XHRsZXQgYWxsU2VyaWFsaXplZFRleHQgPSBbLi4ucGFydHMsIC4uLmxpbmVSZWZlcmVuY2VzRGF0YV0uam9pbihcIlwiKSArIFwiXFxuXCI7XG5cdFx0XHRhbGxTZXJpYWxpemVkVGV4dCA9IGFsbFNlcmlhbGl6ZWRUZXh0LnJlcGxhY2UoL1xcdXsyMDBCfS9nLCBcIlwiKTtcblx0XHRcdC8vIGxldCBhbGxTZXJpYWxpemVkVGV4dCA9IFsuLi5wYXJ0cywgLi4ubGluZVJlZmVyZW5jZXNEYXRhXS5qb2luKFwiXCIpO1xuXHRcdFx0cmV0dXJuIGFsbFNlcmlhbGl6ZWRUZXh0Lmxlbmd0aCArIGFjYztcblx0XHR9LCAwKTsgLy8tIDE7IC8vIHN1YnN0cmFjdCBvbmUgY2F1c2UgZG9uJ3Qgd2FudCBhIG5ldyBsaW5lIGZvciB0aGUgbGFzdCBsaW5lXG5cblx0Ly8gc2V0IHJhbmdlIHRvIHJlcGxhY2Ugd2l0aCBuZXcgcmVmZXJlbmNlIHNlcmlhbGl6YXRpb25cblx0bGV0IGZyb20gPSBwcmV2TGluZUNoYXJDb3VudCArIHN0YXJ0VGV4dC5sZW5ndGg7XG5cdGxldCB0byA9IGZyb20gKyByZWZlcmVuY2UubGVuZ3RoO1xuXHRyZXR1cm4geyBmcm9tLCB0byB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VyaWFsaXplUmVmZXJlbmNlKFxuXHRjb250ZW50OiBhbnksXG5cdHJlZmVyZW5jZVNwYW46IEhUTUxFbGVtZW50LFxuXHR2aWV3OiBFZGl0b3JWaWV3LFxuXHR0b2dnbGVWYWx1ZTogc3RyaW5nIHwgbnVsbCA9IG51bGxcbikge1xuXHRjb250ZW50ID0gdHlwZW9mIGNvbnRlbnQgPT0gXCJzdHJpbmdcIiA/IGNvbnRlbnQgOiBjb250ZW50WzFdO1xuXG5cdGNvbnN0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG8sIHBvcnRhbCwgdG9nZ2xlXSA9XG5cdFx0Y29udGVudC5zcGxpdChcIjpcIik7XG5cdC8vIFNlcmlhbGl6ZSB0aGUgdG9nZ2xlIHN0YXRlIGZvciByZWZlcmVuY2UgaW50byBmaWxlXG5cdC8vIEtOT1dOIEVSUk9SLiBjb250ZW50RE9NIG9ubHkgcmV0dXJucyBwYXJ0aWFsIGZpbGUgZm9yIGVmZmljaWVuY3kgb24gbGFyZ2UgZG9jdW1lbnRzLiBTbyB3aWxsIGxvc2Ugc2VyaWFsaXphdGlvbiBpbiB0aGlzIGNhc2UuXG5cdC8vIHJlZmVyZW5jZVNwYW4uY2xhc3NMaXN0LnRvZ2dsZShcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiKTtcblxuXHRsZXQgbmV3VG9nZ2xlID0gdG9nZ2xlVmFsdWUgPyB0b2dnbGVWYWx1ZSA6IHRvZ2dsZSA9PT0gXCJmXCIgPyBcInRcIiA6IFwiZlwiO1xuXHRsZXQgcmVmZXJlbmNlID0gYFtcdTIxOTddKHVybjoke3ByZWZpeH06JHt0ZXh0fToke3N1ZmZpeH06JHtmaWxlfToke2Zyb219OiR7dG99OiR7cG9ydGFsfToke25ld1RvZ2dsZX0pYDtcblxuXHRsZXQgY3VyckxpbmUgPSByZWZlcmVuY2VTcGFuPy5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50O1xuXG5cdGNvbnN0IHJlc3VsdHMgPSBnZXRSZWZlcmVuY2VQb3NpdGlvbihcblx0XHR2aWV3LFxuXHRcdGN1cnJMaW5lIGFzIEhUTUxFbGVtZW50LFxuXHRcdHJlZmVyZW5jZSxcblx0XHR0ZXh0XG5cdCk7XG5cdGlmIChyZXN1bHRzKSB7XG5cdFx0Y29uc3QgdHJhbnNhY3Rpb24gPSB2aWV3LnN0YXRlLnVwZGF0ZSh7XG5cdFx0XHRjaGFuZ2VzOiB7IGZyb206IHJlc3VsdHMuZnJvbSwgdG86IHJlc3VsdHMudG8sIGluc2VydDogcmVmZXJlbmNlIH0sXG5cdFx0fSk7XG5cdFx0dmlldy5kaXNwYXRjaCh0cmFuc2FjdGlvbik7XG5cdFx0Y29uc29sZS5sb2coXCJ1cGRhdGViYWNrbGlua3Bvc2l0aW9uc1wiKTtcblx0XHRhd2FpdCB1cGRhdGVCYWNrbGlua01hcmtQb3NpdGlvbnMoKTtcblx0fVxuXG5cdHJldHVybjtcbn1cblxuLyogbmV3IHBsYWNlaG9sZGVyICovXG5jbGFzcyBSZWZlcmVuY2VXaWRnZXQgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBuYW1lOiBzdHJpbmcsXG5cdFx0cHJpdmF0ZSB2aWV3OiBFZGl0b3JWaWV3LFxuXHRcdHByaXZhdGUgcG9zOiBudW1iZXIsXG5cdFx0cHJpdmF0ZSByZWZlcmVuY2VTcGFuOiBFbGVtZW50IHwgbnVsbCA9IG51bGwsXG5cdFx0cHJpdmF0ZSBwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQgPSBudWxsLFxuXHRcdHByaXZhdGUgc2VyaWFsaXplZDogYm9vbGVhbiA9IGZhbHNlXG5cdCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRlcShvdGhlcjogUmVmZXJlbmNlV2lkZ2V0KSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZSA9PT0gb3RoZXIubmFtZTtcblx0fVxuXG5cdGdldFZpZXcoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmlldztcblx0fVxuXG5cdC8vIHRoaXMgcnVucyB3aGVuIHJlLXNlcmlhbGl6ZWQgYXMgd2VsbFxuXHRkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUubG9nKHRoaXMuc2VyaWFsaXplZCk7XG5cdFx0aWYgKHRoaXMuc2VyaWFsaXplZCkge1xuXHRcdFx0dGhpcy5zZXJpYWxpemVkID0gZmFsc2U7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Y29uc3QgcmVnZXggPSAvXFxbXHUyMTk3XFxdXFwodXJuOihbXildKilcXCkvZztcblx0XHRcdGxldCBjb250ZW50ID0gcmVnZXguZXhlYyh0aGlzLm5hbWUpO1xuXHRcdFx0aWYgKCFjb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJlZmVyZW5jZVwiKTtcblxuXHRcdFx0bGV0IHJlZmVyZW5jZSA9IGNvbnRlbnRbMF07XG5cdFx0XHRsZXQgZGF0YVN0cmluZyA9IGNvbnRlbnRbMV07XG5cdFx0XHRjb25zdCBbcHJlZml4LCB0ZXh0LCBzdWZmaXgsIGZpbGUsIGZyb20sIHRvLCBwb3J0YWwsIHRvZ2dsZSA9IFwiZlwiXSA9XG5cdFx0XHRcdGRhdGFTdHJpbmcuc3BsaXQoXCI6XCIpO1xuXG5cdFx0XHRsZXQgZGVjb2RlZEZpbGUgPSBkZWNvZGVVUklDb21wb25lbnRTdHJpbmcoZmlsZSk7XG5cdFx0XHQvLyBjb25zdCBsZWF2ZXMgPSBnZXRUaGF0KCkud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcIm1hcmtkb3duXCIpO1xuXHRcdFx0bGV0IGxlYXZlc0J5VGFiID0gY29sbGVjdExlYXZlc0J5VGFiSGVscGVyKCk7XG5cdFx0XHRsZXQgbGVhZiA9IGxlYXZlc0J5VGFiLmZsYXQoKS5maWx0ZXIoKGxlYWYpID0+IHtcblx0XHRcdFx0cmV0dXJuIGxlYWYuZ2V0Vmlld1N0YXRlKCkuc3RhdGUuZmlsZSA9PSBkZWNvZGVkRmlsZTtcblx0XHRcdH0pWzBdO1xuXHRcdFx0bGV0IHZpZXcgPSBnZXRFZGl0b3JWaWV3KGxlYWYpO1xuXG5cdFx0XHRyZW1vdmVIaWdobGlnaHQodmlldywgcGFyc2VJbnQoZnJvbSksIHBhcnNlSW50KHRvKSk7XG5cdFx0XHRjb25zdCBlZGl0b3IgPSBnZXRNYXJrZG93blZpZXcobGVhZikuZWRpdG9yO1xuXHRcdFx0Y29uc3QgYmFja2xpbmtDb250YWluZXIgPSBnZXRCYWNrbGlua0NvbnRhaW5lcihlZGl0b3IpO1xuXHRcdFx0Y29uc3QgYmFja2xpbmtzID0gQXJyYXkuZnJvbShcblx0XHRcdFx0YmFja2xpbmtDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5yZWZlcmVuY2UtZGF0YS1zcGFuXCIpXG5cdFx0XHQpO1xuXHRcdFx0Y29uc3QgYmFja2xpbmtEYXRhID0gYmFja2xpbmtzLm1hcCgoYmFja2xpbms6IEhUTUxFbGVtZW50KSA9PiB7XG5cdFx0XHRcdGxldCByZWZlcmVuY2UgPSBiYWNrbGluay5nZXRBdHRyaWJ1dGUoXCJyZWZlcmVuY2VcIik7XG5cdFx0XHRcdGlmICghcmVmZXJlbmNlKSByZXR1cm4ge307XG5cdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKHJlZmVyZW5jZSk7XG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGJhY2tsaW5rSW5kZXggPSBiYWNrbGlua0RhdGEuZmluZEluZGV4KChiYWNrbGluazogQmFja2xpbmspID0+IHtcblx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRiYWNrbGluay5kYXRhU3RyaW5nID09PSBkYXRhU3RyaW5nICYmXG5cdFx0XHRcdFx0YmFja2xpbmsucmVmZXJlbmNlZExvY2F0aW9uLmZpbGVuYW1lID09PVxuXHRcdFx0XHRcdFx0ZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nKGZpbGUpXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0YmFja2xpbmtzW2JhY2tsaW5rSW5kZXhdLnJlbW92ZSgpO1xuXHRcdH0sIDEwKTtcblx0fVxuXG5cdHRvRE9NKCkge1xuXHRcdGNvbnN0IHJlZ2V4ID0gL1xcW1x1MjE5N1xcXVxcKHVybjooW14pXSopXFwpL2c7XG5cdFx0bGV0IGNvbnRlbnQgPSByZWdleC5leGVjKHRoaXMubmFtZSk7XG5cdFx0aWYgKCFjb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJlZmVyZW5jZVwiKTtcblxuXHRcdGNvbnN0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG8sIHBvcnRhbCwgdG9nZ2xlID0gXCJmXCJdID1cblx0XHRcdGNvbnRlbnRbMV0uc3BsaXQoXCI6XCIpO1xuXG5cdFx0Y29uc3Qgc3BhbiA9IGNyZWF0ZVJlZmVyZW5jZUljb24oXG5cdFx0XHRwb3J0YWwgPT0gXCJwb3J0YWxcIiA/IFwiaW5saW5lIHJlZmVyZW5jZSB3aWRnZXQgfCp8XCIgOiBudWxsXG5cdFx0KTtcblxuXHRcdGlmIChjb250ZW50KSBzcGFuLnNldEF0dHJpYnV0ZShcImRhdGFcIiwgY29udGVudFsxXSk7XG5cblx0XHRjb25zdCBjb250YWluZXJTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0Y29udGFpbmVyU3Bhbi5jbGFzc0xpc3QuYWRkKFwicmVmZXJlbmNlLWNvbnRhaW5lci1zcGFuXCIpO1xuXHRcdGNvbnN0IHJlZmVyZW5jZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHQvLyBhZGQgY2xhc3Ncblx0XHRyZWZlcmVuY2VTcGFuLmNsYXNzTGlzdC5hZGQoXCJyZWZlcmVuY2Utc3BhblwiKTtcblxuXHRcdHJlZmVyZW5jZVNwYW4uaW5uZXJIVE1MID0gZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nKHRleHQpO1xuXHRcdHJlZmVyZW5jZVNwYW4uY2xhc3NMaXN0LnRvZ2dsZShcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiLCB0b2dnbGUgPT09IFwiZlwiKTtcblxuXHRcdGNvbnRhaW5lclNwYW4uYXBwZW5kQ2hpbGQocmVmZXJlbmNlU3Bhbik7XG5cdFx0Y29udGFpbmVyU3Bhbi5hcHBlbmRDaGlsZChzcGFuKTtcblxuXHRcdHRoaXMucmVmZXJlbmNlU3BhbiA9IHJlZmVyZW5jZVNwYW47XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLnBhcmVudEVsZW1lbnQgPSBjb250YWluZXJTcGFuLnBhcmVudEVsZW1lbnQ7XG5cdFx0fSwgMjApO1xuXG5cdFx0Y29udGFpbmVyU3Bhbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGV2KSA9PiB7XG5cdFx0XHRpZiAoZXYubWV0YUtleSB8fCBldi5jdHJsS2V5KSB7XG5cdFx0XHRcdG9wZW5SZWZlcmVuY2UoZXYpO1xuXG5cdFx0XHRcdC8vIC8vIFNlcmlhbGl6ZSB0aGUgdG9nZ2xlIHN0YXRlIGZvciByZWZlcmVuY2UgaW50byBmaWxlXG5cdFx0XHRcdC8vIC8vIEtOT1dOIEVSUk9SLiBjb250ZW50RE9NIG9ubHkgcmV0dXJucyBwYXJ0aWFsIGZpbGUgZm9yIGVmZmljaWVuY3kgb24gbGFyZ2UgZG9jdW1lbnRzLiBTbyB3aWxsIGxvc2Ugc2VyaWFsaXphdGlvbiBpbiB0aGlzIGNhc2UuXG5cdFx0XHRcdC8vIHJlZmVyZW5jZVNwYW4uY2xhc3NMaXN0LnRvZ2dsZShcInJlZmVyZW5jZS1zcGFuLWhpZGRlblwiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2VyaWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdGF3YWl0IHNlcmlhbGl6ZVJlZmVyZW5jZShjb250ZW50LCByZWZlcmVuY2VTcGFuLCB0aGlzLnZpZXcpO1xuXHRcdFx0XHQvLyByZWZlcmVuY2VTcGFuLlxuXHRcdFx0XHRyZWZlcmVuY2VTcGFuLmNsYXNzTGlzdC50b2dnbGUoXCJyZWZlcmVuY2Utc3Bhbi1oaWRkZW5cIik7XG5cdFx0XHRcdGlmIChjb250ZW50KSB0aGlzLm5hbWUgPSBjb250ZW50WzBdO1xuXHRcdFx0XHRpZiAocmVmZXJlbmNlU3Bhbikge1xuXHRcdFx0XHRcdHRoaXMucmVmZXJlbmNlU3BhbiA9IHJlZmVyZW5jZVNwYW47XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnRFbGVtZW50ID0gcmVmZXJlbmNlU3Bhbj8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNvbnRhaW5lclNwYW47XG5cdH1cbn1cblxuY29uc3QgcmVmZXJlbmNlRGVjb3JhdGlvbiA9IChcblx0bWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSxcblx0dmlldzogRWRpdG9yVmlldyxcblx0cG9zOiBudW1iZXJcbikgPT4ge1xuXHRsZXQgZGVjb3JhdGlvbiA9IERlY29yYXRpb24ucmVwbGFjZSh7XG5cdFx0d2lkZ2V0OiBuZXcgUmVmZXJlbmNlV2lkZ2V0KG1hdGNoWzBdLCB2aWV3LCBwb3MpLFxuXHR9KTtcblx0cmV0dXJuIGRlY29yYXRpb247XG59O1xuXG5jb25zdCByZWZlcmVuY2VNYXRjaGVyID0gbmV3IE1hdGNoRGVjb3JhdG9yKHtcblx0Ly8gcmVnZXhwOiAvXFxbXFx1MjE5N1xcXVxcKHVybjpbXFxzXFxTXlxcKV0qXFwpL2csXG5cdC8vIHJlZ2V4cDogL1xcW1xcdTIxOTdcXF1cXCh1cm46KFteOl0qOil7NSw2fVteOl0qXFwpL2csXG5cdC8vIHJlZ2V4cDogL1xcW1xcdTIxOTdcXF1cXCh1cm46KFteOl0qOil7Nn1bXjopXSpcXCkvZyxcblx0cmVnZXhwOiAvXFxbXFx1MjE5N1xcXVxcKHVybjooW146XSo6KXs3fVteOildKlxcKS9nLFxuXHRkZWNvcmF0aW9uOiAobWF0Y2gsIHZpZXcsIHBvcykgPT4ge1xuXHRcdHJldHVybiByZWZlcmVuY2VEZWNvcmF0aW9uKG1hdGNoLCB2aWV3LCBwb3MpO1xuXHR9LFxufSk7XG5cbmV4cG9ydCBjb25zdCByZWZlcmVuY2VSZXNvdXJjZXMgPSBWaWV3UGx1Z2luLmZyb21DbGFzcyhcblx0Y2xhc3Mge1xuXHRcdHJlZmVyZW5jZVJlc291cmNlczogRGVjb3JhdGlvblNldDtcblx0XHRjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XG5cdFx0XHR0aGlzLnJlZmVyZW5jZVJlc291cmNlcyA9IHJlZmVyZW5jZU1hdGNoZXIuY3JlYXRlRGVjbyh2aWV3KTtcblx0XHR9XG5cdFx0dXBkYXRlKHVwZGF0ZTogVmlld1VwZGF0ZSkge1xuXHRcdFx0dGhpcy5yZWZlcmVuY2VSZXNvdXJjZXMgPSByZWZlcmVuY2VNYXRjaGVyLnVwZGF0ZURlY28oXG5cdFx0XHRcdHVwZGF0ZSxcblx0XHRcdFx0dGhpcy5yZWZlcmVuY2VSZXNvdXJjZXNcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGRlc3Ryb3koKSB7XG5cdFx0XHR0aGlzLnJlZmVyZW5jZVJlc291cmNlcyA9IERlY29yYXRpb24ubm9uZTtcblx0XHR9XG5cdH0sXG5cdHtcblx0XHRkZWNvcmF0aW9uczogKGluc3RhbmNlKSA9PiBpbnN0YW5jZS5yZWZlcmVuY2VSZXNvdXJjZXMsXG5cdFx0cHJvdmlkZTogKHBsdWdpbikgPT5cblx0XHRcdEVkaXRvclZpZXcuYXRvbWljUmFuZ2VzLm9mKCh2aWV3KSA9PiB7XG5cdFx0XHRcdHJldHVybiB2aWV3LnBsdWdpbihwbHVnaW4pPy5yZWZlcmVuY2VSZXNvdXJjZXMgfHwgRGVjb3JhdGlvbi5ub25lO1xuXHRcdFx0fSksXG5cdH1cbik7XG4iLCAiaW1wb3J0IHsgRWRpdG9yLCBURmlsZSwgV29ya3NwYWNlTGVhZiwgTWFya2Rvd25WaWV3IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBFZGl0b3JWaWV3LCBzY3JvbGxQYXN0RW5kIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IHY1IGFzIHV1aWR2NSB9IGZyb20gXCJ1dWlkXCI7XG5cbmltcG9ydCB7XG5cdHN0YXRlLFxuXHR1cGRhdGVIb3Zlcixcblx0Z2V0VGhhdCxcblx0Z2V0QmFja2xpbmtzLFxuXHR1cGRhdGVCYWNrbGlua3MsXG5cdHVwZGF0ZUN1cnNvcixcblx0Z2V0Q3Vyc29yLFxuXHRnZXRIb3Zlcixcblx0cmVzZXRDdXJzb3IsXG5cdHVwZGF0ZUhvdmVyZWRDdXJzb3IsXG5cdHVwZGF0ZUJhY2tsaW5rSG92ZXIsXG5cdGdldEJhY2tsaW5rSG92ZXIsXG59IGZyb20gXCIuL3N0YXRlXCI7XG5pbXBvcnQge1xuXHRwcm9jZXNzVVJJLFxuXHRnZXRQcmVmaXhBbmRTdWZmaXgsXG5cdGhhbmRsZVJlbW92ZUhvdmVyZWRDdXJzb3IsXG5cdGVuY29kZVVSSUNvbXBvbmVudFN0cmluZyxcblx0ZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nLFxufSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHtcblx0QUNUSU9OX1RZUEUsXG5cdFBPUlRBTF9URVhUX1NMSUNFX1NJWkUsXG5cdFJFRkVSRU5DRV9JQ09OX0hFSUdIVCxcblx0UkVGRVJFTkNFX1JFR0VYLFxuXHRTVkdfSE9WRVJfQ09MT1IsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgRG9jdW1lbnRMb2NhdGlvbiwgQmFja2xpbmsgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IGRlbGF5IH0gZnJvbSBcIi4vZWZmZWN0c1wiO1xuaW1wb3J0IHsgZGVmYXVsdEhpZ2hsaWdodFNlbGVjdGlvbiB9IGZyb20gXCIuL21hcmtcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRGVmYXVsdEhpZ2hsaWdodHMobGVhZjogV29ya3NwYWNlTGVhZikge1xuXHRjb25zdCBlZGl0b3IgPSBnZXRNYXJrZG93blZpZXcobGVhZikuZWRpdG9yO1xuXHRjb25zdCBiYWNrbGlua0NvbnRhaW5lciA9IGdldEJhY2tsaW5rQ29udGFpbmVyKGVkaXRvcik7XG5cdGxldCBlZGl0b3JWaWV3ID0gZ2V0Q29kZU1pcnJvckVkaXRvclZpZXcoZWRpdG9yKTtcblxuXHRsZXQgYmFja2xpbmtzID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYmFja2xpbmtDb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRiYWNrbGlua3MucHVzaChiYWNrbGlua0NvbnRhaW5lci5jaGlsZHJlbi5pdGVtKGkpIGFzIEhUTUxFbGVtZW50KTtcblx0fVxuXG5cdGZvciAobGV0IGJhY2tsaW5rIG9mIGJhY2tsaW5rcykge1xuXHRcdGxldCByZWZlcmVuY2UgPSBiYWNrbGluay5nZXRBdHRyaWJ1dGUoXCJyZWZlcmVuY2VcIilcblx0XHRcdD8gSlNPTi5wYXJzZShiYWNrbGluay5nZXRBdHRyaWJ1dGUoXCJyZWZlcmVuY2VcIikhKVxuXHRcdFx0OiBudWxsO1xuXHRcdGlmIChyZWZlcmVuY2UpIHtcblx0XHRcdGxldCByZWZlcmVuY2VGcm9tID0gcmVmZXJlbmNlLnJlZmVyZW5jZWRMb2NhdGlvbi5mcm9tO1xuXHRcdFx0bGV0IHJlZmVyZW5jZVRvID0gcmVmZXJlbmNlLnJlZmVyZW5jZWRMb2NhdGlvbi50bztcblxuXHRcdFx0Y29uc29sZS5sb2coXCJkZWZhdWx0IGhpZ2hsaWdodCBzZWxlY3Rpb25cIik7XG5cdFx0XHRkZWZhdWx0SGlnaGxpZ2h0U2VsZWN0aW9uKGVkaXRvclZpZXcsIHJlZmVyZW5jZUZyb20sIHJlZmVyZW5jZVRvKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZmVyZW5jZUljb24oXG5cdHBvcnRhbFRleHQ6IHN0cmluZyB8IG51bGwgPSBudWxsXG4pOiBIVE1MU3BhbkVsZW1lbnQge1xuXHRjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdHNwYW4uc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG5cdHNwYW4uY2xhc3NMaXN0LmFkZChcInJlZmVyZW5jZS1kYXRhLXNwYW5cIik7XG5cdHNwYW4uY2xhc3NMaXN0LmFkZChcInV1aWQtXCIgKyB1dWlkdjQoKSk7XG5cblx0aWYgKHBvcnRhbFRleHQgPT0gbnVsbCkge1xuXHRcdHJldHVybiBzcGFuO1xuXHR9XG5cblx0aWYgKHBvcnRhbFRleHQgIT0gXCJpbmxpbmUgcmVmZXJlbmNlIHdpZGdldCB8KnxcIikge1xuXHRcdGxldCBwb3J0YWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHBvcnRhbC5jbGFzc0xpc3QuYWRkKFwicG9ydGFsXCIpO1xuXG5cdFx0cG9ydGFsVGV4dC5zcGxpdChcIjpcIikuZm9yRWFjaCgodGV4dCwgaW5kZXgpID0+IHtcblx0XHRcdGlmIChpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gMilcblx0XHRcdFx0cG9ydGFsLmlubmVySFRNTCArPSBkZWNvZGVVUklDb21wb25lbnRTdHJpbmcodGV4dCk7XG5cdFx0XHRlbHNlIGlmIChpbmRleCA9PT0gMSkge1xuXHRcdFx0XHRwb3J0YWwuaW5uZXJIVE1MICs9IGA8c3BhbiBjbGFzcz1cInRleHQtYWNjZW50XCI7PiR7dGV4dH08L3NwYW4+YDtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHBvcnRhbC5zdHlsZS51c2VyU2VsZWN0ID0gXCJub25lXCI7XG5cdFx0cG9ydGFsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcblx0XHRzcGFuLmFwcGVuZENoaWxkKHBvcnRhbCk7XG5cdH1cblxuXHRyZXR1cm4gc3Bhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvZGVNaXJyb3JFZGl0b3JWaWV3KGVkaXRvcjogRWRpdG9yKTogRWRpdG9yVmlldyB7XG5cdC8vIEB0cy1pZ25vcmUgdGhpcyB0eXBlIGlzIG1pc3NpbmcuLi4gYnV0IHRoZSBPYnNpZGlhbiBkb2NzIHRlbGwgdXMgdG8gZG8gaXQgdGhpcyB3YXk/P1xuXHRyZXR1cm4gZWRpdG9yLmNtIGFzIEVkaXRvclZpZXc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250YWluZXJFbGVtZW50KFxuXHRlZGl0b3JPckxlYWY6IEVkaXRvciB8IFdvcmtzcGFjZUxlYWZcbik6IEhUTUxFbGVtZW50IHtcblx0Ly8gQHRzLWlnbm9yZSBUT0RPOiBmaW5kIGEgYmV0dGVyIHdheSB0byBhY2Nlc3MgdGhpcy4uLiBFWFRSRU1FTFkgU0tFVENIWVxuXHRyZXR1cm4gZWRpdG9yT3JMZWFmLmNvbnRhaW5lckVsO1xufVxuXG5mdW5jdGlvbiBnZXRCYWNrbGlua0lEKGJhY2tsaW5rOiBCYWNrbGluayk6IHN0cmluZyB7XG5cdGNvbnN0IGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShiYWNrbGluayk7XG5cdGNvbnN0IGlkID0gdXVpZHY1KGpzb25TdHJpbmcsIFwiZmI4MTNlYmItMWI1My00MzA2LWFhOWMtNjU1NjI3NDQ3ZjBiXCIpO1xuXHRyZXR1cm4gYGJhY2tsaW5rLSR7aWR9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJhY2tsaW5rQ29udGFpbmVyKGVkaXRvcjogRWRpdG9yKTogSFRNTEVsZW1lbnQge1xuXHRjb25zdCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgPSBnZXRDb250YWluZXJFbGVtZW50KGVkaXRvcik7XG5cdGNvbnN0IHJlZmVyZW5jZU1hcmtDb250YWluZXJJRCA9IFwicmVmZXJlbmNlTWFya0NvbnRhaW5lclwiO1xuXHRjb25zdCBjb250YWluZXIgPSBjb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKGAjJHtyZWZlcmVuY2VNYXJrQ29udGFpbmVySUR9YCk7XG5cdGlmIChjb250YWluZXIpIHtcblx0XHRyZXR1cm4gY29udGFpbmVyIGFzIEhUTUxFbGVtZW50O1xuXHR9IGVsc2Uge1xuXHRcdGNvbnN0IG5ld0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0bmV3Q29udGFpbmVyLmlkID0gcmVmZXJlbmNlTWFya0NvbnRhaW5lcklEO1xuXHRcdGNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXCIuY20tc2Nyb2xsZXJcIikhLmFwcGVuZENoaWxkKG5ld0NvbnRhaW5lcik7XG5cdFx0cmV0dXJuIG5ld0NvbnRhaW5lcjtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VNYXJrcyhlZGl0b3I6IEVkaXRvcik6IEhUTUxFbGVtZW50W10ge1xuXHRjb25zdCBjb250YWluZXIgPSBnZXRCYWNrbGlua0NvbnRhaW5lcihlZGl0b3IpO1xuXHRjb25zdCBlbGVtZW50czogSFRNTEVsZW1lbnRbXSA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdGVsZW1lbnRzLnB1c2goY29udGFpbmVyLmNoaWxkcmVuLml0ZW0oaSkgYXMgSFRNTEVsZW1lbnQpO1xuXHR9XG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExlYWZCQm94RWxlbWVudHMobGVhZjogV29ya3NwYWNlTGVhZikge1xuXHRjb25zdCB0aXRsZSA9IGdldENvbnRhaW5lckVsZW1lbnQobGVhZikucXVlcnlTZWxlY3RvcihcIi5pbmxpbmUtdGl0bGVcIik7XG5cdGlmICghdGl0bGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRpdGxlXCIpO1xuXHR9XG5cdGNvbnN0IHRpdGxlQmJveCA9IHRpdGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRjb25zdCBsaW5lID0gZ2V0Q29udGFpbmVyRWxlbWVudChsZWFmKS5xdWVyeVNlbGVjdG9yKFwiLmNtLWxpbmVcIik7XG5cdGlmICghbGluZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkRvY3VtZW50IGhhcyBubyBsaW5lc1wiKTtcblx0fVxuXHRjb25zdCBsaW5lQmJveCA9IGxpbmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0cmV0dXJuIHsgdGl0bGVCYm94LCBsaW5lQmJveCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGF5b3V0QmFja2xpbmtzKFxuXHRsZWFmOiBXb3Jrc3BhY2VMZWFmLFxuXHRiYWNrbGlua3NUb0xlYWY6IEJhY2tsaW5rW10sXG5cdHNob3dQb3J0YWxzOiBib29sZWFuXG4pIHtcblx0Y29uc3QgZWRpdG9yID0gZ2V0TWFya2Rvd25WaWV3KGxlYWYpLmVkaXRvcjtcblx0Y29uc3QgYmFja2xpbmtDb250YWluZXIgPSBnZXRCYWNrbGlua0NvbnRhaW5lcihlZGl0b3IpO1xuXG5cdGxldCBiYWNrbGlua3MgPSBbXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBiYWNrbGlua0NvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdGJhY2tsaW5rcy5wdXNoKGJhY2tsaW5rQ29udGFpbmVyLmNoaWxkcmVuLml0ZW0oaSkgYXMgSFRNTEVsZW1lbnQpO1xuXHR9XG5cdGxldCBiYWNrbGlua0lkczogc3RyaW5nW10gPSBiYWNrbGlua3NUb0xlYWYubWFwKCh4KSA9PiBnZXRCYWNrbGlua0lEKHgpKTtcblxuXHRiYWNrbGlua3Ncblx0XHQubWFwKCh4OiBIVE1MU3BhbkVsZW1lbnQpID0+IHguaWQpXG5cdFx0LmZvckVhY2goKGlkKSA9PiB7XG5cdFx0XHRpZiAoIWJhY2tsaW5rSWRzLmluY2x1ZGVzKGlkKSkge1xuXHRcdFx0XHRsZXQgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0XHRcdFx0aWYgKGVsZW1lbnQpIGVsZW1lbnQucmVtb3ZlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0Y29uc3QgeyB0aXRsZUJib3gsIGxpbmVCYm94IH0gPSBnZXRMZWFmQkJveEVsZW1lbnRzKGxlYWYpO1xuXG5cdC8vIENyZWF0ZSB0aGUgaW5pdGlhbCBiYWNrbGluayBtYXJrIGlmIG5lY2Vzc2FyeSBhbmQgcG9zaXRpb24gaXQgaW4gdGhlIGNvcnJlY3QgdmVydGljYWwgcG9zaXRpb25cblx0bGV0IHJlZmVyZW5jZU1hcmtlcnMgPSBiYWNrbGlua3NUb0xlYWYubWFwKChiYWNrbGluaykgPT4ge1xuXHRcdGNvbnN0IHsgZnJvbSB9ID0gYmFja2xpbmsucmVmZXJlbmNlZExvY2F0aW9uO1xuXG5cdFx0Y29uc3QgYmJveCA9IGdldENvZGVNaXJyb3JFZGl0b3JWaWV3KGVkaXRvcikuY29vcmRzQXRQb3MoZnJvbSk7XG5cdFx0aWYgKCFiYm94KSByZXR1cm47XG5cblx0XHRsZXQgcmVmZXJlbmNlTWFya2VyID0gYmFja2xpbmtDb250YWluZXIucXVlcnlTZWxlY3Rvcihcblx0XHRcdGAjJHtnZXRCYWNrbGlua0lEKGJhY2tsaW5rKX1gXG5cdFx0KSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XG5cblx0XHRpZiAocmVmZXJlbmNlTWFya2VyID09PSBudWxsKSB7XG5cdFx0XHRyZWZlcmVuY2VNYXJrZXIgPSBjcmVhdGVCYWNrbGlua01hcmsoYmFja2xpbmspO1xuXHRcdFx0YmFja2xpbmtDb250YWluZXIuYXBwZW5kQ2hpbGQocmVmZXJlbmNlTWFya2VyKTtcblx0XHR9XG5cblx0XHRpZiAoYmJveCkge1xuXHRcdFx0cmVmZXJlbmNlTWFya2VyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG5cdFx0XHRyZWZlcmVuY2VNYXJrZXIuc2V0QXR0cmlidXRlKFwidG9wXCIsIGJib3gudG9wLnRvU3RyaW5nKCkpO1xuXHRcdFx0cmVmZXJlbmNlTWFya2VyLnN0eWxlLnRvcCA9IGJib3gudG9wIC0gdGl0bGVCYm94LnRvcCArIDMyICsgXCJweFwiO1xuXHRcdFx0cmVmZXJlbmNlTWFya2VyLnN0eWxlLmxlZnQgPSBsaW5lQmJveC53aWR0aCArIDQwICsgXCJweFwiO1xuXHRcdH1cblxuXHRcdHJldHVybiByZWZlcmVuY2VNYXJrZXI7XG5cdH0pO1xuXG5cdC8vIE5vdyBhY2NvdW50IGZvciBwb3NzaWJsZSBwb3NpdGlvbiBvdmVybGFwcyBhbmQgc2hpZnQgZG93bndhcmRzXG5cdC8vIGFsc28gY29uc2lkZXIgd2hldGhlciB0aGUgcG9ydGFscyBzaG91bGQgYmUgc2hvd24gb3Igbm90LlxuXHRsZXQgbGFzdFlCb3R0b20gPSAtSW5maW5pdHk7IC8vIGZvciBsYXJnZSBkb2N1bWVudHMgXHVEODNEXHVERTAxXG5cdGxldCBtYXJnaW4gPSA0O1xuXHRyZWZlcmVuY2VNYXJrZXJzXG5cdFx0LnNvcnQoXG5cdFx0XHQoYSwgYikgPT5cblx0XHRcdFx0cGFyc2VJbnQoYSEuZ2V0QXR0cmlidXRlKFwidG9wXCIpISkgLSBwYXJzZUludChiIS5nZXRBdHRyaWJ1dGUoXCJ0b3BcIikhKVxuXHRcdClcblx0XHQuZm9yRWFjaCgobWFya2VyKSA9PiB7XG5cdFx0XHRpZiAoIW1hcmtlcikgcmV0dXJuO1xuXHRcdFx0Ly8gdG9nZ2xlIHBvcnRhbHNcblx0XHRcdGNvbnN0IHBvcnRhbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbWFya2VyLnF1ZXJ5U2VsZWN0b3IoXCIucG9ydGFsXCIpO1xuXG5cdFx0XHRpZiAoc2hvd1BvcnRhbHMpIHtcblx0XHRcdFx0aWYgKHBvcnRhbCkge1xuXHRcdFx0XHRcdHBvcnRhbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcblx0XHRcdFx0XHRtYXJrZXIuY2xhc3NMaXN0LmFkZChcImJhY2tsaW5rLXNwYW5cIik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChwb3J0YWwpIHtcblx0XHRcdFx0XHRwb3J0YWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hcmtlci5jbGFzc0xpc3QucmVtb3ZlKFwiYmFja2xpbmstc3BhblwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2V0IHBvc2l0aW9uaW5nXG5cdFx0XHRsZXQgdG9wID0gcGFyc2VJbnQobWFya2VyIS5nZXRBdHRyaWJ1dGUoXCJ0b3BcIikhKTtcblx0XHRcdHRvcCA9IE1hdGgubWF4KHRvcCwgbGFzdFlCb3R0b20gKyBtYXJnaW4pO1xuXHRcdFx0bGFzdFlCb3R0b20gPSB0b3AgKyBtYXJrZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0ICsgbWFyZ2luO1xuXHRcdFx0bWFya2VyLnNldEF0dHJpYnV0ZShcInRvcFwiLCB0b3AudG9TdHJpbmcoKSk7XG5cdFx0XHRtYXJrZXIuc3R5bGUudG9wID0gdG9wIC0gdGl0bGVCYm94LnRvcCArIDMyICsgXCJweFwiO1xuXHRcdFx0bWFya2VyLnN0eWxlLmxlZnQgPSBsaW5lQmJveC53aWR0aCArIDQwICsgXCJweFwiO1xuXHRcdH0pO1xufVxuXG5sZXQgZGVib3VuY2VUaW1lcjogTm9kZUpTLlRpbWVvdXQ7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVCYWNrbGlua01hcmtQb3NpdGlvbnMoYmFja2xpbmtzPzogQmFja2xpbmtbXSkge1xuXHRjbGVhclRpbWVvdXQoZGVib3VuY2VUaW1lcik7XG5cdGRlYm91bmNlVGltZXIgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcInVwZGF0ZWJhY2tsaW5rbWFya3Bvc2l0aW9uc1wiKTtcblx0XHRjb25zdCBsZWF2ZXMgPSBnZXRUaGF0KCkud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcblx0XHRcdFwibWFya2Rvd25cIlxuXHRcdCkgYXMgV29ya3NwYWNlTGVhZltdO1xuXG5cdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7XG5cdFx0XHRsZXQgYWxsQmFja2xpbmtzOiBCYWNrbGlua1tdO1xuXG5cdFx0XHRpZiAoIWJhY2tsaW5rcykgYWxsQmFja2xpbmtzID0gYXdhaXQgZ2VuZXJhdGVCYWNrbGlua3MoKTtcblx0XHRcdGVsc2UgYWxsQmFja2xpbmtzID0gYmFja2xpbmtzO1xuXHRcdFx0Ly8gY29uc3QgYWxsQmFja2xpbmtzOiBCYWNrbGlua1tdID0gYXdhaXQgZ2VuZXJhdGVCYWNrbGlua3MoKTtcblxuXHRcdFx0Ly8gbGVhdmVzLm1hcChhc3luYyAobGVhZikgPT4ge1xuXHRcdFx0Ly8gXHRjb25zdCBiYWNrbGlua3NUb0xlYWYgPSBhbGxCYWNrbGlua3MuZmlsdGVyKFxuXHRcdFx0Ly8gXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdC8vIFx0XHQoYikgPT4gYi5yZWZlcmVuY2VkTG9jYXRpb24uZmlsZW5hbWUgPT0gbGVhZi52aWV3LmZpbGUucGF0aFxuXHRcdFx0Ly8gXHQpO1xuXHRcdFx0Ly8gXHQvLyB3aWR0aCA5MDAsIHNob3cgdGhlIHJlZmVyZW5jZVxuXHRcdFx0Ly8gXHRjb25zdCBzaG93UG9ydGFscyA9IGdldENvbnRhaW5lckVsZW1lbnQobGVhZikuaW5uZXJXaWR0aCA+IDkwMDtcblx0XHRcdC8vIFx0bGF5b3V0QmFja2xpbmtzKGxlYWYsIGJhY2tsaW5rc1RvTGVhZiwgc2hvd1BvcnRhbHMpO1xuXHRcdFx0Ly8gfSk7XG5cdFx0XHRhd2FpdCBQcm9taXNlLmFsbChcblx0XHRcdFx0bGVhdmVzLm1hcChhc3luYyAobGVhZikgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGJhY2tsaW5rc1RvTGVhZiA9IGFsbEJhY2tsaW5rcy5maWx0ZXIoXG5cdFx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0XHQoYikgPT4gYi5yZWZlcmVuY2VkTG9jYXRpb24uZmlsZW5hbWUgPT0gbGVhZi52aWV3LmZpbGUucGF0aFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Ly8gd2lkdGggOTAwLCBzaG93IHRoZSByZWZlcmVuY2Vcblx0XHRcdFx0XHRjb25zdCBzaG93UG9ydGFscyA9IGdldENvbnRhaW5lckVsZW1lbnQobGVhZikuaW5uZXJXaWR0aCA+IDkwMDtcblx0XHRcdFx0XHRsYXlvdXRCYWNrbGlua3MobGVhZiwgYmFja2xpbmtzVG9MZWFmLCBzaG93UG9ydGFscyk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHRcdH0sIDEwMDApOyAvLyB3YW50IHRvIGVuc3VyZSBmaWxlIHdyaXRlIGhhcyBoYXBwZW5lZFxuXHR9LCAxMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmFja2xpbmtNYXJrKGJhY2tsaW5rOiBCYWNrbGluayk6IEhUTUxFbGVtZW50IHtcblx0bGV0IHNwYW4gPSBjcmVhdGVSZWZlcmVuY2VJY29uKGJhY2tsaW5rLnBvcnRhbFRleHQpO1xuXHRzcGFuLmNsYXNzTGlzdC5hZGQoXCJiYWNrbGluay1kYXRhLXNwYW5cIik7XG5cblx0Y29uc3QgcG9ydGFsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBzcGFuLnF1ZXJ5U2VsZWN0b3IoXCIucG9ydGFsXCIpO1xuXG5cdHNwYW4uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cblx0c3Bhbi5pZCA9IGdldEJhY2tsaW5rSUQoYmFja2xpbmspO1xuXHRzcGFuLnNldEF0dHJpYnV0ZShcInJlZmVyZW5jZVwiLCBKU09OLnN0cmluZ2lmeShiYWNrbGluaykpO1xuXG5cdGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG5cdFx0aWYgKHBvcnRhbCAmJiBwb3J0YWwuc3R5bGUuZGlzcGxheSAhPSBcIm5vbmVcIikge1xuXHRcdFx0Ly8gc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIndoaXRlXCI7XG5cdFx0XHRzcGFuLmNsYXNzTGlzdC5hZGQoXCJiYWNrbGluay1wb3J0YWwtb3BlblwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xuXHRcdFx0c3Bhbi5jbGFzc0xpc3QucmVtb3ZlKFwiYmFja2xpbmstcG9ydGFsLW9wZW5cIik7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBTdGFydCBvYnNlcnZpbmcgYW4gZWxlbWVudFxuXHRyZXNpemVPYnNlcnZlci5vYnNlcnZlKHNwYW4pO1xuXG5cdHNwYW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5CYWNrbGlua1JlZmVyZW5jZSk7XG5cblx0cmV0dXJuIHNwYW47XG59XG5cbi8vIEtlZXAgdHJhY2sgb2YgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGFuZCBsaXN0ZW5lclxubGV0IGV4aXN0aW5nT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyIHwgbnVsbCA9IG51bGw7XG5sZXQgZXhpc3RpbmdMaXN0ZW5lcjogKChldjogRXZlbnQpID0+IGFueSkgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFJlZmVyZW5jZXNUb0xlYWYoXG5cdGxlYWY6IFdvcmtzcGFjZUxlYWYsXG5cdGJhY2tsaW5rcz86IEJhY2tsaW5rW11cbikge1xuXHRjb25zb2xlLmxvZyhcImFkZCByZWZlcmVuY2VzIHRvIGxlYWZcIik7XG5cdGF3YWl0IHVwZGF0ZUJhY2tsaW5rTWFya1Bvc2l0aW9ucyhiYWNrbGlua3MpO1xuXHRhd2FpdCBkZWxheSgxMDAwKTtcblx0Y29uc29sZS5sb2coXCJpbml0aWFsIGxvYWRcIik7XG5cdGdlbmVyYXRlRGVmYXVsdEhpZ2hsaWdodHMobGVhZik7XG5cblx0Ly8gY29uc3Qgc2Nyb2xsZXIgPSBnZXRDb250YWluZXJFbGVtZW50KG1hcmtkb3duVmlldy5lZGl0b3IpLnF1ZXJ5U2VsZWN0b3IoXG5cdC8vIFx0XCIuY20tc2Nyb2xsZXJcIlxuXHQvLyApITtcblxuXHQvLyAvLyBSZW1vdmUgdGhlIGV4aXN0aW5nIGxpc3RlbmVyIGJlZm9yZSBhZGRpbmcgYSBuZXcgb25lXG5cdC8vIGlmIChleGlzdGluZ0xpc3RlbmVyKSB7XG5cdC8vIFx0c2Nyb2xsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBleGlzdGluZ0xpc3RlbmVyKTtcblx0Ly8gfVxuXG5cdC8vIGNvbnN0IG5ld0xpc3RlbmVyID0gYXN5bmMgKGV2OiBFdmVudCkgPT4ge1xuXHQvLyBcdGF3YWl0IHVwZGF0ZUJhY2tsaW5rTWFya1Bvc2l0aW9ucygpO1xuXHQvLyBcdGF3YWl0IGRlbGF5KDIwMDApO1xuXHQvLyBcdGNvbnNvbGUubG9nKFwic2Nyb2xsIGxvYWRcIik7XG5cblx0Ly8gXHRnZW5lcmF0ZURlZmF1bHRIaWdobGlnaHRzKGxlYWYpO1xuXHQvLyB9O1xuXG5cdC8vIHNjcm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgbmV3TGlzdGVuZXIpO1xuXG5cdC8vIC8vIFVwZGF0ZSB0aGUgZXhpc3RpbmcgbGlzdGVuZXJcblx0Ly8gZXhpc3RpbmdMaXN0ZW5lciA9IG5ld0xpc3RlbmVyO1xuXG5cdC8vIFJlbW92ZSB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgYmVmb3JlIGNyZWF0aW5nIGEgbmV3IG9uZVxuXHRpZiAoZXhpc3RpbmdPYnNlcnZlcikge1xuXHRcdGV4aXN0aW5nT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuXHR9XG5cblx0Y29uc3QgbmV3T2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoYXN5bmMgKCkgPT4ge1xuXHRcdGF3YWl0IHVwZGF0ZUJhY2tsaW5rTWFya1Bvc2l0aW9ucygpO1xuXHRcdGF3YWl0IGRlbGF5KDEwMDApO1xuXHRcdGNvbnNvbGUubG9nKFwicmVzaXplIGxvYWRcIik7XG5cdFx0Z2VuZXJhdGVEZWZhdWx0SGlnaGxpZ2h0cyhsZWFmKTtcblx0fSk7XG5cblx0Y29uc3QgbWFya2Rvd25WaWV3ID0gZ2V0TWFya2Rvd25WaWV3KGxlYWYpO1xuXHRsZXQgd29ya3NwYWNlVGFicyA9IG1hcmtkb3duVmlldy5jb250YWluZXJFbC5jbG9zZXN0KFwiLndvcmtzcGFjZS10YWJzXCIpO1xuXHRpZiAoIXdvcmtzcGFjZVRhYnMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHdvcmtzcGFjZSB0YWJzXCIpO1xuXHR9XG5cblx0bmV3T2JzZXJ2ZXIub2JzZXJ2ZSh3b3Jrc3BhY2VUYWJzKTtcblxuXHQvLyBVcGRhdGUgdGhlIGV4aXN0aW5nIG9ic2VydmVyXG5cdGV4aXN0aW5nT2JzZXJ2ZXIgPSBuZXdPYnNlcnZlcjtcblxuXHRyZXR1cm4gbGVhZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcmtkb3duVmlldyhsZWFmOiBXb3Jrc3BhY2VMZWFmKTogTWFya2Rvd25WaWV3IHtcblx0aWYgKCEobGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgbm9uLW1hcmtkb3duIHZpZXdcIik7XG5cdH1cblx0cmV0dXJuIGxlYWYudmlldyBhcyBNYXJrZG93blZpZXc7XG59XG5cbmZ1bmN0aW9uIGdldEZpbGVuYW1lKGxlYWY6IFdvcmtzcGFjZUxlYWYpOiBzdHJpbmcge1xuXHRjb25zdCB7IGZpbGUgfSA9IGdldE1hcmtkb3duVmlldyhsZWFmKTtcblx0aWYgKCFmaWxlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBtaXNzaW5nIGZpbGVcIik7XG5cdH1cblx0cmV0dXJuIGZpbGUubmFtZTtcbn1cblxuZnVuY3Rpb24gZmluZE1hdGNoUG9zaXRpb25zKGxpbmU6IHN0cmluZywgcmVnZXg6IFJlZ0V4cCkge1xuXHRsZXQgbWF0Y2g7XG5cdGNvbnN0IHBvc2l0aW9ucyA9IFtdO1xuXHR3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblx0XHRwb3NpdGlvbnMucHVzaCh7XG5cdFx0XHRtYXRjaDogbWF0Y2hbMF0sXG5cdFx0XHRzdGFydDogbWF0Y2guaW5kZXgsXG5cdFx0XHRlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoLFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBwb3NpdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhY2tsaW5rRGF0YShcblx0cmVmZXJlbmNpbmdGaWxlRGF0YTogc3RyaW5nLFxuXHRyZWZlcmVuY2luZ0ZpbGU6IFRGaWxlXG4pOiBCYWNrbGlua1tdIHtcblx0bGV0IGJhY2tsaW5rczogQmFja2xpbmtbXSA9IFtdO1xuXG5cdGxldCBtYXRjaGVzID0gWy4uLnJlZmVyZW5jaW5nRmlsZURhdGEubWF0Y2hBbGwoUkVGRVJFTkNFX1JFR0VYKV07XG5cdG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcblx0XHRpZiAobWF0Y2hbMV0uc3BsaXQoXCI6XCIpLmxlbmd0aCAhPSA4KSByZXR1cm47XG5cdFx0bGV0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZW5hbWUsIGZyb20sIHRvLCBwb3J0YWwsIHRvZ2dsZV0gPSBwcm9jZXNzVVJJKFxuXHRcdFx0bWF0Y2hbMV1cblx0XHQpO1xuXHRcdGNvbnN0IHJlZmVyZW5jZWRMb2NhdGlvbjogRG9jdW1lbnRMb2NhdGlvbiA9IHtcblx0XHRcdHByZWZpeCxcblx0XHRcdHRleHQsXG5cdFx0XHRzdWZmaXgsXG5cdFx0XHRmaWxlbmFtZSxcblx0XHRcdGZyb20sXG5cdFx0XHR0byxcblx0XHRcdHBvcnRhbCxcblx0XHRcdHRvZ2dsZSxcblx0XHR9O1xuXG5cdFx0bGV0IGluZGV4ID0gcmVmZXJlbmNpbmdGaWxlRGF0YS5pbmRleE9mKG1hdGNoWzBdKTtcblxuXHRcdGNvbnN0IHJlZmVyZW5jaW5nU3Vycm91bmRpbmdTdHJpbmdzID0gZ2V0UHJlZml4QW5kU3VmZml4KFxuXHRcdFx0cmVmZXJlbmNpbmdGaWxlRGF0YSxcblx0XHRcdGluZGV4LFxuXHRcdFx0aW5kZXggKyBtYXRjaFswXS5sZW5ndGhcblx0XHQpO1xuXG5cdFx0Y29uc3QgcmVmZXJlbmNpbmdMb2NhdGlvbjogRG9jdW1lbnRMb2NhdGlvbiA9IHtcblx0XHRcdHByZWZpeDogcmVmZXJlbmNpbmdTdXJyb3VuZGluZ1N0cmluZ3MucHJlZml4LFxuXHRcdFx0dGV4dDogcmVmZXJlbmNpbmdGaWxlRGF0YS5zbGljZShpbmRleCwgaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpLFxuXHRcdFx0c3VmZml4OiByZWZlcmVuY2luZ1N1cnJvdW5kaW5nU3RyaW5ncy5zdWZmaXgsXG5cdFx0XHRmaWxlbmFtZTogcmVmZXJlbmNpbmdGaWxlLnBhdGgsXG5cdFx0XHRmcm9tOiBtYXRjaC5pbmRleCEsIC8vIFRPRE8gZG8gd2VpcmQgc3RyaW5nIGZvcm1hdFxuXHRcdFx0dG86IG1hdGNoLmluZGV4ISArIG1hdGNoWzBdLmxlbmd0aCwgLy8gVE9ETyBkbyB3ZWlyZCBzdHJpbmcgZm9ybWF0XG5cdFx0XHRwb3J0YWwsXG5cdFx0XHR0b2dnbGUsXG5cdFx0fTtcblxuXHRcdGlmIChwb3J0YWwgPT0gXCJwb3J0YWxcIikge1xuXHRcdFx0Ly8gT1Igbm8tcG9ydGFsXG5cblx0XHRcdC8vIGdldCBhbGwgdGhlIHRleHQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGxpbmUgdG8gdGhlIGVuZCBvZiB0aGUgbGluZVxuXHRcdFx0Y29uc3QgZ2V0TGluZVRleHQgPSAodGV4dDogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nID0+IHtcblx0XHRcdFx0Y29uc3Qgc3RhcnRPZkxpbmUgPSB0ZXh0Lmxhc3RJbmRleE9mKFwiXFxuXCIsIGluZGV4IC0gMSkgKyAxO1xuXHRcdFx0XHRjb25zdCBlbmRPZkxpbmUgPSB0ZXh0LmluZGV4T2YoXCJcXG5cIiwgaW5kZXgpO1xuXHRcdFx0XHRyZXR1cm4gdGV4dC5zbGljZShcblx0XHRcdFx0XHRzdGFydE9mTGluZSxcblx0XHRcdFx0XHRlbmRPZkxpbmUgIT09IC0xID8gZW5kT2ZMaW5lIDogdW5kZWZpbmVkXG5cdFx0XHRcdCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRsZXQgbGluZSA9IGdldExpbmVUZXh0KHJlZmVyZW5jaW5nRmlsZURhdGEsIGluZGV4KTtcblx0XHRcdGxldCBtYXRjaFBvc2l0aW9ucyA9IGZpbmRNYXRjaFBvc2l0aW9ucyhcblx0XHRcdFx0bGluZSxcblx0XHRcdFx0bmV3IFJlZ0V4cChSRUZFUkVOQ0VfUkVHRVgpXG5cdFx0XHQpO1xuXG5cdFx0XHRsZXQgbWF0Y2hJbmRleCA9IDA7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoUG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChtYXRjaFBvc2l0aW9uc1tpXS5tYXRjaCA9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1hdGNoSW5kZXggKz0gbWF0Y2hQb3NpdGlvbnNbaV0uZW5kIC0gbWF0Y2hQb3NpdGlvbnNbaV0uc3RhcnQgLSAxOyAvLyAtMSBiZWNhdXNlIHRoZSBsaW5lIGlzIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIGNoYXJhY3RlclxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGxldCBwb3J0YWxUZXh0ID0gbGluZS5yZXBsYWNlKG5ldyBSZWdFeHAoUkVGRVJFTkNFX1JFR0VYLCBcImdcIiksIFwiXHUyMTk3XCIpO1xuXHRcdFx0bGV0IHBvcnRhbFRleHRTbGljZSA9IHBvcnRhbFRleHQuc2xpY2UoMCwgUE9SVEFMX1RFWFRfU0xJQ0VfU0laRSk7XG5cblx0XHRcdGxldCBwb3J0YWxUZXh0SW5kZXggPSBsaW5lLmluZGV4T2YobWF0Y2hbMF0pIC0gbWF0Y2hJbmRleDtcblxuXHRcdFx0Ly8gZ2V0dGluZyB0aGUgcG9ydGFsIHRleHQgc2VsZWN0aW9uIGFyb3VuZCB0aGUgcmVmZXJlbmNlXG5cdFx0XHRwb3J0YWxUZXh0U2xpY2UgPSBcIlx1MjE5N1wiO1xuXG5cdFx0XHRsZXQgc3RhcnRQb3J0YWxUZXh0ID0gcG9ydGFsVGV4dC5zdWJzdHJpbmcoXG5cdFx0XHRcdE1hdGgubWF4KHBvcnRhbFRleHRJbmRleCAtIDI1LCAwKSxcblx0XHRcdFx0cG9ydGFsVGV4dEluZGV4XG5cdFx0XHQpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRwb3J0YWxUZXh0LnN1YnN0cmluZyhNYXRoLm1heChwb3J0YWxUZXh0SW5kZXggLSAyNSwgMCksIHBvcnRhbFRleHRJbmRleClcblx0XHRcdFx0XHQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRwb3J0YWxUZXh0SW5kZXggLSAyNSA+IDBcblx0XHRcdClcblx0XHRcdFx0c3RhcnRQb3J0YWxUZXh0ID0gXCIuLi5cIiArIHN0YXJ0UG9ydGFsVGV4dDtcblxuXHRcdFx0bGV0IGVuZFBvcnRhbFRleHQgPSBwb3J0YWxUZXh0LnN1YnN0cmluZyhcblx0XHRcdFx0cG9ydGFsVGV4dEluZGV4ICsgMSxcblx0XHRcdFx0TWF0aC5tYXgocG9ydGFsVGV4dEluZGV4ICsgMjUsIHBvcnRhbFRleHQubGVuZ3RoKVxuXHRcdFx0KTtcblx0XHRcdGlmIChcblx0XHRcdFx0cG9ydGFsVGV4dC5zdWJzdHJpbmcoXG5cdFx0XHRcdFx0cG9ydGFsVGV4dEluZGV4ICsgMSxcblx0XHRcdFx0XHRNYXRoLm1heChwb3J0YWxUZXh0SW5kZXggKyAyNSwgcG9ydGFsVGV4dC5sZW5ndGgpXG5cdFx0XHRcdCkubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRwb3J0YWxUZXh0SW5kZXggKyAyNSA8IHBvcnRhbFRleHQubGVuZ3RoXG5cdFx0XHQpXG5cdFx0XHRcdGVuZFBvcnRhbFRleHQgPSBlbmRQb3J0YWxUZXh0ICsgXCIuLi5cIjtcblxuXHRcdFx0YmFja2xpbmtzLnB1c2goe1xuXHRcdFx0XHRyZWZlcmVuY2VkTG9jYXRpb24sXG5cdFx0XHRcdHJlZmVyZW5jaW5nTG9jYXRpb24sXG5cdFx0XHRcdGRhdGFTdHJpbmc6IG1hdGNoWzFdLFxuXHRcdFx0XHRwb3J0YWxUZXh0OlxuXHRcdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudFN0cmluZyhzdGFydFBvcnRhbFRleHQpICtcblx0XHRcdFx0XHRcIjpcIiArXG5cdFx0XHRcdFx0cG9ydGFsVGV4dFNsaWNlICtcblx0XHRcdFx0XHRcIjpcIiArXG5cdFx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50U3RyaW5nKGVuZFBvcnRhbFRleHQpLFxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGJhY2tsaW5rcy5wdXNoKHtcblx0XHRcdFx0cmVmZXJlbmNlZExvY2F0aW9uLFxuXHRcdFx0XHRyZWZlcmVuY2luZ0xvY2F0aW9uLFxuXHRcdFx0XHRkYXRhU3RyaW5nOiBtYXRjaFsxXSxcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBiYWNrbGlua3M7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUJhY2tsaW5rcygpOiBQcm9taXNlPEJhY2tsaW5rW10+IHtcblx0Y29uc29sZS5sb2coXCJnZW5lcmF0aW5nIHJlZmVyZW5jZXNcIik7XG5cdC8vIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuXHRsZXQgYmFja2xpbmtzOiBCYWNrbGlua1tdID0gW107XG5cdGxldCBtYXJrZG93bkZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXG5cdGF3YWl0IFByb21pc2UuYWxsKFxuXHRcdG1hcmtkb3duRmlsZXMubWFwKChmaWxlOiBURmlsZSkgPT4gdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKSlcblx0KS50aGVuKChmaWxlcykgPT4ge1xuXHRcdGNvbnN0IHppcHBlZEFycmF5ID0gbWFya2Rvd25GaWxlcy5tYXAoKGZpbGU6IFRGaWxlLCBpbmRleDogbnVtYmVyKSA9PiAoe1xuXHRcdFx0bWFya2Rvd25GaWxlOiBmaWxlLFxuXHRcdFx0ZmlsZURhdGE6IGZpbGVzW2luZGV4XSxcblx0XHR9KSk7XG5cblx0XHR6aXBwZWRBcnJheS5mb3JFYWNoKChmaWxlOiB7IG1hcmtkb3duRmlsZTogVEZpbGU7IGZpbGVEYXRhOiBzdHJpbmcgfSkgPT4ge1xuXHRcdFx0bGV0IGZpbGVCYWNrbGlua3MgPSBjcmVhdGVCYWNrbGlua0RhdGEoZmlsZS5maWxlRGF0YSwgZmlsZS5tYXJrZG93bkZpbGUpO1xuXHRcdFx0dXBkYXRlQmFja2xpbmtzKGZpbGVCYWNrbGlua3MpO1xuXG5cdFx0XHRiYWNrbGlua3MucHVzaCguLi5maWxlQmFja2xpbmtzKTtcblx0XHR9KTtcblx0fSk7XG5cdHJldHVybiBiYWNrbGlua3M7XG5cdC8vIH0sIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUmVmZXJlbmNlQ29sb3Ioc3BhbjogSFRNTFNwYW5FbGVtZW50LCB1c2VyOiBzdHJpbmcpIHtcblx0Ly8gcmVtb3ZlIGV4aXN0aW5nIGN1cnNvcnNcblx0Y29uc3QgcG9ydGFsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBzcGFuLnF1ZXJ5U2VsZWN0b3IoXCIucG9ydGFsXCIpO1xuXG5cdGlmIChzcGFuICYmICFwb3J0YWwpIHtcblx0XHRoYW5kbGVSZW1vdmVIb3ZlcmVkQ3Vyc29yKHVzZXIpOyAvLyByZW1vdmUgYW55IGV4aXN0aW5nIGhvdmVyZWQgcmVmZXJlbmNlIGljb25cblxuXHRcdHNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gU1ZHX0hPVkVSX0NPTE9SO1xuXG5cdFx0dXBkYXRlSG92ZXJlZEN1cnNvcihzcGFuLCB1c2VyKTsgLy8gYWRkIHRoZSBjdXJyZW50bHkgaG92ZXJlZCByZWZlcmVuY2UgaWNvblxuXHR9XG59XG5cbi8vIC8vIFNob3VsZCBvbmx5IHJlY29tcHV0ZSBmb3IgdGhlIHBhcnRpY3VsYXIgcGFnZSBiZWluZyBvcGVuZWQgb3IgaW50ZXJhY3RlZCB3aXRoXG4vLyBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVjb21wdXRlUmVmZXJlbmNlc0ZvclBhZ2UoKTogUHJvbWlzZTxCYWNrbGlua1tdPiB7XG4vLyBcdGF3YWl0IGRlbGF5KDEwKTtcbi8vIFx0bGV0IHJlZmVyZW5jZXM6IEJhY2tsaW5rW10gPSBbXTtcbi8vIFx0bGV0IG1hcmtkb3duRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cbi8vIFx0bGV0IHByb21pc2VzID0gbWFya2Rvd25GaWxlcy5tYXAoKGZpbGU6IFRGaWxlKSA9PiB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpKTtcblxuLy8gXHRsZXQgZmlsZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4vLyBcdGNvbnN0IHppcHBlZEFycmF5ID0gbWFya2Rvd25GaWxlcy5tYXAoKGZpbGU6IFRGaWxlLCBpbmRleDogbnVtYmVyKSA9PiAoe1xuLy8gXHRcdG1hcmtkb3duRmlsZTogZmlsZSxcbi8vIFx0XHRmaWxlRGF0YTogZmlsZXNbaW5kZXhdLFxuLy8gXHR9KSk7XG4vLyBcdHppcHBlZEFycmF5LmZvckVhY2goKGZpbGU6IHsgbWFya2Rvd25GaWxlOiBURmlsZTsgZmlsZURhdGE6IHN0cmluZyB9KSA9PiB7XG4vLyBcdFx0bGV0IGZpbGVCYWNrbGlua3MgPSBjcmVhdGVCYWNrbGlua0RhdGEoZmlsZS5maWxlRGF0YSwgZmlsZS5tYXJrZG93bkZpbGUpO1xuLy8gXHRcdHVwZGF0ZUJhY2tsaW5rcyhmaWxlQmFja2xpbmtzKTtcblxuLy8gXHRcdHJlZmVyZW5jZXMucHVzaCguLi5maWxlQmFja2xpbmtzKTtcbi8vIFx0fSk7XG4vLyBcdHJldHVybiByZWZlcmVuY2VzO1xuLy8gfVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb3BlbkJhY2tsaW5rUmVmZXJlbmNlKGV2OiBNb3VzZUV2ZW50KSB7XG5cdGxldCBjdXJzb3IgPSBnZXRDdXJzb3IoKTtcblx0bGV0IGhvdmVyID0gZ2V0QmFja2xpbmtIb3ZlcigpO1xuXHRsZXQgbGVhZiA9IGdldFRoYXQoKS53b3Jrc3BhY2UuZ2V0TGVhZkJ5SWQoaG92ZXIubGVhZklkKTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdGxldCBjb250YWluZXIgPSBsZWFmLmNvbnRhaW5lckVsO1xuXHRpZiAoIWNvbnRhaW5lcikgdGhyb3cgbmV3IEVycm9yKFwiQ29udGFpbmVyIG5vdCBmb3VuZFwiKTtcblx0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudmlldy1jb250ZW50XCIpLnN0eWxlLmJveFNoYWRvdyA9IFwibm9uZVwiO1xuXG5cdGlmIChcblx0XHRjdXJzb3IgJiZcblx0XHRob3ZlciAmJlxuXHRcdGN1cnNvci5kYXRhU3RyaW5nICYmXG5cdFx0aG92ZXIuZGF0YVN0cmluZyAmJlxuXHRcdGN1cnNvci5kYXRhU3RyaW5nID09IGhvdmVyLmRhdGFTdHJpbmdcblx0KSB7XG5cdFx0dXBkYXRlQ3Vyc29yKHtcblx0XHRcdHRlbXA6IGZhbHNlLFxuXHRcdFx0Y3Vyc29yVmlld3BvcnQ6IG51bGwsXG5cdFx0XHRwZWVrOiBmYWxzZSxcblx0XHR9KTtcblx0fVxuXHR1cGRhdGVCYWNrbGlua0hvdmVyKHtcblx0XHR0ZW1wOiBmYWxzZSxcblx0XHRjdXJzb3JWaWV3cG9ydDogbnVsbCxcblx0XHRwZWVrOiBmYWxzZSxcblx0fSk7XG5cblx0aGFuZGxlUmVtb3ZlSG92ZXJlZEN1cnNvcihBQ1RJT05fVFlQRS5DVVJTT1IpO1xuXG5cdHJlc2V0Q3Vyc29yKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvcGVuUmVmZXJlbmNlKGV2OiBNb3VzZUV2ZW50KSB7XG5cdGxldCBjdXJzb3IgPSBnZXRDdXJzb3IoKTtcblx0bGV0IGhvdmVyID0gZ2V0SG92ZXIoKTtcblx0bGV0IGxlYWYgPSBnZXRUaGF0KCkud29ya3NwYWNlLmdldExlYWZCeUlkKGhvdmVyLmxlYWZJZCk7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRsZXQgY29udGFpbmVyID0gbGVhZi5jb250YWluZXJFbDtcblx0aWYgKCFjb250YWluZXIpIHRocm93IG5ldyBFcnJvcihcIkNvbnRhaW5lciBub3QgZm91bmRcIik7XG5cdGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnZpZXctY29udGVudFwiKS5zdHlsZS5ib3hTaGFkb3cgPSBcIm5vbmVcIjtcblxuXHRpZiAoXG5cdFx0Y3Vyc29yICYmXG5cdFx0aG92ZXIgJiZcblx0XHRjdXJzb3IuZGF0YVN0cmluZyAmJlxuXHRcdGhvdmVyLmRhdGFTdHJpbmcgJiZcblx0XHRjdXJzb3IuZGF0YVN0cmluZyA9PSBob3Zlci5kYXRhU3RyaW5nXG5cdCkge1xuXHRcdHVwZGF0ZUN1cnNvcih7XG5cdFx0XHR0ZW1wOiBmYWxzZSxcblx0XHRcdGN1cnNvclZpZXdwb3J0OiBudWxsLFxuXHRcdFx0cGVlazogZmFsc2UsXG5cdFx0fSk7XG5cdH1cblx0dXBkYXRlSG92ZXIoe1xuXHRcdHRlbXA6IGZhbHNlLFxuXHRcdGN1cnNvclZpZXdwb3J0OiBudWxsLFxuXHRcdHBlZWs6IGZhbHNlLFxuXHR9KTtcblxuXHRoYW5kbGVSZW1vdmVIb3ZlcmVkQ3Vyc29yKEFDVElPTl9UWVBFLkNVUlNPUik7XG5cblx0cmVzZXRDdXJzb3IoKTtcbn1cbiIsICIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbmxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsICJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwgImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsICJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHJldHVybiBieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCAiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiLCAiaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWVzcGFjZSA9IHBhcnNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCAiY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRFxufTsiLCAiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwgIi8vIEFkYXB0ZWQgZnJvbSBDaHJpcyBWZW5lc3MnIFNIQTEgY29kZSBhdFxuLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9zaGExLmh0bWxcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4geCAmIHkgXiB+eCAmIHo7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHggJiB5IF4geCAmIHogXiB5ICYgejtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG4gIH1cbn1cblxuZnVuY3Rpb24gUk9UTCh4LCBuKSB7XG4gIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47XG59XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgY29uc3QgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgY29uc3QgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcblxuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlcy5wdXNoKG1zZy5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgLy8gQ29udmVydCBBcnJheS1saWtlIHRvIEFycmF5XG4gICAgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChieXRlcyk7XG4gIH1cblxuICBieXRlcy5wdXNoKDB4ODApO1xuICBjb25zdCBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gIGNvbnN0IE4gPSBNYXRoLmNlaWwobCAvIDE2KTtcbiAgY29uc3QgTSA9IG5ldyBBcnJheShOKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IE47ICsraSkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50MzJBcnJheSgxNik7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIGFycltqXSA9IGJ5dGVzW2kgKiA2NCArIGogKiA0XSA8PCAyNCB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMV0gPDwgMTYgfCBieXRlc1tpICogNjQgKyBqICogNCArIDJdIDw8IDggfCBieXRlc1tpICogNjQgKyBqICogNCArIDNdO1xuICAgIH1cblxuICAgIE1baV0gPSBhcnI7XG4gIH1cblxuICBNW04gLSAxXVsxNF0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4IC8gTWF0aC5wb3coMiwgMzIpO1xuICBNW04gLSAxXVsxNF0gPSBNYXRoLmZsb29yKE1bTiAtIDFdWzE0XSk7XG4gIE1bTiAtIDFdWzE1XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggJiAweGZmZmZmZmZmO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XG4gICAgY29uc3QgVyA9IG5ldyBVaW50MzJBcnJheSg4MCk7XG5cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgIFdbdF0gPSBNW2ldW3RdO1xuICAgIH1cblxuICAgIGZvciAobGV0IHQgPSAxNjsgdCA8IDgwOyArK3QpIHtcbiAgICAgIFdbdF0gPSBST1RMKFdbdCAtIDNdIF4gV1t0IC0gOF0gXiBXW3QgLSAxNF0gXiBXW3QgLSAxNl0sIDEpO1xuICAgIH1cblxuICAgIGxldCBhID0gSFswXTtcbiAgICBsZXQgYiA9IEhbMV07XG4gICAgbGV0IGMgPSBIWzJdO1xuICAgIGxldCBkID0gSFszXTtcbiAgICBsZXQgZSA9IEhbNF07XG5cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDgwOyArK3QpIHtcbiAgICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKHQgLyAyMCk7XG4gICAgICBjb25zdCBUID0gUk9UTChhLCA1KSArIGYocywgYiwgYywgZCkgKyBlICsgS1tzXSArIFdbdF0gPj4+IDA7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gVDtcbiAgICB9XG5cbiAgICBIWzBdID0gSFswXSArIGEgPj4+IDA7XG4gICAgSFsxXSA9IEhbMV0gKyBiID4+PiAwO1xuICAgIEhbMl0gPSBIWzJdICsgYyA+Pj4gMDtcbiAgICBIWzNdID0gSFszXSArIGQgPj4+IDA7XG4gICAgSFs0XSA9IEhbNF0gKyBlID4+PiAwO1xuICB9XG5cbiAgcmV0dXJuIFtIWzBdID4+IDI0ICYgMHhmZiwgSFswXSA+PiAxNiAmIDB4ZmYsIEhbMF0gPj4gOCAmIDB4ZmYsIEhbMF0gJiAweGZmLCBIWzFdID4+IDI0ICYgMHhmZiwgSFsxXSA+PiAxNiAmIDB4ZmYsIEhbMV0gPj4gOCAmIDB4ZmYsIEhbMV0gJiAweGZmLCBIWzJdID4+IDI0ICYgMHhmZiwgSFsyXSA+PiAxNiAmIDB4ZmYsIEhbMl0gPj4gOCAmIDB4ZmYsIEhbMl0gJiAweGZmLCBIWzNdID4+IDI0ICYgMHhmZiwgSFszXSA+PiAxNiAmIDB4ZmYsIEhbM10gPj4gOCAmIDB4ZmYsIEhbM10gJiAweGZmLCBIWzRdID4+IDI0ICYgMHhmZiwgSFs0XSA+PiAxNiAmIDB4ZmYsIEhbNF0gPj4gOCAmIDB4ZmYsIEhbNF0gJiAweGZmXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhMTsiLCAiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xuY29uc3QgdjUgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG5leHBvcnQgZGVmYXVsdCB2NTsiLCAiaW1wb3J0IHsgTWFya2Rvd25WaWV3LCBUZXh0RmlsZVZpZXcsIFZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFJFRkVSRU5DRV9SRUdFWCwgQUNUSU9OX1RZUEUsIFNWR19IT1ZFUl9DT0xPUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgc3RhcnRSZWZlcmVuY2VFZmZlY3QsIGVuZFJlZmVyZW5jZUN1cnNvckVmZmVjdCB9IGZyb20gXCIuL2VmZmVjdHNcIjtcbmltcG9ydCB7XG5cdGdldEhvdmVyZWRDdXJzb3IsXG5cdHVwZGF0ZUhvdmVyZWRDdXJzb3IsXG5cdHJlbW92ZUhvdmVyZWRDdXJzb3IsXG5cdGdldEhvdmVyLFxufSBmcm9tIFwiLi9zdGF0ZVwiO1xuaW1wb3J0IHsgdXBkYXRlUmVmZXJlbmNlQ29sb3IgfSBmcm9tIFwiLi9yZWZlcmVuY2VzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVkaXRvclBvc2l0aW9uKHBvc2l0aW9uU3RyaW5nOiBzdHJpbmcpIHtcblx0bGV0IFtsaW5lLCBjaF0gPSBwb3NpdGlvblN0cmluZy5zcGxpdChcIixcIik7XG5cdHJldHVybiB7IGxpbmU6IHBhcnNlSW50KGxpbmUpLCBjaDogcGFyc2VJbnQoY2gpIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRTdHJpbmcoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWzooKV0vZywgZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gXCIlXCIgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVVSSUNvbXBvbmVudFN0cmluZyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XG5cdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoXG5cdFx0c3RyLnJlcGxhY2UoLyUzQS9nLCBcIjpcIikucmVwbGFjZSgvJTI4L2csIFwiKFwiKS5yZXBsYWNlKC8lMjkvZywgXCIpXCIpXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVVJJKFxuXHRkYXRhU3RyaW5nOiBzdHJpbmdcbik6IFtcblx0cHJlZml4OiBzdHJpbmcsXG5cdHRleHQ6IHN0cmluZyxcblx0c3VmZml4OiBzdHJpbmcsXG5cdGZpbGU6IHN0cmluZyxcblx0ZnJvbTogbnVtYmVyLFxuXHR0bzogbnVtYmVyLFxuXHRwb3J0YWw6IHN0cmluZyxcblx0dG9nZ2xlOiBzdHJpbmdcbl0ge1xuXHRsZXQgW3ByZWZpeCwgdGV4dCwgc3VmZml4LCBmaWxlLCBmcm9tLCB0bywgcG9ydGFsLCB0b2dnbGVdID1cblx0XHRkYXRhU3RyaW5nLnNwbGl0KFwiOlwiKTtcblx0cHJlZml4ID0gZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nKHByZWZpeCk7XG5cdHRleHQgPSBkZWNvZGVVUklDb21wb25lbnRTdHJpbmcodGV4dCk7XG5cdHN1ZmZpeCA9IGRlY29kZVVSSUNvbXBvbmVudFN0cmluZyhzdWZmaXgpO1xuXHRmaWxlID0gZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nKGZpbGUpO1xuXHRmcm9tID0gZGVjb2RlVVJJQ29tcG9uZW50U3RyaW5nKGZyb20pO1xuXHR0byA9IGRlY29kZVVSSUNvbXBvbmVudFN0cmluZyh0byk7XG5cdGlmIChwb3J0YWwpIHBvcnRhbCA9IGRlY29kZVVSSUNvbXBvbmVudFN0cmluZyhwb3J0YWwpO1xuXHR0b2dnbGUgPSBkZWNvZGVVUklDb21wb25lbnRTdHJpbmcodG9nZ2xlKTtcblxuXHRyZXR1cm4gW1xuXHRcdHByZWZpeCxcblx0XHR0ZXh0LFxuXHRcdHN1ZmZpeCxcblx0XHRmaWxlLFxuXHRcdHBhcnNlSW50KGZyb20pLFxuXHRcdHBhcnNlSW50KHRvKSxcblx0XHRwb3J0YWwsXG5cdFx0dG9nZ2xlLFxuXHRdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlZml4QW5kU3VmZml4KGRvY3VtZW50OiBzdHJpbmcsIGZyb206IG51bWJlciwgdG86IG51bWJlcikge1xuXHRsZXQgcHJlZml4ID0gZG9jdW1lbnRcblx0XHQuc2xpY2UoZnJvbSAtIDI1LCBmcm9tKVxuXHRcdC5zcGxpdChcIlxcblwiKVxuXHRcdC5zbGljZSgtMSlbMF07XG5cdC8vIC5zbGljZShmcm9tIC0gMjUgPiAwID8gZnJvbSAtIDI1IDogMCwgZnJvbSlcblxuXHRsZXQgc3VmZml4ID0gZG9jdW1lbnQuc2xpY2UodG8sIHRvICsgMjUpLnNwbGl0KFwiXFxuXCIpWzBdO1xuXHRyZXR1cm4geyBwcmVmaXgsIHN1ZmZpeCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFRleHRQb3NpdGlvbnMoXG5cdHRleHQ6IHN0cmluZyxcblx0c2VhcmNoVGVybTogc3RyaW5nLFxuXHRwcmVmaXg6IHN0cmluZyA9IFwiXCIsXG5cdHN1ZmZpeDogc3RyaW5nID0gXCJcIlxuKSB7XG5cdGxldCByb2xsaW5nSW5kZXggPSAwO1xuXG5cdGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmU6IHN0cmluZywgaTogbnVtYmVyKSA9PiB7XG5cdFx0bGV0IGRhdGEgPSB7IGxpbmUsIGluZGV4OiByb2xsaW5nSW5kZXgsIGxlbmd0aDogbGluZS5sZW5ndGggKyAxLCBpIH07XG5cdFx0cm9sbGluZ0luZGV4ICs9IGRhdGEubGVuZ3RoO1xuXHRcdHJldHVybiBkYXRhO1xuXHR9KTtcblxuXHRpZiAodGV4dC5pbmNsdWRlcyhwcmVmaXggKyBzZWFyY2hUZXJtICsgc3VmZml4KSkge1xuXHRcdGxldCBtYXRjaEluZGV4ID0gdGV4dC5pbmRleE9mKHByZWZpeCArIHNlYXJjaFRlcm0gKyBzdWZmaXgpO1xuXHRcdGxldCBzdGFydEluZGV4ID1cblx0XHRcdGxpbmVzLmZpbmRJbmRleCgobGluZTogYW55KSA9PiBsaW5lLmluZGV4ID4gbWF0Y2hJbmRleCArIHByZWZpeC5sZW5ndGgpIC1cblx0XHRcdDE7XG5cdFx0bGV0IGVuZEluZGV4ID1cblx0XHRcdGxpbmVzLmZpbmRJbmRleChcblx0XHRcdFx0KGxpbmU6IGFueSkgPT5cblx0XHRcdFx0XHRsaW5lLmluZGV4ID4gbWF0Y2hJbmRleCArIHByZWZpeC5sZW5ndGggKyBzZWFyY2hUZXJtLmxlbmd0aFxuXHRcdFx0KSAtIDE7XG5cblx0XHRpZiAoc3RhcnRJbmRleCA9PSAtMikgc3RhcnRJbmRleCA9IGxpbmVzLmxlbmd0aCAtIDE7XG5cdFx0aWYgKGVuZEluZGV4ID09IC0yKSBlbmRJbmRleCA9IGxpbmVzLmxlbmd0aCAtIDE7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cmFuZ2VTdGFydDoge1xuXHRcdFx0XHRsaW5lOiBzdGFydEluZGV4LFxuXHRcdFx0XHRjaDogbWF0Y2hJbmRleCArIHByZWZpeC5sZW5ndGggLSBsaW5lc1tzdGFydEluZGV4XS5pbmRleCxcblx0XHRcdH0sXG5cdFx0XHRyYW5nZUVuZDoge1xuXHRcdFx0XHRsaW5lOiBlbmRJbmRleCxcblx0XHRcdFx0Y2g6XG5cdFx0XHRcdFx0bWF0Y2hJbmRleCArXG5cdFx0XHRcdFx0cHJlZml4Lmxlbmd0aCArXG5cdFx0XHRcdFx0c2VhcmNoVGVybS5sZW5ndGggLVxuXHRcdFx0XHRcdGxpbmVzW2VuZEluZGV4XS5pbmRleCxcblx0XHRcdH0sXG5cdFx0XHRsaW5lcyxcblx0XHR9O1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdEl0ZW1MZW5ndGgobGluZTogc3RyaW5nKSB7XG5cdC8vIE1hdGNoZXMgbGluZXMgdGhhdCBzdGFydCB3aXRoIGEgYnVsbGV0IChlaXRoZXIgLSwgKiwgb3IgKyBmb2xsb3dlZCBieSBhIHNwYWNlKVxuXHRjb25zdCBidWxsZXRSZWdleCA9IC9eKFxccypbLSorXVxccyspLztcblxuXHQvLyBNYXRjaGVzIGxpbmVzIHRoYXQgc3RhcnQgd2l0aCBhIG51bWJlciBmb2xsb3dlZCBieSBhIGRvdCBhbmQgYSBzcGFjZSAobGlrZSBcIjEuIFwiKVxuXHRjb25zdCBudW1iZXJSZWdleCA9IC9eKFxccypcXGQrXFwuXFxzKykvO1xuXG5cdGxldCBtYXRjaCA9IGxpbmUubWF0Y2goYnVsbGV0UmVnZXgpIHx8IGxpbmUubWF0Y2gobnVtYmVyUmVnZXgpO1xuXHRyZXR1cm4gbWF0Y2ggPyBtYXRjaFswXS5sZW5ndGggOiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDdXJzb3JQb3NpdGlvbkF0RGF0YXN0cmluZyhldnQ6IEV2ZW50KToge1xuXHRtYXRjaGVkOiBib29sZWFuO1xuXHRzcGFuOiBIVE1MU3BhbkVsZW1lbnQgfCB1bmRlZmluZWQ7XG59IHtcblx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdGNvbnN0IGN1cnNvckZyb20gPSBhY3RpdmVWaWV3Py5lZGl0b3IuZ2V0Q3Vyc29yKFwiZnJvbVwiKTtcblx0Y29uc3QgY3Vyc29yVG8gPSBhY3RpdmVWaWV3Py5lZGl0b3IuZ2V0Q3Vyc29yKFwidG9cIik7XG5cblx0bGV0IG1hdGNoZWQgPSBmYWxzZTtcblx0bGV0IG1hdGNoU3BhbjogSFRNTFNwYW5FbGVtZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXHRpZiAoXG5cdFx0Y3Vyc29yRnJvbSAmJlxuXHRcdGN1cnNvclRvICYmXG5cdFx0Y3Vyc29yRnJvbS5jaCA9PSBjdXJzb3JUby5jaCAmJlxuXHRcdGN1cnNvckZyb20ubGluZSA9PSBjdXJzb3JUby5saW5lXG5cdFx0Ly8gJiZjdXJzb3JGcm9tLmNoIC0gMSA+PSAtMVxuXHQpIHtcblx0XHRjb25zdCBsaW5lVGV4dCA9IGFjdGl2ZVZpZXc/LmVkaXRvci5nZXRMaW5lKGN1cnNvckZyb20ubGluZSk7XG5cblx0XHQvLyBmcm9tIHBvc3NpYmxlIHJlZ2V4IG1hdGNoZXMgaW4gbGluZVRleHRcblx0XHRpZiAobGluZVRleHQpIHtcblx0XHRcdGNvbnN0IG1hdGNoZXMgPSBbLi4ubGluZVRleHQubWF0Y2hBbGwoUkVGRVJFTkNFX1JFR0VYKV07XG5cdFx0XHRtYXRjaGVzLmZvckVhY2goKG1hdGNoKSA9PiB7XG5cdFx0XHRcdGlmIChtYXRjaC5pbmRleD8udG9TdHJpbmcoKSkge1xuXHRcdFx0XHRcdGNvbnN0IHN0YXJ0OiBudW1iZXIgPSBtYXRjaC5pbmRleDtcblx0XHRcdFx0XHRjb25zdCBlbmQ6IG51bWJlciA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChlbmQgPT0gY3Vyc29yVG8uY2ggJiYgZXZ0LnRhcmdldCkge1xuXHRcdFx0XHRcdFx0Y29uc3QgZGF0YVN0cmluZyA9IG1hdGNoWzFdO1xuXHRcdFx0XHRcdFx0Ly8gZ2V0IHRoZSBodG1sIGVsZW1lbnQgYXQgdGhlIG1hdGNoIGxvY2F0aW9uXG5cdFx0XHRcdFx0XHRsZXQgY2hlY2tDb250YWluZXIgPSBldnQudGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudDtcblx0XHRcdFx0XHRcdGlmICghY2hlY2tDb250YWluZXIpXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgbm90IGluc3RhbmNlIG9mIEVsZW1lbnRcIik7XG5cdFx0XHRcdFx0XHRsZXQgY29udGFpbmVyID0gZXZ0LnRhcmdldCBhcyBFbGVtZW50O1xuXG5cdFx0XHRcdFx0XHQvLyBmaW5kIGh0bWwgc3BhbiBlbGVtZW50IGluIHRhcmdldCB0aGF0IGhhcyBhIGRhdGEgYXR0cmlidXRlIGVxdWFsIHRvIGNvbnRlbnRzXG5cdFx0XHRcdFx0XHRsZXQgc3BhbiA9IGNvbnRhaW5lcjtcblx0XHRcdFx0XHRcdGlmICghc3Bhbi5nZXRBdHRyaWJ1dGUoXCJkYXRhXCIpKVxuXHRcdFx0XHRcdFx0XHRzcGFuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXG5cdFx0XHRcdFx0XHRcdFx0YHNwYW5bZGF0YT1cIiR7ZGF0YVN0cmluZ31cIl1gXG5cdFx0XHRcdFx0XHRcdCkgYXMgSFRNTFNwYW5FbGVtZW50O1xuXG5cdFx0XHRcdFx0XHRpZiAoc3BhbiAmJiBzcGFuIGluc3RhbmNlb2YgSFRNTFNwYW5FbGVtZW50KSB7XG5cdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiRm91bmQgc3BhbiBlbGVtZW50OlwiLCBzcGFuKTtcblx0XHRcdFx0XHRcdFx0Ly8gRG8gc29tZXRoaW5nIHdpdGggdGhlIHNwYW4gZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHRtYXRjaFNwYW4gPSBzcGFuO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJTcGFuIGVsZW1lbnQgbm90IGZvdW5kXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB7IG1hdGNoZWQsIHNwYW46IG1hdGNoU3BhbiB9O1xufVxuXG4vLyBSZW1vdmUgYW4gZXhpc3RtYWluaW5nIGhpZ2xpZ2h0ZWQgcmVmZXJlbmNlXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlSG92ZXJlZEN1cnNvcih1c2VyOiBzdHJpbmcpIHtcblx0aWYgKGdldEhvdmVyZWRDdXJzb3IoKSkge1xuXHRcdC8vIGN1cnNvcnMgbm90IGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlciBhY3Rpb25cblx0XHRsZXQgbm9uQ3Vyc29ycyA9IGdldEhvdmVyZWRDdXJzb3IoKVxuXHRcdFx0LmZpbHRlcigoZWxlbWVudDogYW55KSA9PiB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50LnVzZXIgIT09IHVzZXI7XG5cdFx0XHR9KVxuXHRcdFx0Lm1hcCgoZWxlbWVudDogYW55KSA9PiBlbGVtZW50LmN1cnNvci5jbG9zZXN0KFwic3BhblwiKSk7XG5cblx0XHQvLyB3aGl0ZSBiYWNrZ3JvdW5kIGlmIGN1cnNvcnMgYXJlIG5vdCBhc3NvY2lhdGVkIHdpdGggdGhlIHVzZXIgYWN0aW9uXG5cdFx0Z2V0SG92ZXJlZEN1cnNvcigpXG5cdFx0XHQuZmlsdGVyKChlbGVtZW50OiBhbnkpID0+IGVsZW1lbnQudXNlciA9PT0gdXNlcilcblx0XHRcdC5mb3JFYWNoKChlbGVtZW50OiBhbnkpID0+IHtcblx0XHRcdFx0aWYgKCFub25DdXJzb3JzLmluY2x1ZGVzKGVsZW1lbnQuY3Vyc29yLmNsb3Nlc3QoXCJzcGFuXCIpKSkge1xuXHRcdFx0XHRcdGxldCBzdmcgPSBlbGVtZW50LmN1cnNvcjtcblx0XHRcdFx0XHRpZiAoIXN2ZykgdGhyb3cgbmV3IEVycm9yKFwiU1ZHIG5vdCBmb3VuZFwiKTtcblx0XHRcdFx0XHRpZiAoc3ZnLmNsYXNzTGlzdC5jb250YWlucyhcInJlZmVyZW5jZS1pY29uXCIpKVxuXHRcdFx0XHRcdFx0c3ZnLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwid2hpdGVcIik7XG5cdFx0XHRcdFx0XHRzdmcuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxlbWVudC5jdXJzb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuXHRcdFx0XHRcdC8vIGVsZW1lbnQuY3Vyc29yLnN0eWxlLmJveFNoYWRvdyA9IFwibm9uZVwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdHJlbW92ZUhvdmVyZWRDdXJzb3IodXNlcik7XG5cdH1cbn1cbiIsICJpbXBvcnQge1xuXHRUQWJzdHJhY3RGaWxlLFxuXHRURmlsZSxcblx0V29ya3NwYWNlLFxuXHRXb3Jrc3BhY2VMZWFmLFxuXHRXb3Jrc3BhY2VSb290LFxuXHRXb3Jrc3BhY2VTcGxpdCxcblx0V29ya3NwYWNlVGFicyxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBnZXRUaGF0IH0gZnJvbSBcIi4vc3RhdGVcIjtcbmltcG9ydCB7IGdldENvbnRhaW5lckVsZW1lbnQgfSBmcm9tIFwiLi9yZWZlcmVuY2VzXCI7XG5cbmZ1bmN0aW9uIGNvbGxlY3RMZWF2ZXNCeVRhYihcblx0c3BsaXQ6IFdvcmtzcGFjZVNwbGl0LFxuXHRyZXN1bHQ6IFtXb3Jrc3BhY2VMZWFmW11dIHwgW10gPSBbXVxuKSB7XG5cdC8vIEB0cy1pZ25vcmVcblx0Y29uc3QgdHlwZSA9IHNwbGl0LnR5cGU7XG5cdGlmICghdHlwZSkgdGhyb3cgbmV3IEVycm9yKFwiU3BsaXQgdHlwZSBub3QgZm91bmRcIik7XG5cblx0aWYgKHR5cGUgPT0gXCJ0YWJzXCIgfHwgdHlwZSA9PSBcInNwbGl0XCIpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBzcGxpdC5jaGlsZHJlbjtcblx0XHRpZiAoIWNoaWxkcmVuKSB0aHJvdyBuZXcgRXJyb3IoXCJTcGxpdCBjaGlsZHJlbiBub3QgZm91bmRcIik7XG5cblx0XHRpZiAoY2hpbGRyZW4pIHtcblx0XHRcdGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcblx0XHRcdFx0bGV0IGVtcHR5TGlzdDogV29ya3NwYWNlTGVhZltdID0gW107XG5cblx0XHRcdFx0Y29sbGVjdExlYXZlc0J5VGFiKGNoaWxkLCByZXN1bHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyByZXN1bHQucHVzaChbXSk7XG5cdFx0Ly8gY29sbGVjdExlYXZlc0J5VGFiKGNoaWxkcmVuLCByZXN1bHQpO1xuXHR9IGVsc2UgaWYgKHR5cGUgPT0gXCJsZWFmXCIpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgcGFyZW50U3BsaXRJZCA9IHNwbGl0LnBhcmVudC5pZDtcblx0XHRpZiAoIXBhcmVudFNwbGl0SWQpIHRocm93IG5ldyBFcnJvcihcIlNwbGl0IHBhcmVudCBpZCBub3QgZm91bmRcIik7XG5cblx0XHQvLyBmaW5kIGFycmF5IGluZGV4IGZvciBzcGxpdCB3aXRoIGlkIHBhcmVudFNwbGl0SWRcblx0XHRsZXQgaWR4ID0gcmVzdWx0LmZpbmRJbmRleCgodGFiOiBXb3Jrc3BhY2VMZWFmW10pID0+IHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbnN0IHRhYklkID0gdGFiWzBdLnBhcmVudC5pZDtcblx0XHRcdHJldHVybiB0YWJJZCA9PSBwYXJlbnRTcGxpdElkO1xuXHRcdH0pO1xuXHRcdGlmIChpZHggPT0gLTEpIHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdHJlc3VsdC5wdXNoKFtzcGxpdCBhcyBXb3Jrc3BhY2VMZWFmXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtpZHhdLnB1c2goc3BsaXQgYXMgV29ya3NwYWNlTGVhZik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gaWYgKGNoaWxkcmVuKSB7XG5cdC8vIFx0Zm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuXHQvLyBcdFx0Y29sbGVjdExlYXZlc0J5VGFiKGNoaWxkLCByZXN1bHQpO1xuXHQvLyBcdH1cblx0Ly8gfVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdExlYXZlc0J5VGFiSGVscGVyKCkge1xuXHRjb25zdCB7IHdvcmtzcGFjZSB9ID0gZ2V0VGhhdCgpO1xuXHRjb25zdCBjdXJyTGVhZjogV29ya3NwYWNlTGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKCk7XG5cdC8vIGNvbnN0IHJvb3RTcGxpdCA9IGZpbmRSb290U3BsaXQoY3VyckxlYWYpO1xuXHRjb25zdCByb290U3BsaXQ6IFdvcmtzcGFjZVNwbGl0ID0gY3VyckxlYWYuZ2V0Um9vdCgpO1xuXHRyZXR1cm4gY29sbGVjdExlYXZlc0J5VGFiKHJvb3RTcGxpdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50VGFiSW5kZXgobGVhdmVzQnlUYWI6IGFueVtdLCBzcGFuOiBIVE1MU3BhbkVsZW1lbnQpIHtcblx0bGV0IHdvcmtzcGFjZVRhYiA9IHNwYW4uY2xvc2VzdChcIi53b3Jrc3BhY2UtdGFic1wiKTtcblx0bGV0IGN1cnJUYWJJZHggPSBsZWF2ZXNCeVRhYi5maW5kSW5kZXgoKHRhYjogV29ya3NwYWNlTGVhZltdKSA9PiB7XG5cdFx0Y29uc3QgbGVhZlRhYiA9IHRhYlswXS52aWV3LmNvbnRhaW5lckVsLmNsb3Nlc3QoXCIud29ya3NwYWNlLXRhYnNcIik7XG5cdFx0cmV0dXJuIGxlYWZUYWIgPT0gd29ya3NwYWNlVGFiO1xuXHR9KTtcblx0cmV0dXJuIGN1cnJUYWJJZHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGphY2VudFRhYnMoXG5cdGxlYXZlc0J5VGFiOiBhbnlbXSxcblx0Y3VyclRhYklkeDogbnVtYmVyLFxuXHRmaWxlOiBzdHJpbmdcbikge1xuXHRsZXQgcmlnaHRBZGphY2VudFRhYjogYW55W10gPSBbXTtcblx0bGV0IGxlZnRBZGphY2VudFRhYjogYW55W10gPSBbXTtcblx0bGV0IGFkamFjZW50VGFiczogYW55W10gPSBbXTtcblxuXHRpZiAobGVhdmVzQnlUYWJbY3VyclRhYklkeCArIDFdKSB7XG5cdFx0cmlnaHRBZGphY2VudFRhYiA9IGxlYXZlc0J5VGFiW2N1cnJUYWJJZHggKyAxXTtcblx0XHRhZGphY2VudFRhYnMgPSBbLi4uYWRqYWNlbnRUYWJzLCAuLi5yaWdodEFkamFjZW50VGFiXTtcblx0fVxuXHRpZiAobGVhdmVzQnlUYWJbY3VyclRhYklkeCAtIDFdKSB7XG5cdFx0bGVmdEFkamFjZW50VGFiID0gbGVhdmVzQnlUYWJbY3VyclRhYklkeCAtIDFdO1xuXHRcdGFkamFjZW50VGFicyA9IFsuLi5hZGphY2VudFRhYnMsIC4uLmxlZnRBZGphY2VudFRhYl07XG5cdH1cblxuXHRsZXQgaW5kZXggPSBhZGphY2VudFRhYnMuZmluZEluZGV4KFxuXHRcdCh4OiBXb3Jrc3BhY2VMZWFmKSA9PiB4LmdldFZpZXdTdGF0ZSgpLnN0YXRlLmZpbGUgPT0gZmlsZVxuXHQpO1xuXHRyZXR1cm4geyBhZGphY2VudFRhYnMsIHJpZ2h0QWRqYWNlbnRUYWIsIGxlZnRBZGphY2VudFRhYiwgaW5kZXggfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5GaWxlSW5BZGphY2VudFRhYihcblx0bGVhdmVzQnlUYWI6IGFueVtdLFxuXHRjdXJyVGFiSWR4OiBudW1iZXIsXG5cdGZpbGU6IHN0cmluZyxcblx0dHlwZT86IHN0cmluZ1xuKSB7XG5cdGxldCB7IGFkamFjZW50VGFicywgcmlnaHRBZGphY2VudFRhYiwgbGVmdEFkamFjZW50VGFiIH0gPSBnZXRBZGphY2VudFRhYnMoXG5cdFx0bGVhdmVzQnlUYWIsXG5cdFx0Y3VyclRhYklkeCxcblx0XHRmaWxlXG5cdCk7XG5cblx0bGV0IGFsbFRhYk5hbWVzID0gbGVhdmVzQnlUYWIubWFwKCh0YWI6IFdvcmtzcGFjZUxlYWZbXSkgPT5cblx0XHR0YWIubWFwKCh4OiBXb3Jrc3BhY2VMZWFmKSA9PiB4LmdldFZpZXdTdGF0ZSgpLnN0YXRlLmZpbGUpXG5cdCk7XG5cdGxldCByaWdodEFkamFjZW50VGFiTmFtZXMgPSByaWdodEFkamFjZW50VGFiLm1hcChcblx0XHQoeDogV29ya3NwYWNlTGVhZikgPT4geC5nZXRWaWV3U3RhdGUoKS5zdGF0ZS5maWxlXG5cdCk7XG5cdGxldCBsZWZ0QWRqYWNlbnRUYWJOYW1lcyA9IGxlZnRBZGphY2VudFRhYi5tYXAoXG5cdFx0KHg6IFdvcmtzcGFjZUxlYWYpID0+IHguZ2V0Vmlld1N0YXRlKCkuc3RhdGUuZmlsZVxuXHQpO1xuXHRjb25zdCB7IHdvcmtzcGFjZSB9ID0gZ2V0VGhhdCgpO1xuXHRpZiAoXG5cdFx0YWxsVGFiTmFtZXNcblx0XHRcdC5maWx0ZXIoKHYsIGkpID0+IGkgIT0gY3VyclRhYklkeClcblx0XHRcdC5mbGF0KClcblx0XHRcdC5pbmNsdWRlcyhmaWxlKSAmJlxuXHRcdCFyaWdodEFkamFjZW50VGFiTmFtZXMuaW5jbHVkZXMoZmlsZSkgJiZcblx0XHQhbGVmdEFkamFjZW50VGFiTmFtZXMuaW5jbHVkZXMoZmlsZSlcblx0KSB7XG5cdFx0Ly8gZmlsZSBleGlzdHMsIG5vdCBhZGphY2VudCBsZWZ0IG9yIHJpZ2h0IHRhYlxuXHRcdGxldCBjdXJyZW50VGFiTmFtZXM6IGFueVtdID0gW107XG5cdFx0bGV0IGN1cnJlbnRUYWI6IGFueVtdID0gW107XG5cdFx0YWxsVGFiTmFtZXMuZm9yRWFjaCgodGFiTmFtZXMsIGkpID0+IHtcblx0XHRcdGlmIChcblx0XHRcdFx0dGFiTmFtZXMgIT0gcmlnaHRBZGphY2VudFRhYk5hbWVzICYmXG5cdFx0XHRcdHRhYk5hbWVzICE9IGxlZnRBZGphY2VudFRhYk5hbWVzICYmXG5cdFx0XHRcdGN1cnJUYWJJZHggIT0gaVxuXHRcdFx0KSB7XG5cdFx0XHRcdGlmICh0YWJOYW1lcy5pbmNsdWRlcyhmaWxlKSkge1xuXHRcdFx0XHRcdGN1cnJlbnRUYWJOYW1lcyA9IHRhYk5hbWVzO1xuXHRcdFx0XHRcdGN1cnJlbnRUYWIgPSBsZWF2ZXNCeVRhYltpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgb3JpZ2luYWxMZWFmID0gY3VycmVudFRhYi5maWx0ZXIoXG5cdFx0XHQodCkgPT4gdC5jb250YWluZXJFbC5zdHlsZS5kaXNwbGF5ICE9IFwibm9uZVwiXG5cdFx0KVswXTtcblx0XHRsZXQgbGVhZiA9IGN1cnJlbnRUYWJbY3VycmVudFRhYk5hbWVzLmluZGV4T2YoZmlsZSldO1xuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJvcGVuIGZpbGUgbmV3IHRhYlwiKTtcblxuXHRcdHJldHVybiB7IG5ld0xlYWY6IGxlYWYsIHRlbXA6IGZhbHNlLCBvcmlnaW5hbExlYWYgfTtcblx0fSBlbHNlIGlmIChyaWdodEFkamFjZW50VGFiTmFtZXMuaW5jbHVkZXMoZmlsZSkpIHtcblx0XHQvLyBmaWxlIGV4aXN0cyBpbiByaWdodCB0YWJcblx0XHRjb25zdCBvcmlnaW5hbExlYWYgPSByaWdodEFkamFjZW50VGFiLmZpbHRlcihcblx0XHRcdCh0KSA9PiB0LmNvbnRhaW5lckVsLnN0eWxlLmRpc3BsYXkgIT0gXCJub25lXCJcblx0XHQpWzBdO1xuXHRcdGxldCBsZWFmID0gcmlnaHRBZGphY2VudFRhYltyaWdodEFkamFjZW50VGFiTmFtZXMuaW5kZXhPZihmaWxlKV07XG5cdFx0d29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XG5cblx0XHRjb25zb2xlLmxvZyhcIm9wZW4gZXhpc3RpbmcgZmlsZSByaWdodCB0YWJcIik7XG5cblx0XHRyZXR1cm4geyBuZXdMZWFmOiBsZWFmLCB0ZW1wOiBmYWxzZSwgb3JpZ2luYWxMZWFmIH07XG5cdH0gZWxzZSBpZiAobGVmdEFkamFjZW50VGFiTmFtZXMuaW5jbHVkZXMoZmlsZSkpIHtcblx0XHQvLyBmaWxlIGV4aXN0cyBpbiBsZWZ0IHRhYlxuXHRcdGNvbnN0IG9yaWdpbmFsTGVhZiA9IGxlZnRBZGphY2VudFRhYi5maWx0ZXIoXG5cdFx0XHQodCkgPT4gdC5jb250YWluZXJFbC5zdHlsZS5kaXNwbGF5ICE9IFwibm9uZVwiXG5cdFx0KVswXTtcblxuXHRcdGxldCBsZWFmID0gbGVmdEFkamFjZW50VGFiW2xlZnRBZGphY2VudFRhYk5hbWVzLmluZGV4T2YoZmlsZSldO1xuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJvcGVuIGV4aXN0aW5nIGZpbGUgbGVmdCB0YWJcIik7XG5cblx0XHRyZXR1cm4geyBuZXdMZWFmOiBsZWFmLCB0ZW1wOiBmYWxzZSwgb3JpZ2luYWxMZWFmIH07XG5cdH0gZWxzZSBpZiAocmlnaHRBZGphY2VudFRhYi5sZW5ndGggPiAwKSB7XG5cdFx0Ly8gdGhlcmUgZXhpc3RzIGEgcmlnaHQgdGFiXG5cdFx0Y29uc3Qgb3JpZ2luYWxMZWFmID0gcmlnaHRBZGphY2VudFRhYi5maWx0ZXIoXG5cdFx0XHQodCkgPT4gdC5jb250YWluZXJFbC5zdHlsZS5kaXNwbGF5ICE9IFwibm9uZVwiXG5cdFx0KVswXTtcblxuXHRcdGxldCBjdXJyTGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKCk7XG5cdFx0d29ya3NwYWNlLnNldEFjdGl2ZUxlYWYob3JpZ2luYWxMZWFmKTtcblx0XHRsZXQgbmV3TGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xuXHRcdGF3YWl0IG9wZW5GaWxlSW5MZWFmKG5ld0xlYWYsIGZpbGUpO1xuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKG5ld0xlYWYpO1xuXHRcdHdvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKGN1cnJMZWFmKTtcblxuXHRcdGNvbnNvbGUubG9nKFwib3BlbiBuZXcgZmlsZSByaWdodCB0YWJcIik7XG5cblx0XHRyZXR1cm4geyBuZXdMZWFmLCB0ZW1wOiB0cnVlLCBvcmlnaW5hbExlYWYgfTtcblx0fSBlbHNlIGlmIChsZWZ0QWRqYWNlbnRUYWIubGVuZ3RoID4gMCkge1xuXHRcdC8vIHRoZXJlIGV4aXN0cyBhIGxlZnQgdGFiXG5cdFx0Y29uc3Qgb3JpZ2luYWxMZWFmID0gbGVmdEFkamFjZW50VGFiLmZpbHRlcihcblx0XHRcdCh0KSA9PiB0LmNvbnRhaW5lckVsLnN0eWxlLmRpc3BsYXkgIT0gXCJub25lXCJcblx0XHQpWzBdO1xuXG5cdFx0bGV0IGN1cnJMZWFmID0gd29ya3NwYWNlLmdldExlYWYoKTsgLy8gZ2V0IGN1cnJlbnQgYWN0aXZlIGxlYWZcblx0XHR3b3Jrc3BhY2Uuc2V0QWN0aXZlTGVhZihvcmlnaW5hbExlYWYpOyAvLyBnZXQgdGhlIGxlYWYgaW4gYWRqYWNlbnQgdGFiXG5cdFx0bGV0IG5ld0xlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTsgLy8gY3JlYXRlIGEgbmV3IGxlYWZcblx0XHRhd2FpdCBvcGVuRmlsZUluTGVhZihuZXdMZWFmLCBmaWxlKTsgLy8gbG9hZCBmaWxlIGludG8gbmV3IGxlYWZcblx0XHR3b3Jrc3BhY2UucmV2ZWFsTGVhZihuZXdMZWFmKTsgLy8gcmV2ZWFsIG5ldyBsZWFmXG5cdFx0d29ya3NwYWNlLnNldEFjdGl2ZUxlYWYoY3VyckxlYWYpOyAvLyBzZXQgYWN0aXZlIGxlYWYgYmFjayB0byBvcmlnaW5hbFxuXG5cdFx0Y29uc29sZS5sb2coXCJvcGVuIG5ldyBmaWxlIGxlZnQgdGFiXCIpO1xuXG5cdFx0cmV0dXJuIHsgbmV3TGVhZiwgdGVtcDogdHJ1ZSwgb3JpZ2luYWxMZWFmIH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gbm8gYWRqYWNlbnQgdGFic1xuXHRcdGNvbnN0IGN1cnJMZWFmID0gd29ya3NwYWNlLmdldExlYWYoKTtcblx0XHRsZXQgbmV3TGVhZiA9IHdvcmtzcGFjZS5jcmVhdGVMZWFmQnlTcGxpdChjdXJyTGVhZik7XG5cdFx0YXdhaXQgb3BlbkZpbGVJbkxlYWYobmV3TGVhZiwgZmlsZSk7XG5cblx0XHRjb25zb2xlLmxvZyhcIm9wZW4gbmV3IGZpbGUgbGVmdCB0YWJcIik7XG5cblx0XHRyZXR1cm4geyBuZXdMZWFmLCB0ZW1wOiB0cnVlLCBvcmlnaW5hbExlYWY6IGN1cnJMZWFmIH07XG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5GaWxlSW5MZWFmKGxlYWY6IFdvcmtzcGFjZUxlYWYsIGZpbGU6IHN0cmluZykge1xuXHRsZXQgdGFyZ2V0RmlsZTogVEFic3RyYWN0RmlsZSB8IG51bGwgPVxuXHRcdGdldFRoYXQoKS52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZSk7XG5cdGlmICh0YXJnZXRGaWxlICYmIHRhcmdldEZpbGUgaW5zdGFuY2VvZiBURmlsZSlcblx0XHRhd2FpdCBsZWFmLm9wZW5GaWxlKHRhcmdldEZpbGUsIHsgYWN0aXZlOiBmYWxzZSB9KTtcbn1cbiIsICJpbXBvcnQge1xuXHRzdGF0ZSxcblx0dXBkYXRlQ3Vyc29yLFxuXHR1cGRhdGVIb3Zlcixcblx0Z2V0Q3Vyc29yLFxuXHRnZXRIb3Zlcixcblx0cmVzZXRIb3Zlcixcblx0cmVzZXRDdXJzb3IsXG5cdGdldFRoYXQsXG5cdGdldEJhY2tsaW5rSG92ZXIsXG5cdHVwZGF0ZUJhY2tsaW5rSG92ZXIsXG5cdHJlc2V0QmFja2xpbmtIb3Zlcixcblx0dXBkYXRlSG92ZXJlZEN1cnNvcixcbn0gZnJvbSBcIi4vc3RhdGVcIjtcbmltcG9ydCB7IEFDVElPTl9UWVBFLCBSRUZFUkVOQ0VfUkVHRVggfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7XG5cdGNvbGxlY3RMZWF2ZXNCeVRhYkhlbHBlcixcblx0Z2V0Q3VycmVudFRhYkluZGV4LFxuXHRvcGVuRmlsZUluQWRqYWNlbnRUYWIsXG59IGZyb20gXCIuL3dvcmtzcGFjZVwiO1xuaW1wb3J0IHsgcHJvY2Vzc1VSSSwgZmluZFRleHRQb3NpdGlvbnMgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgTWFya2Rvd25WaWV3LCBXb3Jrc3BhY2UsIFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7XG5cdGRlZmF1bHRIaWdobGlnaHRTZWxlY3Rpb24sXG5cdGhpZ2hsaWdodFNlbGVjdGlvbixcblx0cmVtb3ZlSGlnaGxpZ2h0LFxuXHRyZW1vdmVIaWdobGlnaHRzLFxufSBmcm9tIFwiLi9tYXJrXCI7XG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7XG5cdGdldEJhY2tsaW5rQ29udGFpbmVyLFxuXHRnZXRDb250YWluZXJFbGVtZW50LFxuXHRnZXRNYXJrZG93blZpZXcsXG59IGZyb20gXCIuL3JlZmVyZW5jZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVkaXRvclZpZXcobGVhZjogV29ya3NwYWNlTGVhZikge1xuXHRpZiAoIWxlYWYpIHJldHVybiBudWxsO1xuXHRjb25zdCB2aWV3ID0gbGVhZi52aWV3O1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0Y29uc3QgZWRpdG9yID0gdmlldy5zb3VyY2VNb2RlPy5jbUVkaXRvcjtcblxuXHQvLyAnZWRpdG9yJyBoZXJlIGlzIGFuIGluc3RhbmNlIG9mICdFZGl0b3InLCBhbiBhYnN0cmFjdGlvbiBvdmVyIENNNSBhbmQgQ002LlxuXHQvLyBDaGVja2luZyBmb3IgJ0NvZGVNaXJyb3InIHdvdWxkIGluZGljYXRlIENNNS5cblx0aWYgKCFlZGl0b3IuQ29kZU1pcnJvciAmJiBlZGl0b3IuY20gaW5zdGFuY2VvZiBFZGl0b3JWaWV3KSB7XG5cdFx0Ly8gWW91IG5vdyBoYXZlIGFjY2VzcyB0byB0aGUgQ29kZU1pcnJvciA2IEVkaXRvclZpZXcgaW5zdGFuY2UuXG5cdFx0Y29uc3QgZWRpdG9yVmlldyA9IGVkaXRvci5jbTtcblxuXHRcdHJldHVybiBlZGl0b3JWaWV3O1xuXG5cdFx0Ly8gWW91IGNhbiBub3cgdXNlIHRoZSBDb2RlTWlycm9yIDYgQVBJIHdpdGggYGVkaXRvclZpZXdgLlxuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjaGVja1NwYW5FbGVtZW50RXhpc3RzKFxuXHRzcGFuOiBIVE1MU3BhbkVsZW1lbnQsXG5cdGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudFxuKTogYm9vbGVhbiB7XG5cdGNvbnN0IHNwYW5FbGVtZW50cyA9IGNvbnRhaW5lckVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3BhblwiKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzcGFuRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoc3BhbkVsZW1lbnRzW2ldID09PSBzcGFuKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNTU1N0cmluZyhjc3M6IHN0cmluZykge1xuXHQvLyBVc2UgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2gga2V5LXZhbHVlIHBhaXJzIGluIHRoZSBDU1Mgc3RyaW5nXG5cdGNvbnN0IGNzc1Byb3BlcnRpZXNSZWdleCA9IC8oW1xcdy1dKylcXHMqOlxccyooW147XSspXFxzKjs/L2c7XG5cblx0Ly8gSW5pdGlhbGl6ZSBhbiBlbXB0eSBvYmplY3QgdG8gc3RvcmUgdGhlIENTUyBwcm9wZXJ0aWVzXG5cdGxldCBjc3NQcm9wZXJ0aWVzT2JqZWN0OiBhbnkgPSB7fTtcblxuXHQvLyBJdGVyYXRlIG92ZXIgYWxsIGtleS12YWx1ZSBwYWlycyBmb3VuZCBieSB0aGUgcmVnZXhcblx0bGV0IG1hdGNoO1xuXHR3aGlsZSAoKG1hdGNoID0gY3NzUHJvcGVydGllc1JlZ2V4LmV4ZWMoY3NzKSkgIT09IG51bGwpIHtcblx0XHQvLyBtYXRjaFsxXSBpcyB0aGUga2V5XG5cdFx0Ly8gbWF0Y2hbMl0gaXMgdGhlIHZhbHVlXG5cdFx0Y3NzUHJvcGVydGllc09iamVjdFttYXRjaFsxXV0gPSBtYXRjaFsyXTtcblx0fVxuXG5cdHJldHVybiBjc3NQcm9wZXJ0aWVzT2JqZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkobWlsbGlzZWNvbmRzOiBhbnkpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0c2V0VGltZW91dChyZXNvbHZlLCBtaWxsaXNlY29uZHMpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gdGVtcERpcmVjdGlvbkluZGljYXRvcihcblx0bGVhZjogYW55LFxuXHR0ZXh0OiBzdHJpbmcsXG5cdHByZWZpeDogc3RyaW5nLFxuXHRzdWZmaXg6IHN0cmluZyxcblx0ZGF0YVN0cmluZzogc3RyaW5nLFxuXHRpc1NhbWU6IGJvb2xlYW4sXG5cdHVzZXI/OiBzdHJpbmdcbikge1xuXHRpZiAodXNlciA9PT0gQUNUSU9OX1RZUEUuQkFDS0xJTkspIHtcblx0XHQvLyBPaCEgSVx1MjAxOWQgY29tcGFyZSB0aGUgYmJveCBvZiB0aGUgcmFuZ2Vcblx0XHQvLyAod2hpY2ggSSBrbm93IHlvdSBmaW5kIGluIHRoZSBtYXJrIGxheW91dCByb3V0aW5lKVxuXHRcdC8vIHRvIHRoZSBzY3JvbGxUb3AgKyBpbm5lckhlaWdodFxuXHRcdGNvbnN0IGVkaXRvciA9IGdldE1hcmtkb3duVmlldyhsZWFmKS5lZGl0b3I7XG5cdFx0Y29uc3QgYmFja2xpbmtDb250YWluZXIgPSBnZXRCYWNrbGlua0NvbnRhaW5lcihlZGl0b3IpO1xuXG5cdFx0Y29uc3Qgd2luZG93SGVpZ2h0ID0gbGVhZi52aWV3LmNvbnRhaW5lckVsXG5cdFx0XHQucXVlcnlTZWxlY3RvcihcIi5jbS1zY3JvbGxlclwiKVxuXHRcdFx0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblx0XHRjb25zdCBzY3JvbGxUb3AgPVxuXHRcdFx0bGVhZi52aWV3LmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXCIuY20tc2Nyb2xsZXJcIikuc2Nyb2xsVG9wO1xuXHRcdGNvbnN0IHNjcm9sbEJvdHRvbSA9IHNjcm9sbFRvcCArIHdpbmRvd0hlaWdodDtcblxuXHRcdC8vIEdldCB0aGUgZWxlbWVudHMgdGhhdCBhcmUgYmV0d2VlbiB0aGUgdG9wIGFuZCBib3R0b20gb2YgdGhlIHNjcmVlblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRsZXQgY29udGFpbmVyID0gZWRpdG9yLmNvbnRhaW5lckVsO1xuXHRcdGxldCBjb250ZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuY20tY29udGVudFwiKTtcblx0XHRsZXQgcmVmZXJlbmNlcyA9IGNvbnRlbnQucXVlcnlTZWxlY3RvckFsbChcIi5yZWZlcmVuY2UtZGF0YS1zcGFuXCIpO1xuXG5cdFx0bGV0IHZpc2libGVFbGVtZW50czogSFRNTEVsZW1lbnRbXSA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmVmZXJlbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IGJib3ggPSByZWZlcmVuY2VzW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0aWYgKGJib3gudG9wID49IHNjcm9sbFRvcCAmJiBiYm94LmJvdHRvbSA8PSBzY3JvbGxCb3R0b20pIHtcblx0XHRcdFx0dmlzaWJsZUVsZW1lbnRzLnB1c2gocmVmZXJlbmNlc1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IGRhdGFTdHJpbmdzID0gdmlzaWJsZUVsZW1lbnRzLm1hcCgoZWw6IEhUTUxFbGVtZW50KSA9PlxuXHRcdFx0ZWwuZ2V0QXR0cmlidXRlKFwiZGF0YVwiKVxuXHRcdCk7XG5cblx0XHRsZXQgc3RhcnRUb3AgPSBsZWFmLnZpZXcuZWRpdG9yLmdldFNjcm9sbEluZm8oKS50b3A7XG5cblx0XHRpZiAoIWRhdGFTdHJpbmdzLmluY2x1ZGVzKGRhdGFTdHJpbmcpKSB7XG5cdFx0XHRsZXQgcG9zaXRpb25zID0gZmluZFRleHRQb3NpdGlvbnMoXG5cdFx0XHRcdGxlYWYudmlldy5kYXRhLFxuXHRcdFx0XHR0ZXh0LFxuXHRcdFx0XHRwcmVmaXguc2xpY2UoMCwgcHJlZml4Lmxlbmd0aCAtIDEpLFxuXHRcdFx0XHRzdWZmaXguc2xpY2UoMSwgc3VmZml4Lmxlbmd0aClcblx0XHRcdCk7XG5cdFx0XHRpZiAoIXBvc2l0aW9ucykgdGhyb3cgbmV3IEVycm9yKFwiUG9zaXRpb25zIG5vdCBmb3VuZFwiKTtcblx0XHRcdGxldCByYW5nZVN0YXJ0ID0gcG9zaXRpb25zLnJhbmdlU3RhcnQ7XG5cdFx0XHRsZXQgcmFuZ2VFbmQgPSBwb3NpdGlvbnMucmFuZ2VFbmQ7XG5cblx0XHRcdGxlYWYudmlldy5lZGl0b3Iuc2Nyb2xsSW50b1ZpZXcoXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRmcm9tOiBPYmplY3QuYXNzaWduKHJhbmdlU3RhcnQsIHsgY2g6IDAgfSksXG5cdFx0XHRcdFx0dG86IE9iamVjdC5hc3NpZ24ocmFuZ2VFbmQsIHsgY2g6IDAgfSksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRydWVcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHQvLyBpZiAodGVtcCkgcmV0dXJuO1xuXHRcdFx0bGV0IGVuZFRvcCA9IGxlYWYudmlldy5lZGl0b3IuZ2V0U2Nyb2xsSW5mbygpLnRvcDtcblx0XHRcdGNvbnNvbGUubG9nKGVuZFRvcCk7XG5cblx0XHRcdGxldCBjb250YWluZXIgPSBsZWFmLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXCIudmlldy1jb250ZW50XCIpO1xuXHRcdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJuby1zaGFkb3dcIik7XG5cdFx0XHRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcIm5ldy1zaGFkb3dcIik7XG5cdFx0XHRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcInRvcC1zaGFkb3dcIik7XG5cdFx0XHRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImJvdHRvbS1zaGFkb3dcIik7XG5cblx0XHRcdGlmIChzdGFydFRvcCA9PT0gZW5kVG9wICYmIGlzU2FtZSkge1xuXHRcdFx0XHRjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vLXNoYWRvd1wiKTtcblx0XHRcdH0gZWxzZSBpZiAoc3RhcnRUb3AgPT09IGVuZFRvcCAmJiAhaXNTYW1lKSB7XG5cdFx0XHRcdGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibmV3LXNoYWRvd1wiKTtcblx0XHRcdH0gZWxzZSBpZiAoc3RhcnRUb3AgPCBlbmRUb3ApIHtcblx0XHRcdFx0Ly8gc2hvdyBtYXJrIGFib3ZlXG5cdFx0XHRcdGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidG9wLXNoYWRvd1wiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHNob3cgbWFyayBiZWxvd1xuXHRcdFx0XHRjb250YWluZXIuY2xhc3NMaXN0LmFkZChcImJvdHRvbS1zaGFkb3dcIik7XG5cdFx0XHR9XG5cdFx0fSwgMjUpO1xuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gT2ghIElcdTIwMTlkIGNvbXBhcmUgdGhlIGJib3ggb2YgdGhlIHJhbmdlXG5cdC8vICh3aGljaCBJIGtub3cgeW91IGZpbmQgaW4gdGhlIG1hcmsgbGF5b3V0IHJvdXRpbmUpXG5cdC8vIHRvIHRoZSBzY3JvbGxUb3AgKyBpbm5lckhlaWdodFxuXHRjb25zdCBlZGl0b3IgPSBnZXRNYXJrZG93blZpZXcobGVhZikuZWRpdG9yO1xuXHRjb25zdCBiYWNrbGlua0NvbnRhaW5lciA9IGdldEJhY2tsaW5rQ29udGFpbmVyKGVkaXRvcik7XG5cblx0Y29uc3Qgd2luZG93SGVpZ2h0ID0gbGVhZi52aWV3LmNvbnRhaW5lckVsXG5cdFx0LnF1ZXJ5U2VsZWN0b3IoXCIuY20tc2Nyb2xsZXJcIilcblx0XHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXHRjb25zdCBzY3JvbGxUb3AgPVxuXHRcdGxlYWYudmlldy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKFwiLmNtLXNjcm9sbGVyXCIpLnNjcm9sbFRvcDtcblx0Y29uc3Qgc2Nyb2xsQm90dG9tID0gc2Nyb2xsVG9wICsgd2luZG93SGVpZ2h0O1xuXG5cdC8vIEdldCB0aGUgZWxlbWVudHMgdGhhdCBhcmUgYmV0d2VlbiB0aGUgdG9wIGFuZCBib3R0b20gb2YgdGhlIHNjcmVlblxuXHRsZXQgdmlzaWJsZUVsZW1lbnRzOiBzdHJpbmdbXSA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGJhY2tsaW5rQ29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0bGV0IHN0eWxlID0gYmFja2xpbmtDb250YWluZXIuY2hpbGRyZW5baV0uZ2V0QXR0cmlidXRlKFwic3R5bGVcIik7XG5cdFx0aWYgKHN0eWxlID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdGxldCBjc3NQcm9wZXJ0aWVzID0gcGFyc2VDU1NTdHJpbmcoc3R5bGUpO1xuXHRcdGxldCB0b3AgPSBwYXJzZUZsb2F0KGNzc1Byb3BlcnRpZXNbXCJ0b3BcIl0ucmVwbGFjZShcInB4XCIsIFwiXCIpKTtcblx0XHRpZiAodG9wID09IG51bGwpIGNvbnRpbnVlO1xuXG5cdFx0aWYgKFxuXHRcdFx0c2Nyb2xsVG9wIDw9IHRvcCAmJlxuXHRcdFx0dG9wIDw9IHNjcm9sbEJvdHRvbSAmJlxuXHRcdFx0YmFja2xpbmtDb250YWluZXIuY2hpbGRyZW5baV1cblx0XHQpIHtcblx0XHRcdGxldCByZWZlcmVuY2UgPSBiYWNrbGlua0NvbnRhaW5lci5jaGlsZHJlbltpXS5nZXRBdHRyaWJ1dGUoXCJyZWZlcmVuY2VcIik7XG5cdFx0XHRpZiAocmVmZXJlbmNlKSB7XG5cdFx0XHRcdHZpc2libGVFbGVtZW50cy5wdXNoKEpTT04ucGFyc2UocmVmZXJlbmNlKS5kYXRhU3RyaW5nKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRjb25zb2xlLmxvZyghdmlzaWJsZUVsZW1lbnRzLmluY2x1ZGVzKGRhdGFTdHJpbmcpKTtcblx0Ly8gaWYgKCF2aXNpYmxlRWxlbWVudHMuaW5jbHVkZXMoZGF0YVN0cmluZykpIHtcblx0bGV0IHN0YXJ0VG9wID0gbGVhZi52aWV3LmVkaXRvci5nZXRTY3JvbGxJbmZvKCkudG9wO1xuXG5cdGxldCBwb3NpdGlvbnMgPSBmaW5kVGV4dFBvc2l0aW9ucyhcblx0XHRsZWFmLnZpZXcuZGF0YSxcblx0XHR0ZXh0LFxuXHRcdHByZWZpeC5zbGljZSgwLCBwcmVmaXgubGVuZ3RoIC0gMSksXG5cdFx0c3VmZml4LnNsaWNlKDEsIHN1ZmZpeC5sZW5ndGgpXG5cdCk7XG5cdGlmICghcG9zaXRpb25zKSB0aHJvdyBuZXcgRXJyb3IoXCJQb3NpdGlvbnMgbm90IGZvdW5kXCIpO1xuXHRsZXQgcmFuZ2VTdGFydCA9IHBvc2l0aW9ucy5yYW5nZVN0YXJ0O1xuXHRsZXQgcmFuZ2VFbmQgPSBwb3NpdGlvbnMucmFuZ2VFbmQ7XG5cblx0bGVhZi52aWV3LmVkaXRvci5zY3JvbGxJbnRvVmlldyhcblx0XHR7XG5cdFx0XHRmcm9tOiBPYmplY3QuYXNzaWduKHJhbmdlU3RhcnQsIHsgY2g6IDAgfSksXG5cdFx0XHR0bzogT2JqZWN0LmFzc2lnbihyYW5nZUVuZCwgeyBjaDogMCB9KSxcblx0XHR9LFxuXHRcdHRydWVcblx0KTtcblx0Y29uc29sZS5sb2coc3RhcnRUb3ApO1xuXHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHQvLyBpZiAodGVtcCkgcmV0dXJuO1xuXHRcdGxldCBlbmRUb3AgPSBsZWFmLnZpZXcuZWRpdG9yLmdldFNjcm9sbEluZm8oKS50b3A7XG5cdFx0Y29uc29sZS5sb2coZW5kVG9wKTtcblxuXHRcdGxldCBjb250YWluZXIgPSBsZWFmLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXCIudmlldy1jb250ZW50XCIpO1xuXHRcdGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwibm8tc2hhZG93XCIpO1xuXHRcdGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwibmV3LXNoYWRvd1wiKTtcblx0XHRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcInRvcC1zaGFkb3dcIik7XG5cdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJib3R0b20tc2hhZG93XCIpO1xuXG5cdFx0aWYgKHN0YXJ0VG9wID09PSBlbmRUb3AgJiYgaXNTYW1lKSB7XG5cdFx0XHRjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vLXNoYWRvd1wiKTtcblx0XHR9IGVsc2UgaWYgKHN0YXJ0VG9wID09PSBlbmRUb3AgJiYgIWlzU2FtZSkge1xuXHRcdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJuZXctc2hhZG93XCIpO1xuXHRcdH0gZWxzZSBpZiAoc3RhcnRUb3AgPCBlbmRUb3ApIHtcblx0XHRcdC8vIHNob3cgbWFyayBhYm92ZVxuXHRcdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0b3Atc2hhZG93XCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBzaG93IG1hcmsgYmVsb3dcblx0XHRcdGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYm90dG9tLXNoYWRvd1wiKTtcblx0XHR9XG5cdH0sIDI1KTtcblx0Ly8gfVxufVxuXG5mdW5jdGlvbiBlbmRFZmZlY3RSZW1vdmVIaWdobGlnaHRzKFxuXHR3b3Jrc3BhY2U6IFdvcmtzcGFjZSxcblx0bGVhZklkOiBzdHJpbmcsXG5cdHV1aWQ6IHN0cmluZyxcblx0YmFja2xpbmtVVUlEPzogc3RyaW5nXG4pIHtcblx0Y29uc3Qgd29ya3NwYWNlQ29udGFpbmVyID0gd29ya3NwYWNlLmNvbnRhaW5lckVsO1xuXHRjb25zdCBzcGFuID0gd29ya3NwYWNlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyB1dWlkKTtcblxuXHRzcGFuPy5wYXJlbnRFbGVtZW50XG5cdFx0Py5xdWVyeVNlbGVjdG9yKFwiLnJlZmVyZW5jZS1zcGFuXCIpXG5cdFx0Py5jbGFzc0xpc3QucmVtb3ZlKFwicmVmZXJlbmNlLXNwYW4tc2VsZWN0ZWRcIik7XG5cdC8vIGZpcnN0U3BhblBhcnQ/LmNsYXNzTGlzdC5yZW1vdmUodXVpZCk7XG5cdHNwYW4/LmNsYXNzTGlzdC5yZW1vdmUoXCJyZWZlcmVuY2UtZGF0YS1zcGFuLXNlbGVjdGVkXCIpO1xuXG5cdGlmIChiYWNrbGlua1VVSUQpIHtcblx0XHRjb25zdCBiYWNrbGlua1NwYW4gPSB3b3Jrc3BhY2VDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5cIiArIGJhY2tsaW5rVVVJRCk7XG5cblx0XHRiYWNrbGlua1NwYW4/LnBhcmVudEVsZW1lbnRcblx0XHRcdD8ucXVlcnlTZWxlY3RvcihcIi5yZWZlcmVuY2Utc3BhblwiKVxuXHRcdFx0Py5jbGFzc0xpc3QucmVtb3ZlKFwicmVmZXJlbmNlLXNwYW4tc2VsZWN0ZWRcIik7XG5cdFx0YmFja2xpbmtTcGFuPy5jbGFzc0xpc3QucmVtb3ZlKFwicmVmZXJlbmNlLWRhdGEtc3Bhbi1zZWxlY3RlZFwiKTtcblx0fVxuXG5cdGxldCB0YXJnZXRMZWFmID0gd29ya3NwYWNlLmdldExlYWZCeUlkKGxlYWZJZCk7XG5cdGlmICghdGFyZ2V0TGVhZikge1xuXHRcdHJlc2V0Q3Vyc29yKCk7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiVGFyZ2V0IGxlYWYgbm90IGZvdW5kXCIpO1xuXHR9XG5cblx0Ly8gcmVtb3ZlIGJveCBzaGFkb3dzIGlmIGFueVxuXHRsZXQgY29udGFpbmVyID1cblx0XHRnZXRDb250YWluZXJFbGVtZW50KHRhcmdldExlYWYpPy5xdWVyeVNlbGVjdG9yKFwiLnZpZXctY29udGVudFwiKTtcblxuXHRpZiAoY29udGFpbmVyKSB7XG5cdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJuby1zaGFkb3dcIik7XG5cdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJuZXctc2hhZG93XCIpO1xuXHRcdGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwidG9wLXNoYWRvd1wiKTtcblx0XHRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImJvdHRvbS1zaGFkb3dcIik7XG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0QmFja2xpbmtFZmZlY3Qoc3BhbjogSFRNTFNwYW5FbGVtZW50KSB7XG5cdGxldCBzb3VyY2UgPSBnZXRCYWNrbGlua0hvdmVyKCk7XG5cdGxldCBkZXN0aW5hdGlvbiA9IGdldEN1cnNvcigpO1xuXHRsZXQgdXBkYXRlU3RhdGUgPSB1cGRhdGVCYWNrbGlua0hvdmVyO1xuXG5cdC8vIE11dGV4LCBwcmV2ZW50IGNvbmN1cnJlbnQgYWNjZXNzIHRvIGZvbGxvd2luZyBzZWN0aW9uIG9mIGNvZGVcblx0aWYgKHNvdXJjZSAhPSBudWxsKSByZXR1cm47XG5cdHVwZGF0ZVN0YXRlKHtcblx0XHR0eXBlOiBgJHtBQ1RJT05fVFlQRS5CQUNLTElOS30tc3RhcnRgLFxuXHR9KTtcblxuXHRpZiAoIXNwYW4pIHJldHVybjtcblxuXHQvLyBUb2dnbGUgaG92ZXIgc3RhdGVcblx0bGV0IHV1aWQgPSBBcnJheS5mcm9tKHNwYW4uY2xhc3NMaXN0KS5maWx0ZXIoKGVsKSA9PiBlbC5pbmNsdWRlcyhcInV1aWRcIikpWzBdO1xuXHRzcGFuLnBhcmVudEVsZW1lbnRcblx0XHQ/LnF1ZXJ5U2VsZWN0b3IoXCIucmVmZXJlbmNlLXNwYW5cIilcblx0XHQ/LmNsYXNzTGlzdC5hZGQoXCJyZWZlcmVuY2Utc3Bhbi1zZWxlY3RlZFwiKTtcblxuXHRzcGFuLmNsYXNzTGlzdC5hZGQoXCJyZWZlcmVuY2UtZGF0YS1zcGFuLXNlbGVjdGVkXCIpO1xuXG5cdHVwZGF0ZVN0YXRlKHtcblx0XHR1dWlkLFxuXHR9KTtcblxuXHRjb25zdCByZWZlcmVuY2VEYXRhID0gc3Bhbi5nZXRBdHRyaWJ1dGUoXCJyZWZlcmVuY2VcIik7XG5cdGlmICghcmVmZXJlbmNlRGF0YSkgdGhyb3cgbmV3IEVycm9yKFwiUmVmZXJlbmNlIGRhdGEgbm90IGZvdW5kXCIpO1xuXG5cdGNvbnN0IGJhY2tsaW5rID0gSlNPTi5wYXJzZShyZWZlcmVuY2VEYXRhKTtcblx0Y29uc3QgZGF0YVN0cmluZyA9IGJhY2tsaW5rLmRhdGFTdHJpbmc7XG5cblx0Ly8gQ2hlY2sgaWYgdGhlIGN1cnNvciBpcyBhbHJlYWR5IG9uIHRoZSBzYW1lIHJlZmVyZW5jZVxuXHRpZiAoZGVzdGluYXRpb24gIT0gbnVsbCAmJiBkZXN0aW5hdGlvbi5kYXRhU3RyaW5nID09IGRhdGFTdHJpbmcpIHtcblx0XHR1cGRhdGVTdGF0ZShkZXN0aW5hdGlvbik7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bGV0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG9dID0gcHJvY2Vzc1VSSShkYXRhU3RyaW5nKTtcblxuXHQvLyBnZXQgYmFja2xpbmsgbGVhZlxuXHRsZXQgbGVhdmVzQnlUYWIgPSBjb2xsZWN0TGVhdmVzQnlUYWJIZWxwZXIoKTtcblxuXHRsZXQgY3VyclRhYklkeCA9IGdldEN1cnJlbnRUYWJJbmRleChsZWF2ZXNCeVRhYiwgc3Bhbik7XG5cblx0bGV0IGJhY2tsaW5rTGVhZiA9IGxlYXZlc0J5VGFiW2N1cnJUYWJJZHhdLmZpbHRlcigobGVhZjogV29ya3NwYWNlTGVhZikgPT4ge1xuXHRcdGxldCBjb250YWluZXJFbCA9IGdldENvbnRhaW5lckVsZW1lbnQobGVhZik7XG5cdFx0Y29uc3QgZXhpc3RzID0gY2hlY2tTcGFuRWxlbWVudEV4aXN0cyhzcGFuLCBjb250YWluZXJFbCk7XG5cdFx0cmV0dXJuIGV4aXN0cztcblx0fSlbMF07XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRsZXQgYmFja2xpbmtMZWFmSUQgPSBiYWNrbGlua0xlYWYuaWQ7XG5cdGlmICghYmFja2xpbmtMZWFmSUQpIHRocm93IG5ldyBFcnJvcihcIkxlYWYgaWQgbm90IGZvdW5kXCIpO1xuXG5cdGlmIChiYWNrbGlua0xlYWYgJiYgYmFja2xpbmtMZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcblx0XHRjb25zdCBlZGl0b3JWaWV3OiBFZGl0b3JWaWV3ID0gZ2V0RWRpdG9yVmlldyhiYWNrbGlua0xlYWYpO1xuXHRcdGlmICghZWRpdG9yVmlldykgdGhyb3cgbmV3IEVycm9yKFwiRWRpdG9yIHZpZXcgbm90IGZvdW5kXCIpO1xuXHRcdGNvbnN0IHZpZXdwb3J0ID0gYmFja2xpbmtMZWFmLnZpZXcuZWRpdG9yLmdldFNjcm9sbEluZm8oKTtcblxuXHRcdHJlbW92ZUhpZ2hsaWdodChlZGl0b3JWaWV3LCBmcm9tLCB0byk7XG5cdFx0aGlnaGxpZ2h0U2VsZWN0aW9uKGVkaXRvclZpZXcsIGZyb20sIHRvKTtcblx0XHQvLyBsZXQgcG9zaXRpb25zID0gZmluZFRleHRQb3NpdGlvbnMoXG5cdFx0Ly8gXHRiYWNrbGlua0xlYWYudmlldy5kYXRhLFxuXHRcdC8vIFx0dGV4dCxcblx0XHQvLyBcdHByZWZpeC5zbGljZSgwLCBwcmVmaXgubGVuZ3RoIC0gMSksXG5cdFx0Ly8gXHRzdWZmaXguc2xpY2UoMSwgc3VmZml4Lmxlbmd0aClcblx0XHQvLyApO1xuXHRcdC8vIGlmICghcG9zaXRpb25zKSB0aHJvdyBuZXcgRXJyb3IoXCJQb3NpdGlvbnMgbm90IGZvdW5kXCIpO1xuXG5cdFx0dXBkYXRlU3RhdGUoe1xuXHRcdFx0ZGF0YVN0cmluZyxcblx0XHRcdG9yaWdpbmFsVG9wOiBlZGl0b3JWaWV3LmRvY3VtZW50VG9wLFxuXHRcdFx0YmFja2xpbmtMZWFmSWQ6IGJhY2tsaW5rTGVhZklELFxuXHRcdH0pO1xuXHR9XG5cblx0bGV0IHJlZmVyZW5jaW5nRmlsZSA9IGJhY2tsaW5rLnJlZmVyZW5jaW5nTG9jYXRpb24uZmlsZW5hbWU7XG5cblx0Ly8gaWYgKGN1cnJUYWJJZHggIT0gLTEpIHtcblx0Ly8gJiYgY3VyclRhYiAhPSAtMSkge1xuXHQvLyAvLyBDaGVjayBhZGphY2VudCB0YWJzIGZvciBmaWxlIGFuZCBvcGVuIGZpbGUgaWYgbmVlZGVkXG5cdGNvbnN0IHsgbmV3TGVhZiwgdGVtcCwgb3JpZ2luYWxMZWFmIH0gPSBhd2FpdCBvcGVuRmlsZUluQWRqYWNlbnRUYWIoXG5cdFx0bGVhdmVzQnlUYWIsXG5cdFx0Y3VyclRhYklkeCxcblx0XHRyZWZlcmVuY2luZ0ZpbGVcblx0KTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdGxldCBpZCA9IG5ld0xlYWYuaWQ7XG5cdGlmICghaWQpIHRocm93IG5ldyBFcnJvcihcIkxlYWYgaWQgbm90IGZvdW5kXCIpO1xuXHR1cGRhdGVTdGF0ZSh7XG5cdFx0bGVhZklkOiBpZCxcblx0XHR0ZW1wLFxuXHRcdHBlZWs6IHRydWUsXG5cdH0pO1xuXG5cdGNvbnN0IG9yaWdpbmFsTGVhZklkID0gb3JpZ2luYWxMZWFmLmlkO1xuXG5cdGNvbnN0IG1hdGNoZXMgPSBbXG5cdFx0Li4uYmFja2xpbmsucmVmZXJlbmNpbmdMb2NhdGlvbi50ZXh0Lm1hdGNoQWxsKFJFRkVSRU5DRV9SRUdFWCksXG5cdF07XG5cdGlmIChtYXRjaGVzLmxlbmd0aCA9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJNYXRjaGVzIG5vdCBmb3VuZFwiKTtcblx0Ly8gVGhpcyBvbmUgc3dpdGNoLCB0aGlzIG9uZSBkb2VzIHRoZSBjb3JyZWN0IHNjcm9sbFxuXHQvLyB0ZW1wRGlyZWN0aW9uSW5kaWNhdG9yKG5ld0xlYWYsIHRleHQsIHByZWZpeCwgc3VmZml4LCBkYXRhU3RyaW5nKTtcblxuXHQvLyBUaGlzIG9uZSBkb2VzIHRoZSBjb3JyZWN0IGdyYWJiaW5nIG9mIHNwYW4gZWxlbWVudHNcblx0dGVtcERpcmVjdGlvbkluZGljYXRvcihcblx0XHRuZXdMZWFmLFxuXHRcdGJhY2tsaW5rLnJlZmVyZW5jaW5nTG9jYXRpb24udGV4dCxcblx0XHRiYWNrbGluay5yZWZlcmVuY2luZ0xvY2F0aW9uLnByZWZpeCArIFwiLVwiLFxuXHRcdFwiLVwiICsgYmFja2xpbmsucmVmZXJlbmNpbmdMb2NhdGlvbi5zdWZmaXgsXG5cdFx0bWF0Y2hlc1swXVsxXSxcblx0XHRpZCA9PT0gb3JpZ2luYWxMZWFmSWQsXG5cdFx0QUNUSU9OX1RZUEUuQkFDS0xJTktcblx0KTtcblxuXHRjb25zdCBjdXJzb3JWaWV3cG9ydCA9IG5ld0xlYWYudmlldy5lZGl0b3IuZ2V0U2Nyb2xsSW5mbygpO1xuXG5cdHVwZGF0ZVN0YXRlKHtcblx0XHRjdXJzb3JWaWV3cG9ydCxcblx0fSk7XG5cblx0bGV0IGJhY2tsaW5rU3BhbjogSFRNTFNwYW5FbGVtZW50ID0gbmV3TGVhZi5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKFxuXHRcdGBzcGFuW2RhdGE9XCIke2JhY2tsaW5rLmRhdGFTdHJpbmd9XCJdYFxuXHQpO1xuXG5cdC8vIENhbid0IGd1YXJhbnRlZSB0aGF0IHRoaXMgd2lsbCBiZSB2aXNpYmxlLlxuXHRpZiAoYmFja2xpbmtTcGFuKSB7XG5cdFx0bGV0IGJhY2tsaW5rVVVJRCA9IEFycmF5LmZyb20oYmFja2xpbmtTcGFuLmNsYXNzTGlzdCkuZmlsdGVyKChlbCkgPT5cblx0XHRcdGVsLmluY2x1ZGVzKFwidXVpZFwiKVxuXHRcdClbMF07XG5cdFx0YmFja2xpbmtTcGFuLnBhcmVudEVsZW1lbnRcblx0XHRcdD8ucXVlcnlTZWxlY3RvcihcIi5yZWZlcmVuY2Utc3BhblwiKVxuXHRcdFx0Py5jbGFzc0xpc3QuYWRkKFwicmVmZXJlbmNlLXNwYW4tc2VsZWN0ZWRcIik7XG5cblx0XHRiYWNrbGlua1NwYW4uY2xhc3NMaXN0LmFkZChcInJlZmVyZW5jZS1kYXRhLXNwYW4tc2VsZWN0ZWRcIik7XG5cblx0XHR1cGRhdGVTdGF0ZSh7XG5cdFx0XHRiYWNrbGlua1VVSUQsXG5cdFx0fSk7XG5cdH1cblxuXHQvLyBAdHMtaWdub3JlXG5cdGlmIChvcmlnaW5hbExlYWZJZCkge1xuXHRcdHVwZGF0ZVN0YXRlKHtcblx0XHRcdG9yaWdpbmFsTGVhZklkLFxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWZlcmVuY2VFZmZlY3QoXG5cdHNwYW46IEhUTUxTcGFuRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQsXG5cdHR5cGU6IHN0cmluZ1xuKSB7XG5cdGxldCBzb3VyY2UgPSB0eXBlID09IEFDVElPTl9UWVBFLk1PVVNFID8gZ2V0SG92ZXIoKSA6IGdldEN1cnNvcigpO1xuXHRsZXQgZGVzdGluYXRpb24gPSB0eXBlID09IEFDVElPTl9UWVBFLk1PVVNFID8gZ2V0Q3Vyc29yKCkgOiBnZXRIb3ZlcigpO1xuXHRsZXQgdXBkYXRlU3RhdGUgPSB0eXBlID09IEFDVElPTl9UWVBFLk1PVVNFID8gdXBkYXRlSG92ZXIgOiB1cGRhdGVDdXJzb3I7XG5cblx0Ly8gTXV0ZXgsIHByZXZlbnQgY29uY3VycmVudCBhY2Nlc3MgdG8gZm9sbG93aW5nIHNlY3Rpb24gb2YgY29kZVxuXHRpZiAoc291cmNlICE9IG51bGwpIHtcblx0XHRpZiAoQUNUSU9OX1RZUEUuQ1VSU09SID09IHR5cGUpIHtcblx0XHRcdC8vIGlmIHRoZXJlIHdhcyBhbm90aGVyIGN1cnNvciBlZmZlY3QsIGVuZCBpdCBhbmQgc3RhcnQgYSBuZXcgb25lXG5cdFx0XHRhd2FpdCBlbmRSZWZlcmVuY2VDdXJzb3JFZmZlY3QoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHR1cGRhdGVTdGF0ZSh7XG5cdFx0dHlwZTogYCR7dHlwZX0tc3RhcnRgLFxuXHR9KTtcblxuXHRpZiAoIXNwYW4pIHJldHVybjtcblxuXHQvLyBjb2xvciB0aGUgc3BhblxuXHRsZXQgdXVpZCA9IEFycmF5LmZyb20oc3Bhbi5jbGFzc0xpc3QpLmZpbHRlcigoZWwpID0+IGVsLmluY2x1ZGVzKFwidXVpZFwiKSlbMF07XG5cdHNwYW4ucGFyZW50RWxlbWVudFxuXHRcdD8ucXVlcnlTZWxlY3RvcihcIi5yZWZlcmVuY2Utc3BhblwiKVxuXHRcdD8uY2xhc3NMaXN0LmFkZChcInJlZmVyZW5jZS1zcGFuLXNlbGVjdGVkXCIpO1xuXG5cdHNwYW4uY2xhc3NMaXN0LmFkZChcInJlZmVyZW5jZS1kYXRhLXNwYW4tc2VsZWN0ZWRcIik7XG5cblx0dXBkYXRlU3RhdGUoe1xuXHRcdHV1aWQsXG5cdH0pO1xuXG5cdGNvbnN0IGRhdGFTdHJpbmcgPSBzcGFuLmdldEF0dHJpYnV0ZShcImRhdGFcIik7XG5cdGlmICghZGF0YVN0cmluZykgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBzdHJpbmcgbm90IGZvdW5kXCIpO1xuXG5cdGlmIChcblx0XHRkZXN0aW5hdGlvbiAhPSBudWxsICYmXG5cdFx0ZGVzdGluYXRpb24uZGF0YVN0cmluZyA9PSBkYXRhU3RyaW5nICYmXG5cdFx0QUNUSU9OX1RZUEUuQ1VSU09SICE9IHR5cGVcblx0KSB7XG5cdFx0dXBkYXRlSG92ZXIoZGVzdGluYXRpb24pO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGxldCBbcHJlZml4LCB0ZXh0LCBzdWZmaXgsIGZpbGUsIGZyb20sIHRvXSA9IHByb2Nlc3NVUkkoZGF0YVN0cmluZyk7XG5cblx0bGV0IGxlYXZlc0J5VGFiID0gY29sbGVjdExlYXZlc0J5VGFiSGVscGVyKCk7XG5cblx0bGV0IGN1cnJUYWJJZHggPSBnZXRDdXJyZW50VGFiSW5kZXgobGVhdmVzQnlUYWIsIHNwYW4pO1xuXG5cdGxldCBjdXJyTGVhZiA9IGdldFRoYXQoKS53b3Jrc3BhY2UuZ2V0TGVhZigpO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0bGV0IGN1cnJMZWFmSUQgPSBjdXJyTGVhZi5pZDtcblx0aWYgKCFjdXJyTGVhZklEKSB0aHJvdyBuZXcgRXJyb3IoXCJjdXJyTGVhZklEIGlkIG5vdCBmb3VuZFwiKTtcblxuXHRjb25zdCB7IG5ld0xlYWYsIHRlbXAsIG9yaWdpbmFsTGVhZiB9ID0gYXdhaXQgb3BlbkZpbGVJbkFkamFjZW50VGFiKFxuXHRcdGxlYXZlc0J5VGFiLFxuXHRcdGN1cnJUYWJJZHgsXG5cdFx0ZmlsZSxcblx0XHR0eXBlXG5cdCk7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRsZXQgaWQgPSBuZXdMZWFmLmlkO1xuXHRpZiAoIWlkKSB0aHJvdyBuZXcgRXJyb3IoXCJMZWFmIGlkIG5vdCBmb3VuZFwiKTtcblx0dXBkYXRlU3RhdGUoe1xuXHRcdGxlYWZJZDogaWQsXG5cdFx0dGVtcCxcblx0XHRwZWVrOiB0cnVlLFxuXHR9KTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdGNvbnN0IG9yaWdpbmFsTGVhZklkID0gb3JpZ2luYWxMZWFmLmlkO1xuXG5cdGNvbnNvbGUubG9nKG5ld0xlYWYgJiYgbmV3TGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KTtcblx0aWYgKG5ld0xlYWYgJiYgbmV3TGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSB7XG5cdFx0Y29uc3QgZWRpdG9yVmlldzogRWRpdG9yVmlldyA9IGdldEVkaXRvclZpZXcobmV3TGVhZik7XG5cdFx0aWYgKCFlZGl0b3JWaWV3KSB0aHJvdyBuZXcgRXJyb3IoXCJFZGl0b3IgdmlldyBub3QgZm91bmRcIik7XG5cdFx0Y29uc3Qgdmlld3BvcnQgPSBuZXdMZWFmLnZpZXcuZWRpdG9yLmdldFNjcm9sbEluZm8oKTtcblxuXHRcdHJlbW92ZUhpZ2hsaWdodChlZGl0b3JWaWV3LCBmcm9tLCB0byk7XG5cdFx0aGlnaGxpZ2h0U2VsZWN0aW9uKGVkaXRvclZpZXcsIGZyb20sIHRvKTtcblxuXHRcdGNvbnNvbGUubG9nKFwibGVhdmVzIGFyZSBlcXVhbFwiICsgaWQgPT09IG9yaWdpbmFsTGVhZklkKTtcblx0XHR0ZW1wRGlyZWN0aW9uSW5kaWNhdG9yKFxuXHRcdFx0bmV3TGVhZixcblx0XHRcdHRleHQsXG5cdFx0XHRwcmVmaXgsXG5cdFx0XHRzdWZmaXgsXG5cdFx0XHRkYXRhU3RyaW5nLFxuXHRcdFx0aWQgPT09IG9yaWdpbmFsTGVhZklkXG5cdFx0KTtcblxuXHRcdGNvbnN0IGN1cnNvclZpZXdwb3J0ID0gbmV3TGVhZi52aWV3LmVkaXRvci5nZXRTY3JvbGxJbmZvKCk7XG5cblx0XHR1cGRhdGVTdGF0ZSh7XG5cdFx0XHRkYXRhU3RyaW5nLFxuXHRcdFx0b3JpZ2luYWxUb3A6IGVkaXRvclZpZXcuZG9jdW1lbnRUb3AsXG5cdFx0XHQvLyBvcmlnaW5hbExlYWZJZDogY3VyckxlYWZJRCxcblx0XHRcdGN1cnNvclZpZXdwb3J0LFxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKG9yaWdpbmFsTGVhZklkKSB7XG5cdFx0dXBkYXRlU3RhdGUoe1xuXHRcdFx0b3JpZ2luYWxMZWFmSWQsXG5cdFx0fSk7XG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuZFJlZmVyZW5jZUN1cnNvckVmZmVjdCgpIHtcblx0aWYgKCFnZXRDdXJzb3IoKSB8fCBPYmplY3Qua2V5cyhnZXRDdXJzb3IoKSkubGVuZ3RoID09IDApIHtcblx0XHQvLyBFbmQgbXV0ZXggbG9ja1xuXHRcdHJlc2V0Q3Vyc29yKCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3Qge1xuXHRcdGRhdGFTdHJpbmcsXG5cdFx0bGVhZklkLFxuXHRcdG9yaWdpbmFsTGVhZklkLFxuXHRcdHRlbXAsXG5cdFx0Y3Vyc29yVmlld3BvcnQsXG5cdFx0cGVlayxcblx0XHR1dWlkLFxuXHRcdHJlbW92ZWQsXG5cdH0gPSBnZXRDdXJzb3IoKTtcblx0cmVzZXRDdXJzb3IoKTtcblxuXHRpZiAoZ2V0SG92ZXIoKSAhPSBudWxsICYmIGdldEhvdmVyKCkuZGF0YVN0cmluZyA9PSBkYXRhU3RyaW5nKSB7XG5cdFx0Ly8gRW5kIG11dGV4IGxvY2tcblx0XHRyZXNldEN1cnNvcigpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHsgd29ya3NwYWNlIH0gPSBnZXRUaGF0KCk7XG5cdGxldCB0YXJnZXRMZWFmID0gd29ya3NwYWNlLmdldExlYWZCeUlkKGxlYWZJZCk7XG5cdGVuZEVmZmVjdFJlbW92ZUhpZ2hsaWdodHMod29ya3NwYWNlLCBsZWFmSWQsIHV1aWQpO1xuXG5cdGNvbnN0IGFjdGl2ZUxlYWYgPSBnZXRUaGF0KCkud29ya3NwYWNlLmdldExlYWYoKTtcblx0Ly8gQHRzLWlnbm9yZSBpZFxuXHRjb25zdCBhY3RpdmVMZWFmSWQgPSBhY3RpdmVMZWFmLmlkO1xuXG5cdGxldCBlZGl0b3JWaWV3ID0gZ2V0RWRpdG9yVmlldyh0YXJnZXRMZWFmKTtcblxuXHRsZXQgW3ByZWZpeCwgdGV4dCwgc3VmZml4LCBmaWxlLCBmcm9tLCB0b10gPSBwcm9jZXNzVVJJKGRhdGFTdHJpbmcpO1xuXG5cdC8vIHJlbW92ZSB0aGUgaGlnaGxpZ2h0XG5cdHJlbW92ZUhpZ2hsaWdodChlZGl0b3JWaWV3LCBmcm9tLCB0byk7XG5cdC8vIHJlcGxhY2Ugd2l0aCBkZWZhdWx0IGhpZ2hsaWdodFxuXHRpZiAoIXJlbW92ZWQpIGRlZmF1bHRIaWdobGlnaHRTZWxlY3Rpb24oZWRpdG9yVmlldywgZnJvbSwgdG8pO1xuXG5cdC8vIHJlbW92ZUhpZ2hsaWdodHMoZWRpdG9yVmlldyk7XG5cblx0aWYgKGFjdGl2ZUxlYWZJZCA9PT0gbGVhZklkKSB7XG5cdFx0cmVzZXRDdXJzb3IoKTtcblx0XHRsZXQgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50ID0gZ2V0Q29udGFpbmVyRWxlbWVudCh0YXJnZXRMZWFmKTtcblx0XHRpZiAoY29udGFpbmVyRWwgIT0gbnVsbCkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Y29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihcIi52aWV3LWNvbnRlbnRcIik/LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiXCIpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoY3Vyc29yVmlld3BvcnQgJiYgdGFyZ2V0TGVhZiAmJiB0YXJnZXRMZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcblx0XHRjb25zdCB2aWV3OiBNYXJrZG93blZpZXcgPSB0YXJnZXRMZWFmLnZpZXc7XG5cdFx0dmlldy5lZGl0b3Iuc2Nyb2xsVG8oMCwgY3Vyc29yVmlld3BvcnQudG9wKTtcblxuXHRcdC8vIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0Ly8gXHRjb25zdCBzY3JvbGxpbmcgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0Ly8gXHRcdGNvbnN0IHNjcm9sbEFtb3VudCA9IDQwO1xuXHRcdC8vIFx0XHRjb25zdCBjdXJyZW50U2Nyb2xsID0gdmlldy5lZGl0b3IuZ2V0U2Nyb2xsSW5mbygpLnRvcDtcblx0XHQvLyBcdFx0aWYgKGN1cnJlbnRTY3JvbGwgPT0gY3Vyc29yVmlld3BvcnQudG9wKSB7XG5cdFx0Ly8gXHRcdFx0Y2xlYXJJbnRlcnZhbChzY3JvbGxpbmcpO1xuXHRcdC8vIFx0XHR9IGVsc2UgaWYgKGN1cnJlbnRTY3JvbGwgPiBjdXJzb3JWaWV3cG9ydC50b3ApIHtcblx0XHQvLyBcdFx0XHRpZiAoY3VycmVudFNjcm9sbCAtIHNjcm9sbEFtb3VudCA8IGN1cnNvclZpZXdwb3J0LnRvcCkge1xuXHRcdC8vIFx0XHRcdFx0dmlldy5lZGl0b3Iuc2Nyb2xsVG8oMCwgY3Vyc29yVmlld3BvcnQudG9wKTtcblx0XHQvLyBcdFx0XHRcdGNsZWFySW50ZXJ2YWwoc2Nyb2xsaW5nKTtcblx0XHQvLyBcdFx0XHRcdHJlc29sdmUoXCJkb25lXCIpO1xuXHRcdC8vIFx0XHRcdH0gZWxzZSB7XG5cdFx0Ly8gXHRcdFx0XHR2aWV3LmVkaXRvci5zY3JvbGxUbygwLCBjdXJyZW50U2Nyb2xsIC0gc2Nyb2xsQW1vdW50KTtcblx0XHQvLyBcdFx0XHR9XG5cdFx0Ly8gXHRcdH0gZWxzZSBpZiAoY3VycmVudFNjcm9sbCA8IGN1cnNvclZpZXdwb3J0LnRvcCkge1xuXHRcdC8vIFx0XHRcdGlmIChjdXJyZW50U2Nyb2xsICsgc2Nyb2xsQW1vdW50ID4gY3Vyc29yVmlld3BvcnQudG9wKSB7XG5cdFx0Ly8gXHRcdFx0XHR2aWV3LmVkaXRvci5zY3JvbGxUbygwLCBjdXJzb3JWaWV3cG9ydC50b3ApO1xuXHRcdC8vIFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChzY3JvbGxpbmcpO1xuXHRcdC8vIFx0XHRcdFx0cmVzb2x2ZShcImRvbmVcIik7XG5cdFx0Ly8gXHRcdFx0fSBlbHNlIHtcblx0XHQvLyBcdFx0XHRcdHZpZXcuZWRpdG9yLnNjcm9sbFRvKDAsIGN1cnJlbnRTY3JvbGwgKyBzY3JvbGxBbW91bnQpO1xuXHRcdC8vIFx0XHRcdH1cblx0XHQvLyBcdFx0fVxuXHRcdC8vIFx0fSwgMTApO1xuXHRcdC8vIH0pO1xuXG5cdFx0Ly8gdmlldy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKFwiLmNtLXNjcm9sbGVyXCIpPy5zY3JvbGxUbyh7XG5cdFx0Ly8gXHR0b3A6IGN1cnNvclZpZXdwb3J0LnRvcCxcblx0XHQvLyBcdGJlaGF2aW9yOiBcInNtb290aFwiLFxuXHRcdC8vIH0pO1xuXG5cdFx0Ly8gaWYgdGhlIGhvdmVyIGlzIGFjdGl2ZSwgaGlnaGxpZ2h0IHRoZSBzZWxlY3Rpb25cblx0XHRpZiAoZ2V0SG92ZXIoKSAhPSBudWxsKSB7XG5cdFx0XHRjb25zdCB7IGRhdGFTdHJpbmcsIGN1cnNvclZpZXdwb3J0LCBsZWFmSWQsIG9yaWdpbmFsTGVhZklkIH0gPSBnZXRIb3ZlcigpO1xuXHRcdFx0bGV0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG9dID0gcHJvY2Vzc1VSSShkYXRhU3RyaW5nKTtcblx0XHRcdGNvbnN0IGN1cnNvckxlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZkJ5SWQobGVhZklkKTtcblx0XHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKGN1cnNvckxlYWYpO1xuXHRcdFx0Y29uc3QgZWRpdG9yVmlldzogRWRpdG9yVmlldyA9IGdldEVkaXRvclZpZXcoY3Vyc29yTGVhZik7XG5cdFx0XHRoaWdobGlnaHRTZWxlY3Rpb24oZWRpdG9yVmlldywgZnJvbSwgdG8pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50ID0gZ2V0Q29udGFpbmVyRWxlbWVudCh0YXJnZXRMZWFmKTtcblx0XHRcdGlmIChjb250YWluZXJFbCAhPSBudWxsKSB7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0Y29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihcIi52aWV3LWNvbnRlbnRcIik/LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICh0ZW1wICYmIHRhcmdldExlYWYpIHtcblx0XHR0YXJnZXRMZWFmLmRldGFjaCgpO1xuXHR9XG5cblx0aWYgKHBlZWspIHtcblx0XHRsZXQgb3JpZ2luYWxMZWFmID0gd29ya3NwYWNlLmdldExlYWZCeUlkKG9yaWdpbmFsTGVhZklkKTtcblx0XHRpZiAoIW9yaWdpbmFsTGVhZikgdGhyb3cgbmV3IEVycm9yKFwiT3JpZ2luYWwgbGVhZiBub3QgZm91bmRcIik7XG5cblx0XHR3b3Jrc3BhY2UucmV2ZWFsTGVhZihvcmlnaW5hbExlYWYpO1xuXHR9XG5cblx0Ly8gaWYgKCF0ZW1wKSB7XG5cdC8vIFx0bGV0IG9yaWdpbmFsTGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmQnlJZChvcmlnaW5hbExlYWZJZCk7XG5cdC8vIFx0aWYgKCFvcmlnaW5hbExlYWYpIHRocm93IG5ldyBFcnJvcihcIk9yaWdpbmFsIGxlYWYgbm90IGZvdW5kXCIpO1xuXG5cdC8vIFx0d29ya3NwYWNlLnJldmVhbExlYWYob3JpZ2luYWxMZWFmKTtcblx0Ly8gfVxuXHQvLyBFbmQgbXV0ZXggbG9ja1xuXHRyZXNldEN1cnNvcigpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5kUmVmZXJlbmNlSG92ZXJFZmZlY3QoKSB7XG5cdGlmICghZ2V0SG92ZXIoKSB8fCBPYmplY3Qua2V5cyhnZXRIb3ZlcigpKS5sZW5ndGggPT0gMCkge1xuXHRcdC8vIEVuZCBtdXRleCBsb2NrXG5cdFx0cmVzZXRIb3ZlcigpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGxldCB7IGRhdGFTdHJpbmcsIGxlYWZJZCwgb3JpZ2luYWxMZWFmSWQsIHRlbXAsIGN1cnNvclZpZXdwb3J0LCBwZWVrLCB1dWlkIH0gPVxuXHRcdGdldEhvdmVyKCk7XG5cdHJlc2V0SG92ZXIoKTtcblxuXHRpZiAoZ2V0Q3Vyc29yKCkgIT0gbnVsbCAmJiBnZXRDdXJzb3IoKS5kYXRhU3RyaW5nID09IGRhdGFTdHJpbmcpIHtcblx0XHQvLyBjb25zb2xlLmxvZyhcImN1cnNvciByZXNldFwiKTtcblx0XHQvLyBFbmQgbXV0ZXggbG9ja1xuXHRcdHJlc2V0SG92ZXIoKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCB7IHdvcmtzcGFjZSB9ID0gZ2V0VGhhdCgpO1xuXHRsZXQgdGFyZ2V0TGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmQnlJZChsZWFmSWQpO1xuXHRlbmRFZmZlY3RSZW1vdmVIaWdobGlnaHRzKHdvcmtzcGFjZSwgbGVhZklkLCB1dWlkKTtcblxuXHRsZXQgZWRpdG9yVmlldyA9IGdldEVkaXRvclZpZXcodGFyZ2V0TGVhZik7XG5cblx0bGV0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG9dID0gcHJvY2Vzc1VSSShkYXRhU3RyaW5nKTtcblx0cmVtb3ZlSGlnaGxpZ2h0KGVkaXRvclZpZXcsIGZyb20sIHRvKTtcblx0ZGVmYXVsdEhpZ2hsaWdodFNlbGVjdGlvbihlZGl0b3JWaWV3LCBmcm9tLCB0byk7XG5cblx0Ly8gcmVtb3ZlSGlnaGxpZ2h0cyhlZGl0b3JWaWV3KTtcblxuXHRpZiAoY3Vyc29yVmlld3BvcnQgJiYgdGFyZ2V0TGVhZiAmJiB0YXJnZXRMZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcblx0XHRjb25zdCB2aWV3OiBNYXJrZG93blZpZXcgPSB0YXJnZXRMZWFmLnZpZXc7XG5cdFx0dmlldy5lZGl0b3Iuc2Nyb2xsVG8oMCwgY3Vyc29yVmlld3BvcnQudG9wKTtcblxuXHRcdC8vIGlmIHRoZSBjdXJzb3IgaXMgYWN0aXZlLCBoaWdobGlnaHQgdGhlIHNlbGVjdGlvblxuXHRcdGlmIChnZXRDdXJzb3IoKSAhPSBudWxsICYmIGdldEN1cnNvcigpLmRhdGFTdHJpbmcpIHtcblx0XHRcdGNvbnN0IHsgZGF0YVN0cmluZywgY3Vyc29yVmlld3BvcnQsIGxlYWZJZCwgb3JpZ2luYWxMZWFmSWQgfSA9XG5cdFx0XHRcdGdldEN1cnNvcigpO1xuXHRcdFx0bGV0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG8sIHBvcnRhbCwgdG9nZ2xlXSA9XG5cdFx0XHRcdHByb2Nlc3NVUkkoZGF0YVN0cmluZyk7XG5cdFx0XHRjb25zdCBjdXJzb3JMZWFmID0gd29ya3NwYWNlLmdldExlYWZCeUlkKGxlYWZJZCk7XG5cdFx0XHR3b3Jrc3BhY2UucmV2ZWFsTGVhZihjdXJzb3JMZWFmKTtcblx0XHRcdGNvbnN0IGVkaXRvclZpZXc6IEVkaXRvclZpZXcgPSBnZXRFZGl0b3JWaWV3KGN1cnNvckxlYWYpO1xuXHRcdFx0aWYgKCFlZGl0b3JWaWV3KSB0aHJvdyBuZXcgRXJyb3IoXCJFZGl0b3IgdmlldyBub3QgZm91bmRcIik7XG5cblx0XHRcdGhpZ2hsaWdodFNlbGVjdGlvbihlZGl0b3JWaWV3LCBmcm9tLCB0byk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgPSBnZXRDb250YWluZXJFbGVtZW50KHRhcmdldExlYWYpO1xuXHRcdFx0aWYgKGNvbnRhaW5lckVsICE9IG51bGwpIHtcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdGNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXCIudmlldy1jb250ZW50XCIpPy5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcIlwiKTtcblx0XHRcdFx0fSwgNTApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICh0ZW1wICYmIHRhcmdldExlYWYpIHtcblx0XHR0YXJnZXRMZWFmLmRldGFjaCgpO1xuXG5cdFx0bGV0IG9yaWdpbmFsTGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmQnlJZChvcmlnaW5hbExlYWZJZCk7XG5cdFx0aWYgKCFvcmlnaW5hbExlYWYpIHRocm93IG5ldyBFcnJvcihcIk9yaWdpbmFsIGxlYWYgbm90IGZvdW5kXCIpO1xuXG5cdFx0d29ya3NwYWNlLnJldmVhbExlYWYob3JpZ2luYWxMZWFmKTtcblx0fVxuXG5cdGlmIChwZWVrKSB7XG5cdFx0bGV0IG9yaWdpbmFsTGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmQnlJZChvcmlnaW5hbExlYWZJZCk7XG5cdFx0aWYgKCFvcmlnaW5hbExlYWYpIHtcblx0XHRcdHJlc2V0SG92ZXIoKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9yaWdpbmFsIGxlYWYgbm90IGZvdW5kXCIpO1xuXHRcdH1cblxuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKG9yaWdpbmFsTGVhZik7XG5cdH1cblx0Ly8gaWYgKCF0ZW1wKSB7XG5cdC8vIFx0bGV0IG9yaWdpbmFsTGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmQnlJZChvcmlnaW5hbExlYWZJZCk7XG5cdC8vIFx0aWYgKCFvcmlnaW5hbExlYWYpIHRocm93IG5ldyBFcnJvcihcIk9yaWdpbmFsIGxlYWYgbm90IGZvdW5kXCIpO1xuXG5cdC8vIFx0d29ya3NwYWNlLnJldmVhbExlYWYob3JpZ2luYWxMZWFmKTtcblx0Ly8gfVxuXG5cdC8vIEVuZCBtdXRleCBsb2NrXG5cdHJlc2V0SG92ZXIoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuZEJhY2tsaW5rSG92ZXJFZmZlY3QoKSB7XG5cdGlmICghZ2V0QmFja2xpbmtIb3ZlcigpIHx8IE9iamVjdC5rZXlzKGdldEJhY2tsaW5rSG92ZXIoKSkubGVuZ3RoID09IDApIHtcblx0XHQvLyBFbmQgbXV0ZXggbG9ja1xuXHRcdHJlc2V0QmFja2xpbmtIb3ZlcigpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHtcblx0XHRkYXRhU3RyaW5nLFxuXHRcdGxlYWZJZCxcblx0XHRvcmlnaW5hbExlYWZJZCxcblx0XHRiYWNrbGlua0xlYWZJZCxcblx0XHR0ZW1wLFxuXHRcdGN1cnNvclZpZXdwb3J0LFxuXHRcdHBlZWssXG5cdFx0dXVpZCxcblx0XHRiYWNrbGlua1VVSUQsXG5cdH0gPSBnZXRCYWNrbGlua0hvdmVyKCk7XG5cdHJlc2V0QmFja2xpbmtIb3ZlcigpO1xuXG5cdGlmIChnZXRDdXJzb3IoKSAhPSBudWxsICYmIGdldEN1cnNvcigpLmRhdGFTdHJpbmcgPT0gZGF0YVN0cmluZykge1xuXHRcdC8vIEVuZCBtdXRleCBsb2NrXG5cdFx0cmVzZXRCYWNrbGlua0hvdmVyKCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgeyB3b3Jrc3BhY2UgfSA9IGdldFRoYXQoKTtcblx0bGV0IHRhcmdldExlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZkJ5SWQobGVhZklkKTtcblx0ZW5kRWZmZWN0UmVtb3ZlSGlnaGxpZ2h0cyh3b3Jrc3BhY2UsIGxlYWZJZCwgdXVpZCwgYmFja2xpbmtVVUlEKTtcblxuXHRpZiAoY3Vyc29yVmlld3BvcnQgJiYgdGFyZ2V0TGVhZiAmJiB0YXJnZXRMZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcblx0XHRjb25zdCB2aWV3OiBNYXJrZG93blZpZXcgPSB0YXJnZXRMZWFmLnZpZXc7XG5cdFx0dmlldy5lZGl0b3Iuc2Nyb2xsVG8oMCwgY3Vyc29yVmlld3BvcnQudG9wKTtcblx0fVxuXG5cdGxldCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgPSBnZXRDb250YWluZXJFbGVtZW50KHRhcmdldExlYWYpO1xuXHRpZiAoY29udGFpbmVyRWwgIT0gbnVsbCkge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Y29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihcIi52aWV3LWNvbnRlbnRcIik/LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiXCIpO1xuXHRcdH0sIDUwKTtcblx0fVxuXG5cdGxldCBlZGl0b3JWaWV3OiBFZGl0b3JWaWV3ID0gZ2V0RWRpdG9yVmlldyh0YXJnZXRMZWFmKTtcblxuXHRsZXQgW3ByZWZpeCwgdGV4dCwgc3VmZml4LCBmaWxlLCBmcm9tLCB0b10gPSBwcm9jZXNzVVJJKGRhdGFTdHJpbmcpO1xuXHQvLyByZW1vdmVIaWdobGlnaHQoZWRpdG9yVmlldywgZnJvbSwgdG8pO1xuXHQvLyByZW1vdmVIaWdobGlnaHRzKGVkaXRvclZpZXcpO1xuXG5cdC8vIGJhY2tsaW5rIGVmZmVjdFxuXHRjb25zdCBvcmlnaW5hbExlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZkJ5SWQoYmFja2xpbmtMZWFmSWQpO1xuXHRpZiAoIW9yaWdpbmFsTGVhZikge1xuXHRcdHJlc2V0QmFja2xpbmtIb3ZlcigpO1xuXHRcdHRocm93IG5ldyBFcnJvcihcIk9yaWdpbmFsIGxlYWYgbm90IGZvdW5kXCIpO1xuXHR9XG5cdGxldCBvcmlnaW5hbEVkaXRvclZpZXc6IEVkaXRvclZpZXcgPSBnZXRFZGl0b3JWaWV3KG9yaWdpbmFsTGVhZik7XG5cblx0cmVtb3ZlSGlnaGxpZ2h0KG9yaWdpbmFsRWRpdG9yVmlldywgZnJvbSwgdG8pO1xuXHRkZWZhdWx0SGlnaGxpZ2h0U2VsZWN0aW9uKG9yaWdpbmFsRWRpdG9yVmlldywgZnJvbSwgdG8pO1xuXG5cdC8vIHJlbW92ZUhpZ2hsaWdodHMob3JpZ2luYWxFZGl0b3JWaWV3KTtcblxuXHRpZiAoZ2V0Q3Vyc29yKCkgIT0gbnVsbCAmJiBnZXRDdXJzb3IoKS5kYXRhU3RyaW5nKSB7XG5cdFx0Y29uc3QgeyBkYXRhU3RyaW5nLCBjdXJzb3JWaWV3cG9ydCwgbGVhZklkLCBvcmlnaW5hbExlYWZJZCB9ID0gZ2V0Q3Vyc29yKCk7XG5cdFx0bGV0IFtwcmVmaXgsIHRleHQsIHN1ZmZpeCwgZmlsZSwgZnJvbSwgdG9dID0gcHJvY2Vzc1VSSShkYXRhU3RyaW5nKTtcblx0XHRjb25zdCBjdXJzb3JMZWFmID0gd29ya3NwYWNlLmdldExlYWZCeUlkKGxlYWZJZCk7XG5cdFx0d29ya3NwYWNlLnJldmVhbExlYWYoY3Vyc29yTGVhZik7XG5cblx0XHRjb25zdCBlZGl0b3JWaWV3OiBFZGl0b3JWaWV3ID0gZ2V0RWRpdG9yVmlldyhjdXJzb3JMZWFmKTtcblx0XHRoaWdobGlnaHRTZWxlY3Rpb24oZWRpdG9yVmlldywgZnJvbSwgdG8pO1xuXHR9XG5cblx0aWYgKHRlbXAgJiYgdGFyZ2V0TGVhZikge1xuXHRcdHRhcmdldExlYWYuZGV0YWNoKCk7XG5cdH1cblxuXHRpZiAocGVlaykge1xuXHRcdGxldCBvcmlnaW5hbExlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZkJ5SWQob3JpZ2luYWxMZWFmSWQpO1xuXHRcdGlmICghb3JpZ2luYWxMZWFmKSB7XG5cdFx0XHRyZXNldEJhY2tsaW5rSG92ZXIoKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9yaWdpbmFsIGxlYWYgbm90IGZvdW5kXCIpO1xuXHRcdH1cblxuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKG9yaWdpbmFsTGVhZik7XG5cdH1cblxuXHQvLyBpZiAodGVtcCkge1xuXHQvLyBcdHRhcmdldExlYWYuZGV0YWNoKCk7XG5cdC8vIFx0Ly8gc2V0VGltZW91dCgoKSA9PiB7XG5cdC8vIFx0Ly8gXHR0YXJnZXRMZWFmLmRldGFjaCgpO1xuXHQvLyBcdC8vIH0sIDEwMCk7XG5cdC8vIH0gZWxzZSB7XG5cdC8vIFx0Ly8gaWYgdGhlIGN1cnNvciBpcyBhY3RpdmUsIGhpZ2hsaWdodCB0aGUgc2VsZWN0aW9uXG5cdC8vIH1cblxuXHQvLyBFbmQgbXV0ZXggbG9ja1xuXHRyZXNldEJhY2tsaW5rSG92ZXIoKTtcbn1cbiIsICJpbXBvcnQgeyBFZGl0b3JWaWV3LCBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IFN0YXRlRmllbGQsIFN0YXRlRWZmZWN0IH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5pbXBvcnQgeyBTVkdfSE9WRVJfQ09MT1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgYWRkSGlnaGxpZ2h0ID0gU3RhdGVFZmZlY3QuZGVmaW5lPHsgZnJvbTogbnVtYmVyOyB0bzogbnVtYmVyIH0+KHtcblx0bWFwOiAoeyBmcm9tLCB0byB9LCBjaGFuZ2UpID0+ICh7XG5cdFx0ZnJvbTogY2hhbmdlLm1hcFBvcyhmcm9tKSxcblx0XHR0bzogY2hhbmdlLm1hcFBvcyh0byksXG5cdH0pLFxufSk7XG5cbmNvbnN0IGFkZERlZmF1bHRIaWdobGlnaHQgPSBTdGF0ZUVmZmVjdC5kZWZpbmU8eyBmcm9tOiBudW1iZXI7IHRvOiBudW1iZXIgfT4oe1xuXHRtYXA6ICh7IGZyb20sIHRvIH0sIGNoYW5nZSkgPT4gKHtcblx0XHRmcm9tOiBjaGFuZ2UubWFwUG9zKGZyb20pLFxuXHRcdHRvOiBjaGFuZ2UubWFwUG9zKHRvKSxcblx0fSksXG59KTtcblxuY29uc3QgcmVzZXRIaWdobGlnaHQgPSBTdGF0ZUVmZmVjdC5kZWZpbmU8eyBmcm9tOiBudW1iZXI7IHRvOiBudW1iZXIgfT4oe1xuXHRtYXA6ICh7IGZyb20sIHRvIH0sIGNoYW5nZSkgPT4gKHtcblx0XHRmcm9tOiBjaGFuZ2UubWFwUG9zKGZyb20pLFxuXHRcdHRvOiBjaGFuZ2UubWFwUG9zKHRvKSxcblx0fSksXG59KTtcblxuY29uc3QgaGlnaGxpZ2h0RmllbGQgPSBTdGF0ZUZpZWxkLmRlZmluZTxEZWNvcmF0aW9uU2V0Pih7XG5cdGNyZWF0ZSgpIHtcblx0XHRyZXR1cm4gRGVjb3JhdGlvbi5ub25lO1xuXHR9LFxuXHR1cGRhdGUoaGlnbGlnaHRzLCB0cikge1xuXHRcdGhpZ2xpZ2h0cyA9IGhpZ2xpZ2h0cy5tYXAodHIuY2hhbmdlcyk7XG5cdFx0Zm9yIChsZXQgZSBvZiB0ci5lZmZlY3RzKVxuXHRcdFx0aWYgKGUuaXMoYWRkRGVmYXVsdEhpZ2hsaWdodCkpIHtcblx0XHRcdFx0aGlnbGlnaHRzID0gaGlnbGlnaHRzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0YWRkOiBbZGVmYXVsdEhpZ2hsaWdodE1hcmsucmFuZ2UoZS52YWx1ZS5mcm9tLCBlLnZhbHVlLnRvKV0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIGlmIChlLmlzKGFkZEhpZ2hsaWdodCkpIHtcblx0XHRcdFx0aGlnbGlnaHRzID0gaGlnbGlnaHRzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0YWRkOiBbaGlnaGxpZ2h0TWFyay5yYW5nZShlLnZhbHVlLmZyb20sIGUudmFsdWUudG8pXSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKGUuaXMocmVzZXRIaWdobGlnaHQpKSB7XG5cdFx0XHRcdGhpZ2xpZ2h0cyA9IGhpZ2xpZ2h0cy51cGRhdGUoe1xuXHRcdFx0XHRcdGZpbHRlcjogKGZyb20sIHRvKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gIShmcm9tID09PSBlLnZhbHVlLmZyb20gJiYgdG8gPT09IGUudmFsdWUudG8pO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdHJldHVybiBoaWdsaWdodHM7XG5cdH0sXG5cdHByb3ZpZGU6IChmKSA9PiBFZGl0b3JWaWV3LmRlY29yYXRpb25zLmZyb20oZiksXG59KTtcblxuY29uc3QgaGlnaGxpZ2h0TWFyayA9IERlY29yYXRpb24ubWFyayh7IGNsYXNzOiBcImhpZ2hsaWdodFwiIH0pO1xuY29uc3QgZGVmYXVsdEhpZ2hsaWdodE1hcmsgPSBEZWNvcmF0aW9uLm1hcmsoeyBjbGFzczogXCJkZWZhdWx0LWhpZ2hsaWdodFwiIH0pO1xuY29uc3QgdGhlbWUgPSBFZGl0b3JWaWV3LmJhc2VUaGVtZSh7fSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBoaWdobGlnaHRTZWxlY3Rpb24odmlldzogRWRpdG9yVmlldywgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG5cdGxldCBlZmZlY3RzOiBTdGF0ZUVmZmVjdDx1bmtub3duPltdID0gW2FkZEhpZ2hsaWdodC5vZih7IGZyb20sIHRvIH0pXTtcblxuXHRpZiAoIWVmZmVjdHMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cblx0aWYgKCF2aWV3LnN0YXRlLmZpZWxkKGhpZ2hsaWdodEZpZWxkLCBmYWxzZSkpXG5cdFx0ZWZmZWN0cy5wdXNoKFN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZy5vZihbaGlnaGxpZ2h0RmllbGQsIHRoZW1lXSkpO1xuXG5cdHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzIH0pO1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuLy8gaGF2ZSBhIGZ1bmN0aW9uIHRoYXQgYWRkcyBzdWJ0bGUgaGlnaGxpZ2h0cyB0byBzdGF0ZVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRIaWdobGlnaHRTZWxlY3Rpb24oXG5cdHZpZXc6IEVkaXRvclZpZXcsXG5cdGZyb206IG51bWJlcixcblx0dG86IG51bWJlclxuKSB7XG5cdGxldCBlZmZlY3RzOiBTdGF0ZUVmZmVjdDx1bmtub3duPltdID0gW2FkZERlZmF1bHRIaWdobGlnaHQub2YoeyBmcm9tLCB0byB9KV07XG5cblx0aWYgKCFlZmZlY3RzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG5cdGNvbnNvbGUubG9nKFwiREVGQVVMVCBISUdITElHSFQgU0VMRUNUSU9OIFJBTkdFU1wiKTtcblx0Y29uc29sZS5sb2codmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzKTtcblx0Y29uc29sZS5sb2coZnJvbSwgdG8pO1xuXG5cdGlmICghdmlldy5zdGF0ZS5maWVsZChoaWdobGlnaHRGaWVsZCwgZmFsc2UpKVxuXHRcdGVmZmVjdHMucHVzaChTdGF0ZUVmZmVjdC5hcHBlbmRDb25maWcub2YoW2hpZ2hsaWdodEZpZWxkLCB0aGVtZV0pKTtcblxuXHR2aWV3LmRpc3BhdGNoKHsgZWZmZWN0cyB9KTtcblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhpZ2hsaWdodCh2aWV3OiBFZGl0b3JWaWV3LCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpIHtcblx0bGV0IGVmZmVjdHM6IFN0YXRlRWZmZWN0PHVua25vd24+W10gPSBbcmVzZXRIaWdobGlnaHQub2YoeyBmcm9tLCB0byB9KV07XG5cblx0aWYgKCFlZmZlY3RzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG5cdHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzIH0pO1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuLy8gdXBkYXRlIHJlbW92ZSBoaWdobGlnaHRzIHNvIHRoYXRcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVIaWdobGlnaHRzKHZpZXc6IEVkaXRvclZpZXcpIHtcblx0aWYgKCF2aWV3KSByZXR1cm47XG5cblx0bGV0IGVmZmVjdHM6IFN0YXRlRWZmZWN0PHVua25vd24+W10gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMubWFwKFxuXHRcdCh7IGZyb20sIHRvIH0pID0+IHJlc2V0SGlnaGxpZ2h0Lm9mKHsgZnJvbSwgdG8gfSlcblx0KTtcblx0aWYgKGVmZmVjdHMubGVuZ3RoKSB7XG5cdFx0dmlldy5kaXNwYXRjaCh7IGVmZmVjdHMgfSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBJIHdhbnQgdG8gYWRkIGEgYnVuY2ggb2YgaGlnaGxpZ2h0cyB0byB0aGUgc3RhdGUgdGhhdCB1c2Ugc29tZSBsaWdodGVyIGhpZ2hsaWdodCB0aGVtZVxuLy8gQW5kIHRoZW4gcmVtb3ZlIHRoZW0gYW5kIHVwZGF0ZSB0aGUgaGlnaGxpZ2h0cyBvbiBlYWNoIGdlbmVyYXRpb24gb2YgYmFja2xpbmtNYXJrUG9zaXRpb25zXG4iLCAiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blZpZXcsIEVkaXRvciB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHtcblx0cHJvY2Vzc1VSSSxcblx0cGFyc2VFZGl0b3JQb3NpdGlvbixcblx0ZW5jb2RlVVJJQ29tcG9uZW50U3RyaW5nLFxuXHRnZXRQcmVmaXhBbmRTdWZmaXgsXG59IGZyb20gXCIuL3V0aWxzXCI7XG5cbi8vIFtcdTIxOTddKHVybjpBbHNvLTogaG9wZWZ1bGx5IGZpeCB0aGUgbXVsdGktbGluZSByZWZlcmVuY2U6LSUwQS0gVVJOczoxMS0yMyBUb2RvLm1kKVxuLy8gW1x1MjE5N10odXJuOlBSRUZJWC06VEVYVDotU1VGRklYOkZJTEU6U1RBUlRJTkRFWDpFTkRJTkRFWClcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVDbGlwYm9hcmQoXG5cdHRvZ2dsZTogYm9vbGVhbiA9IGZhbHNlLFxuXHRvbmx5OiBib29sZWFuID0gZmFsc2Vcbikge1xuXHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0Ly8gTWFrZSBzdXJlIHRoZSB1c2VyIGlzIGVkaXRpbmcgYSBNYXJrZG93biBmaWxlLlxuXHRpZiAodmlldykge1xuXHRcdGxldCBzZWxlY3Rpb24gPSB2aWV3LmVkaXRvci5nZXRTZWxlY3Rpb24oKTtcblx0XHRpZiAodmlldy5maWxlKSB7XG5cdFx0XHRjb25zdCB0ZXh0ID0gdmlldy5kYXRhO1xuXHRcdFx0Y29uc3QgZnJvbSA9IHZpZXcuZWRpdG9yLnBvc1RvT2Zmc2V0KHZpZXcuZWRpdG9yLmdldEN1cnNvcihcImZyb21cIikpO1xuXHRcdFx0Y29uc3QgdG8gPSB2aWV3LmVkaXRvci5wb3NUb09mZnNldCh2aWV3LmVkaXRvci5nZXRDdXJzb3IoXCJ0b1wiKSk7XG5cdFx0XHRjb25zdCB7IHByZWZpeCwgc3VmZml4IH0gPSBnZXRQcmVmaXhBbmRTdWZmaXgodGV4dCwgZnJvbSwgdG8pO1xuXHRcdFx0bGV0IHJlZmVyZW5jZSA9IGBbXHUyMTk3XSh1cm46JHtlbmNvZGVVUklDb21wb25lbnRTdHJpbmcoXG5cdFx0XHRcdHByZWZpeFxuXHRcdFx0KX0tOiR7ZW5jb2RlVVJJQ29tcG9uZW50U3RyaW5nKHNlbGVjdGlvbil9Oi0ke2VuY29kZVVSSUNvbXBvbmVudFN0cmluZyhcblx0XHRcdFx0c3VmZml4XG5cdFx0XHQpfToke2VuY29kZVVSSUNvbXBvbmVudFN0cmluZyh2aWV3LmZpbGUucGF0aCl9OiR7ZnJvbX06JHt0b306JHtcblx0XHRcdFx0Ly8gb25seSA/IFwicG9ydGFsXCIgOiBcIm5vLXBvcnRhbFwiXG5cdFx0XHRcdFwicG9ydGFsXCJcblx0XHRcdH06JHt0b2dnbGUgPyBcInRcIiA6IFwiZlwifSlgO1xuXG5cdFx0XHQvLyBXcml0ZSB0aGUgc2VsZWN0ZWQgdGV4dCB0byB0aGUgY2xpcGJvYXJkXG5cdFx0XHRhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChyZWZlcmVuY2UpO1xuXHRcdH1cblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQTREOzs7QUNBNUQsbUJBS087QUFJQSxJQUFJLE9B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TSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQztBQUFBLElBQ3BJO0FBRUEsTUFBRSxDQUFDLElBQUk7QUFBQSxFQUNUO0FBRUEsSUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssTUFBTSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFO0FBQ3RELElBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEtBQUssTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUN0QyxJQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxNQUFNLFNBQVMsS0FBSyxJQUFJO0FBRXhDLFdBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUc7QUFDMUIsVUFBTSxJQUFJLElBQUksWUFBWSxFQUFFO0FBRTVCLGFBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEdBQUc7QUFDM0IsUUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUFBLElBQ2Y7QUFFQSxhQUFTLElBQUksSUFBSSxJQUFJLElBQUksRUFBRSxHQUFHO0FBQzVCLFFBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDO0FBQUEsSUFDNUQ7QUFFQSxRQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsUUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUksSUFBSSxFQUFFLENBQUM7QUFDWCxRQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsUUFBSSxJQUFJLEVBQUUsQ0FBQztBQUVYLGFBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEdBQUc7QUFDM0IsWUFBTSxJQUFJLEtBQUssTUFBTSxJQUFJLEVBQUU7QUFDM0IsWUFBTSxJQUFJLEtB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MUMsa0JBQU0sYUFBYSxLQUFLLElBQUksVUFBVSxRQUFRO0FBQzlDLGtCQUFNLFNBQVMsZ0JBQWdCLFVBQVUsRUFBRTtBQUMzQyxrQkFBTSxhQUFhLHdCQUF3QixNQUFNO0FBRWpELGtCQUFNLG1CQUFtQixTQUFTLE1BQU0sWUFBWSxHQUFHO0FBR3ZELGdCQUFJLEtBQUssVUFBVSxTQUFTLHVCQUF1QixHQUFHO0FBQ3JELG1CQUFLLFVBQVUsT0FBTyx1QkFBdUI7QUFBQSxZQUM5QztBQUdBLGlCQUFLLFVBQVUsSUFBSSx1QkFBdUI7QUFBQSxVQUMzQztBQUFBLFFBQ0Q7QUFBQSxNQUNEO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQUM7QUFDYjsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgInRoYXQiLCAiaW1wb3J0X3ZpZXciLCAiaW1wb3J0X29ic2lkaWFuIiwgImRvY3VtZW50IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X3ZpZXciLCAiaW1wb3J0X3N0YXRlIiwgImYiLCAiaW1wb3J0X3ZpZXciLCAiZWRpdG9yIiwgImJhY2tsaW5rQ29udGFpbmVyIiwgIndpbmRvd0hlaWdodCIsICJzY3JvbGxUb3AiLCAic2Nyb2xsQm90dG9tIiwgInZpc2libGVFbGVtZW50cyIsICJzdGFydFRvcCIsICJwb3NpdGlvbnMiLCAicmFuZ2VTdGFydCIsICJyYW5nZUVuZCIsICJjb250YWluZXIiLCAiZGF0YVN0cmluZyIsICJjdXJzb3JWaWV3cG9ydCIsICJsZWFmSWQiLCAib3JpZ2luYWxMZWFmSWQiLCAicHJlZml4IiwgInRleHQiLCAic3VmZml4IiwgImZpbGUiLCAiZnJvbSIsICJ0byIsICJlZGl0b3JWaWV3IiwgIm9yaWdpbmFsTGVhZiIsICJiYWNrbGlua3MiLCAiYmFja2xpbmtzIiwgImJhY2tsaW5rcyIsICJiYWNrbGlua3MiLCAidGV4dCIsICJpbmRleCIsICJyZWZlcmVuY2UiLCAicGFydHMiLCAibGluZVJlZmVyZW5jZXMiLCAibGluZVJlZmVyZW5jZXNEYXRhIiwgImxlYWYiLCAiYmFja2xpbmtzIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfdmlldyIsICJiYWNrbGlua3MiLCAidGV4dCIsICJsZWFmIl0KfQo=
