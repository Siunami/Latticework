/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ReferencePlugin,
  handleMovementEffects: () => handleMovementEffects
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/state.ts
var import_state = require("@codemirror/state");
var that = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "that") {
      return tr["annotations"][0].value.that.app;
    }
    return value;
  }
});
var hoveredCursor = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "hoveredCursor") {
      if (value)
        return [
          ...value.filter(
            (cursor) => cursor.user != tr["annotations"][0].value.user
          ),
          {
            cursor: tr["annotations"][0].value.cursor,
            user: tr["annotations"][0].value.user
          }
        ];
      return [
        {
          cursor: tr["annotations"][0].value.cursor,
          user: tr["annotations"][0].value.user
        }
      ];
    } else if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "removeHoveredCursor") {
      if (value)
        return value.filter(
          (cursor) => cursor.user != tr["annotations"][0].value.user
        );
      return value;
    }
    return value;
  }
});
var backlinks = import_state.StateField.define({
  create() {
    return [];
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(
          tr.effects[0].value
        );
        if (data.type == "backlink") {
          if (data.backlinks.length == 0)
            return value;
          let referencingLocation = data.backlinks[0]["referencingLocation"]["filename"];
          let filteredValues = value.filter(
            (backlink) => backlink.referencingLocation.filename != referencingLocation
          );
          return [...filteredValues, ...data.backlinks];
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var hoverElement = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "hover-start") {
          return Object.assign({}, data);
        } else if (data.type == "hover") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "hover-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var backlinkHoverElement = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "backlink-start") {
          return Object.assign({}, data);
        } else if (data.type == "backlink-update") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "backlink-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var cursorElement = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "cursor-start") {
          return {};
        } else if (data.type == "cursor") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "cursor-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var editorChange = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "sync") {
          return value;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var thatAnnotation = import_state.Annotation.define();
var hoveredCursorAnnotation = import_state.Annotation.define();
var hoverEffect = import_state.StateEffect.define();
var backlinkHoverEffect = import_state.StateEffect.define();
var cursorEffect = import_state.StateEffect.define();
var backlinkEffect = import_state.StateEffect.define();
var state = import_state.EditorState.create({
  extensions: [
    that,
    hoveredCursor,
    backlinks,
    hoverElement,
    backlinkHoverElement,
    cursorElement,
    editorChange
  ]
});
function getThat() {
  return state.field(that);
}
function updateThat(that2) {
  state = state.update({
    annotations: thatAnnotation.of({
      type: "that",
      that: that2
    })
  }).state;
}
function getHoveredCursor() {
  return state.field(hoveredCursor);
}
function updateHoveredCursor(cursor, user) {
  state = state.update({
    annotations: hoveredCursorAnnotation.of({
      type: "hoveredCursor",
      cursor,
      user
    })
  }).state;
}
function removeHoveredCursor(user) {
  state = state.update({
    annotations: hoveredCursorAnnotation.of({
      type: "removeHoveredCursor",
      user
    })
  }).state;
}
function getHover() {
  return state.field(hoverElement);
}
function updateHover(value) {
  state = state.update({
    effects: hoverEffect.of(
      JSON.stringify(Object.assign(value, { type: "hover" }))
    )
  }).state;
}
function resetHover() {
  state = state.update({
    effects: hoverEffect.of(
      JSON.stringify({
        type: "hover-off"
      })
    )
  }).state;
}
function getBacklinkHover() {
  return state.field(backlinkHoverElement);
}
function updateBacklinkHover(value) {
  state = state.update({
    effects: backlinkHoverEffect.of(
      JSON.stringify(Object.assign(value, { type: "backlink-update" }))
    )
  }).state;
}
function resetBacklinkHover() {
  state = state.update({
    effects: backlinkHoverEffect.of(
      JSON.stringify({
        type: "backlink-off"
      })
    )
  }).state;
}
function getCursor() {
  return state.field(cursorElement);
}
function updateCursor(value) {
  state = state.update({
    effects: cursorEffect.of(
      JSON.stringify(Object.assign(value, { type: "cursor" }))
    )
  }).state;
}
function resetCursor() {
  state = state.update({
    effects: cursorEffect.of(
      JSON.stringify({
        type: "cursor-off"
      })
    )
  }).state;
}
function updateBacklinks(value) {
  state = state.update({
    effects: backlinkEffect.of(
      JSON.stringify(Object.assign({ backlinks: value }, { type: "backlink" }))
    )
  }).state;
}

// src/widget/highlightWidget.ts
var import_view = require("@codemirror/view");

// src/constants.ts
var REFERENCE_REGEX = /\[\u2197\]\(urn:([^)]*)\)/g;
var ACTION_TYPE = {
  MOUSE: "mouse",
  CURSOR: "cursor",
  BACKLINK: "backlink"
};
var SVG_HOVER_COLOR = "rgb(187, 215, 230)";
var PORTAL_TEXT_SLICE_SIZE = 100;

// src/widget/highlightWidget.ts
var HighlighterWidget = class extends import_view.WidgetType {
  constructor(name, view) {
    super();
    this.name = name;
    this.view = view;
  }
  eq(other) {
    return this.name === other.name;
  }
  toDOM() {
    const span = document.createElement("fragment");
    span.textContent = this.name;
    span.style.backgroundColor = SVG_HOVER_COLOR;
    span.style.color = "black";
    return span;
  }
};
var highlighterDecoration = (match, view) => import_view.Decoration.replace({
  widget: new HighlighterWidget(match[1], view)
});
var highlightMatcher = new import_view.MatchDecorator({
  regexp: /\+\+\+(.*?)\+\+\+/g,
  decoration: (match, view, pos) => {
    return highlighterDecoration(match, view);
  }
});
var highlights = import_view.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.highlights = highlightMatcher.createDeco(view);
    }
    update(update) {
      this.highlights = highlightMatcher.updateDeco(update, this.highlights);
    }
    destroy() {
      this.highlights = import_view.Decoration.none;
    }
  },
  {
    decorations: (instance) => instance.highlights,
    provide: (plugin) => import_view.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.highlights) || import_view.Decoration.none;
    })
  }
);

// src/widget/referenceWidget.ts
var import_view4 = require("@codemirror/view");

// src/references.ts
var import_obsidian4 = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);
var v5_default = v5;

// src/utils.ts
var import_obsidian = require("obsidian");
function encodeURIComponentString(str) {
  return encodeURIComponent(str).replace(/[:()]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}
function decodeURIComponentString(str) {
  return decodeURIComponent(
    str.replace(/%3A/g, ":").replace(/%28/g, "(").replace(/%29/g, ")")
  );
}
function processURI(dataString) {
  let [prefix, text, suffix, file, from, to, portal, toggle] = dataString.split(":");
  prefix = decodeURIComponentString(prefix);
  text = decodeURIComponentString(text);
  suffix = decodeURIComponentString(suffix);
  file = decodeURIComponentString(file);
  from = decodeURIComponentString(from);
  to = decodeURIComponentString(to);
  if (portal)
    portal = decodeURIComponentString(portal);
  toggle = decodeURIComponentString(toggle);
  return [
    prefix,
    text,
    suffix,
    file,
    parseInt(from),
    parseInt(to),
    portal,
    toggle
  ];
}
function getPrefixAndSuffix(document2, from, to) {
  let prefix = document2.slice(from - 25, from).split("\n").slice(-1)[0];
  let suffix = document2.slice(to, to + 25).split("\n")[0];
  return { prefix, suffix };
}
function findTextPositions(text, searchTerm, prefix = "", suffix = "") {
  let rollingIndex = 0;
  const lines = text.split("\n").map((line, i) => {
    let data = { line, index: rollingIndex, length: line.length + 1, i };
    rollingIndex += data.length;
    return data;
  });
  if (text.includes(prefix + searchTerm + suffix)) {
    let matchIndex = text.indexOf(prefix + searchTerm + suffix);
    let startIndex = lines.findIndex((line) => line.index > matchIndex + prefix.length) - 1;
    let endIndex = lines.findIndex(
      (line) => line.index > matchIndex + prefix.length + searchTerm.length
    ) - 1;
    if (startIndex == -2)
      startIndex = lines.length - 1;
    if (endIndex == -2)
      endIndex = lines.length - 1;
    return {
      rangeStart: {
        line: startIndex,
        ch: matchIndex + prefix.length - lines[startIndex].index
      },
      rangeEnd: {
        line: endIndex,
        ch: matchIndex + prefix.length + searchTerm.length - lines[endIndex].index
      },
      lines
    };
  }
  return null;
}
function handleRemoveHoveredCursor(user) {
  if (getHoveredCursor()) {
    let nonCursors = getHoveredCursor().filter((element) => {
      return element.user !== user;
    }).map((element) => element.cursor.closest("span"));
    getHoveredCursor().filter((element) => element.user === user).forEach((element) => {
      if (!nonCursors.includes(element.cursor.closest("span"))) {
        let svg = element.cursor;
        if (!svg)
          throw new Error("SVG not found");
        if (svg.classList.contains("reference-icon"))
          svg.style.backgroundColor = "white";
        else {
          svg.setAttribute("fill", "white");
          svg.style.backgroundColor = "";
        }
        element.cursor.style.backgroundColor = "white";
      }
    });
    removeHoveredCursor(user);
  }
}

// src/workspace.ts
var import_obsidian2 = require("obsidian");
function collectLeavesByTab(split, result = []) {
  const type = split.type;
  if (!type)
    throw new Error("Split type not found");
  if (type == "tabs" || type == "split") {
    const children = split.children;
    if (!children)
      throw new Error("Split children not found");
    if (children) {
      for (const child of children) {
        let emptyList = [];
        collectLeavesByTab(child, result);
      }
    }
  } else if (type == "leaf") {
    const parentSplitId = split.parent.id;
    if (!parentSplitId)
      throw new Error("Split parent id not found");
    let idx = result.findIndex((tab) => {
      const tabId = tab[0].parent.id;
      return tabId == parentSplitId;
    });
    if (idx == -1) {
      result.push([split]);
    } else {
      result[idx].push(split);
    }
  }
  return result;
}
function collectLeavesByTabHelper() {
  const { workspace } = getThat();
  const currLeaf = workspace.getLeaf();
  const rootSplit = currLeaf.getRoot();
  return collectLeavesByTab(rootSplit);
}
function getCurrentTabIndex(leavesByTab, span) {
  let workspaceTab = span.closest(".workspace-tabs");
  let currTabIdx = leavesByTab.findIndex((tab) => {
    const leafTab = tab[0].view.containerEl.closest(".workspace-tabs");
    return leafTab == workspaceTab;
  });
  return currTabIdx;
}
function getAdjacentTabs(leavesByTab, currTabIdx, file) {
  let rightAdjacentTab = [];
  let leftAdjacentTab = [];
  let adjacentTabs = [];
  if (leavesByTab[currTabIdx + 1]) {
    rightAdjacentTab = leavesByTab[currTabIdx + 1];
    adjacentTabs = [...adjacentTabs, ...rightAdjacentTab];
  }
  if (leavesByTab[currTabIdx - 1]) {
    leftAdjacentTab = leavesByTab[currTabIdx - 1];
    adjacentTabs = [...adjacentTabs, ...leftAdjacentTab];
  }
  let index = adjacentTabs.findIndex(
    (x) => x.getViewState().state.file == file
  );
  return { adjacentTabs, rightAdjacentTab, leftAdjacentTab, index };
}
async function openFileInAdjacentTab(leavesByTab, currTabIdx, file, type) {
  let { adjacentTabs, rightAdjacentTab, leftAdjacentTab } = getAdjacentTabs(
    leavesByTab,
    currTabIdx,
    file
  );
  let allTabNames = leavesByTab.map(
    (tab) => tab.map((x) => x.getViewState().state.file)
  );
  let rightAdjacentTabNames = rightAdjacentTab.map(
    (x) => x.getViewState().state.file
  );
  let leftAdjacentTabNames = leftAdjacentTab.map(
    (x) => x.getViewState().state.file
  );
  const { workspace } = getThat();
  if (allTabNames.filter((v, i) => i != currTabIdx).flat().includes(file) && !rightAdjacentTabNames.includes(file) && !leftAdjacentTabNames.includes(file)) {
    let currentTabNames = [];
    let currentTab = [];
    allTabNames.forEach((tabNames, i) => {
      if (tabNames != rightAdjacentTabNames && tabNames != leftAdjacentTabNames && currTabIdx != i) {
        if (tabNames.includes(file)) {
          currentTabNames = tabNames;
          currentTab = leavesByTab[i];
        }
      }
    });
    const originalLeaf = currentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = currentTab[currentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    console.log("open file new tab");
    console.log(leaf);
    console.log(originalLeaf);
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (rightAdjacentTabNames.includes(file)) {
    const originalLeaf = rightAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = rightAdjacentTab[rightAdjacentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    console.log("open existing file right tab");
    console.log(leaf);
    console.log(originalLeaf);
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (leftAdjacentTabNames.includes(file)) {
    const originalLeaf = leftAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = leftAdjacentTab[leftAdjacentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    console.log("open existing file left tab");
    console.log(leaf);
    console.log(originalLeaf);
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (rightAdjacentTab.length > 0) {
    const originalLeaf = rightAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let currLeaf = workspace.getLeaf();
    workspace.setActiveLeaf(originalLeaf);
    let newLeaf = workspace.getLeaf(true);
    await openFileInLeaf(newLeaf, file);
    workspace.revealLeaf(newLeaf);
    workspace.setActiveLeaf(currLeaf);
    console.log("open new file right tab");
    console.log(newLeaf);
    console.log(originalLeaf);
    return { newLeaf, temp: true, originalLeaf };
  } else if (leftAdjacentTab.length > 0) {
    const originalLeaf = leftAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let currLeaf = workspace.getLeaf();
    workspace.setActiveLeaf(originalLeaf);
    let newLeaf = workspace.getLeaf(true);
    await openFileInLeaf(newLeaf, file);
    workspace.revealLeaf(newLeaf);
    workspace.setActiveLeaf(currLeaf);
    console.log("open new file left tab");
    console.log(newLeaf);
    console.log(originalLeaf);
    return { newLeaf, temp: true, originalLeaf };
  } else {
    const currLeaf = workspace.getLeaf();
    let newLeaf = workspace.createLeafBySplit(currLeaf);
    await openFileInLeaf(newLeaf, file);
    console.log("open new file left tab");
    console.log(newLeaf);
    console.log(currLeaf);
    return { newLeaf, temp: true, originalLeaf: currLeaf };
  }
}
async function openFileInLeaf(leaf, file) {
  let targetFile = getThat().vault.getAbstractFileByPath(file);
  if (targetFile && targetFile instanceof import_obsidian2.TFile)
    await leaf.openFile(targetFile, { active: false });
}

// src/effects.ts
var import_obsidian3 = require("obsidian");

// src/mark.ts
var import_view2 = require("@codemirror/view");
var import_state4 = require("@codemirror/state");
var addHighlight = import_state4.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var addDefaultHighlight = import_state4.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var resetHighlight = import_state4.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var highlightField = import_state4.StateField.define({
  create() {
    return import_view2.Decoration.none;
  },
  update(higlights, tr) {
    higlights = higlights.map(tr.changes);
    for (let e of tr.effects)
      if (e.is(addDefaultHighlight)) {
        higlights = higlights.update({
          add: [defaultHighlightMark.range(e.value.from, e.value.to)]
        });
      } else if (e.is(addHighlight)) {
        higlights = higlights.update({
          add: [highlightMark.range(e.value.from, e.value.to)]
        });
      } else if (e.is(resetHighlight)) {
        higlights = higlights.update({
          filter: (from, to) => {
            return !(from === e.value.from && to === e.value.to);
          }
        });
      }
    return higlights;
  },
  provide: (f2) => import_view2.EditorView.decorations.from(f2)
});
var highlightMark = import_view2.Decoration.mark({ class: "highlight" });
var defaultHighlightMark = import_view2.Decoration.mark({ class: "default-highlight" });
var theme = import_view2.EditorView.baseTheme({});
function highlightSelection(view, from, to) {
  let effects = [addHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  if (!view.state.field(highlightField, false))
    effects.push(import_state4.StateEffect.appendConfig.of([highlightField, theme]));
  view.dispatch({ effects });
  return true;
}
function defaultHighlightSelection(view, from, to) {
  let effects = [addDefaultHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  console.log("DEFAULT HIGHLIGHT SELECTION RANGES");
  console.log(view.state.selection.ranges);
  console.log(from, to);
  if (!view.state.field(highlightField, false))
    effects.push(import_state4.StateEffect.appendConfig.of([highlightField, theme]));
  view.dispatch({ effects });
  return true;
}
function removeHighlight(view, from, to) {
  let effects = [resetHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  view.dispatch({ effects });
  return true;
}

// src/effects.ts
var import_view3 = require("@codemirror/view");
function getEditorView(leaf) {
  var _a;
  if (!leaf)
    return null;
  const view = leaf.view;
  const editor = (_a = view.sourceMode) == null ? void 0 : _a.cmEditor;
  if (!editor.CodeMirror && editor.cm instanceof import_view3.EditorView) {
    const editorView = editor.cm;
    return editorView;
  }
  return null;
}
function checkSpanElementExists(span, containerEl) {
  const spanElements = containerEl.getElementsByTagName("span");
  for (let i = 0; i < spanElements.length; i++) {
    if (spanElements[i] === span) {
      return true;
    }
  }
  return false;
}
function parseCSSString(css) {
  const cssPropertiesRegex = /([\w-]+)\s*:\s*([^;]+)\s*;?/g;
  let cssPropertiesObject = {};
  let match;
  while ((match = cssPropertiesRegex.exec(css)) !== null) {
    cssPropertiesObject[match[1]] = match[2];
  }
  return cssPropertiesObject;
}
function delay(milliseconds) {
  return new Promise((resolve) => {
    setTimeout(resolve, milliseconds);
  });
}
function tempDirectionIndicator(leaf, text, prefix, suffix, dataString, isSame, user) {
  if (user === ACTION_TYPE.BACKLINK) {
    const editor2 = getMarkdownView(leaf).editor;
    const backlinkContainer2 = getBacklinkContainer(editor2);
    const windowHeight2 = leaf.view.containerEl.querySelector(".cm-scroller").getBoundingClientRect().height;
    const scrollTop2 = leaf.view.containerEl.querySelector(".cm-scroller").scrollTop;
    const scrollBottom2 = scrollTop2 + windowHeight2;
    let container = editor2.containerEl;
    let content = container.querySelector(".cm-content");
    let references = content.querySelectorAll(".reference-data-span");
    let visibleElements2 = [];
    for (let i = 0; i < references.length; i++) {
      let bbox = references[i].getBoundingClientRect();
      if (bbox.top >= scrollTop2 && bbox.bottom <= scrollBottom2) {
        visibleElements2.push(references[i]);
      }
    }
    let dataStrings = visibleElements2.map(
      (el) => el.getAttribute("data")
    );
    let startTop2 = leaf.view.editor.getScrollInfo().top;
    if (!dataStrings.includes(dataString)) {
      let positions2 = findTextPositions(
        leaf.view.data,
        text,
        prefix.slice(0, prefix.length - 1),
        suffix.slice(1, suffix.length)
      );
      if (!positions2)
        throw new Error("Positions not found");
      let rangeStart2 = positions2.rangeStart;
      let rangeEnd2 = positions2.rangeEnd;
      leaf.view.editor.scrollIntoView(
        {
          from: Object.assign(rangeStart2, { ch: 0 }),
          to: Object.assign(rangeEnd2, { ch: 0 })
        },
        true
      );
    }
    setTimeout(() => {
      let endTop = leaf.view.editor.getScrollInfo().top;
      console.log(endTop);
      let container2 = leaf.containerEl.querySelector(".view-content");
      container2.classList.remove("no-shadow");
      container2.classList.remove("new-shadow");
      container2.classList.remove("top-shadow");
      container2.classList.remove("bottom-shadow");
      if (startTop2 === endTop && isSame) {
        container2.classList.add("no-shadow");
      } else if (startTop2 === endTop && !isSame) {
        container2.classList.add("new-shadow");
      } else if (startTop2 < endTop) {
        container2.classList.add("top-shadow");
      } else {
        container2.classList.add("bottom-shadow");
      }
    }, 25);
    return;
  }
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  const windowHeight = leaf.view.containerEl.querySelector(".cm-scroller").getBoundingClientRect().height;
  const scrollTop = leaf.view.containerEl.querySelector(".cm-scroller").scrollTop;
  const scrollBottom = scrollTop + windowHeight;
  let visibleElements = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    let style = backlinkContainer.children[i].getAttribute("style");
    if (style == null)
      continue;
    let cssProperties = parseCSSString(style);
    let top = parseFloat(cssProperties["top"].replace("px", ""));
    if (top == null)
      continue;
    if (scrollTop <= top && top <= scrollBottom && backlinkContainer.children[i]) {
      let reference = backlinkContainer.children[i].getAttribute("reference");
      if (reference) {
        visibleElements.push(JSON.parse(reference).dataString);
      }
    }
  }
  console.log(!visibleElements.includes(dataString));
  let startTop = leaf.view.editor.getScrollInfo().top;
  let positions = findTextPositions(
    leaf.view.data,
    text,
    prefix.slice(0, prefix.length - 1),
    suffix.slice(1, suffix.length)
  );
  if (!positions)
    throw new Error("Positions not found");
  let rangeStart = positions.rangeStart;
  let rangeEnd = positions.rangeEnd;
  leaf.view.editor.scrollIntoView(
    {
      from: Object.assign(rangeStart, { ch: 0 }),
      to: Object.assign(rangeEnd, { ch: 0 })
    },
    true
  );
  console.log(startTop);
  setTimeout(() => {
    let endTop = leaf.view.editor.getScrollInfo().top;
    console.log(endTop);
    let container = leaf.containerEl.querySelector(".view-content");
    container.classList.remove("no-shadow");
    container.classList.remove("new-shadow");
    container.classList.remove("top-shadow");
    container.classList.remove("bottom-shadow");
    if (startTop === endTop && isSame) {
      container.classList.add("no-shadow");
    } else if (startTop === endTop && !isSame) {
      container.classList.add("new-shadow");
    } else if (startTop < endTop) {
      container.classList.add("top-shadow");
    } else {
      container.classList.add("bottom-shadow");
    }
  }, 25);
}
function endEffectRemoveHighlights(workspace, leafId, uuid, backlinkUUID) {
  var _a, _b, _c, _d, _e;
  const workspaceContainer = workspace.containerEl;
  const span = workspaceContainer.querySelector("." + uuid);
  (_b = (_a = span == null ? void 0 : span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.remove("reference-span-selected");
  span == null ? void 0 : span.classList.remove("reference-data-span-selected");
  if (backlinkUUID) {
    const backlinkSpan = workspaceContainer.querySelector("." + backlinkUUID);
    (_d = (_c = backlinkSpan == null ? void 0 : backlinkSpan.parentElement) == null ? void 0 : _c.querySelector(".reference-span")) == null ? void 0 : _d.classList.remove("reference-span-selected");
    backlinkSpan == null ? void 0 : backlinkSpan.classList.remove("reference-data-span-selected");
  }
  let targetLeaf = workspace.getLeafById(leafId);
  if (!targetLeaf) {
    resetCursor();
    throw new Error("Target leaf not found");
  }
  let container = (_e = getContainerElement(targetLeaf)) == null ? void 0 : _e.querySelector(".view-content");
  if (container) {
    container.classList.remove("no-shadow");
    container.classList.remove("new-shadow");
    container.classList.remove("top-shadow");
    container.classList.remove("bottom-shadow");
  }
}
async function startBacklinkEffect(span) {
  var _a, _b, _c, _d;
  let source = getBacklinkHover();
  let destination = getCursor();
  let updateState = updateBacklinkHover;
  if (source != null)
    return;
  updateState({
    type: `${ACTION_TYPE.BACKLINK}-start`
  });
  if (!span)
    return;
  let uuid = Array.from(span.classList).filter((el) => el.includes("uuid"))[0];
  (_b = (_a = span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.add("reference-span-selected");
  span.classList.add("reference-data-span-selected");
  updateState({
    uuid
  });
  const referenceData = span.getAttribute("reference");
  if (!referenceData)
    throw new Error("Reference data not found");
  const backlink = JSON.parse(referenceData);
  const dataString = backlink.dataString;
  if (destination != null && destination.dataString == dataString) {
    updateState(destination);
    return;
  }
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  let leavesByTab = collectLeavesByTabHelper();
  let currTabIdx = getCurrentTabIndex(leavesByTab, span);
  let backlinkLeaf = leavesByTab[currTabIdx].filter((leaf) => {
    let containerEl = getContainerElement(leaf);
    const exists = checkSpanElementExists(span, containerEl);
    return exists;
  })[0];
  let backlinkLeafID = backlinkLeaf.id;
  if (!backlinkLeafID)
    throw new Error("Leaf id not found");
  if (backlinkLeaf && backlinkLeaf.view instanceof import_obsidian3.MarkdownView) {
    const editorView = getEditorView(backlinkLeaf);
    if (!editorView)
      throw new Error("Editor view not found");
    const viewport = backlinkLeaf.view.editor.getScrollInfo();
    removeHighlight(editorView, from, to);
    highlightSelection(editorView, from, to);
    updateState({
      dataString,
      originalTop: editorView.documentTop,
      backlinkLeafId: backlinkLeafID
    });
  }
  let referencingFile = backlink.referencingLocation.filename;
  const { newLeaf, temp, originalLeaf } = await openFileInAdjacentTab(
    leavesByTab,
    currTabIdx,
    referencingFile
  );
  let id = newLeaf.id;
  if (!id)
    throw new Error("Leaf id not found");
  updateState({
    leafId: id,
    temp,
    peek: true
  });
  const originalLeafId = originalLeaf.id;
  const matches = [
    ...backlink.referencingLocation.text.matchAll(REFERENCE_REGEX)
  ];
  if (matches.length == 0)
    throw new Error("Matches not found");
  tempDirectionIndicator(
    newLeaf,
    backlink.referencingLocation.text,
    backlink.referencingLocation.prefix + "-",
    "-" + backlink.referencingLocation.suffix,
    matches[0][1],
    id === originalLeafId,
    ACTION_TYPE.BACKLINK
  );
  const cursorViewport = newLeaf.view.editor.getScrollInfo();
  updateState({
    cursorViewport
  });
  let backlinkSpan = newLeaf.containerEl.querySelector(
    `span[data="${backlink.dataString}"]`
  );
  if (backlinkSpan) {
    let backlinkUUID = Array.from(backlinkSpan.classList).filter(
      (el) => el.includes("uuid")
    )[0];
    (_d = (_c = backlinkSpan.parentElement) == null ? void 0 : _c.querySelector(".reference-span")) == null ? void 0 : _d.classList.add("reference-span-selected");
    backlinkSpan.classList.add("reference-data-span-selected");
    updateState({
      backlinkUUID
    });
  }
  if (originalLeafId) {
    updateState({
      originalLeafId
    });
  }
  return;
}
async function startReferenceEffect(span, type) {
  var _a, _b;
  let source = type == ACTION_TYPE.MOUSE ? getHover() : getCursor();
  let destination = type == ACTION_TYPE.MOUSE ? getCursor() : getHover();
  let updateState = type == ACTION_TYPE.MOUSE ? updateHover : updateCursor;
  if (source != null) {
    if (ACTION_TYPE.CURSOR == type) {
      await endReferenceCursorEffect();
    } else {
      return;
    }
  }
  updateState({
    type: `${type}-start`
  });
  if (!span)
    return;
  let uuid = Array.from(span.classList).filter((el) => el.includes("uuid"))[0];
  (_b = (_a = span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.add("reference-span-selected");
  span.classList.add("reference-data-span-selected");
  updateState({
    uuid
  });
  const dataString = span.getAttribute("data");
  if (!dataString)
    throw new Error("Data string not found");
  if (destination != null && destination.dataString == dataString && ACTION_TYPE.CURSOR != type) {
    updateHover(destination);
    return;
  }
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  let leavesByTab = collectLeavesByTabHelper();
  let currTabIdx = getCurrentTabIndex(leavesByTab, span);
  let currLeaf = getThat().workspace.getLeaf();
  let currLeafID = currLeaf.id;
  if (!currLeafID)
    throw new Error("currLeafID id not found");
  const { newLeaf, temp, originalLeaf } = await openFileInAdjacentTab(
    leavesByTab,
    currTabIdx,
    file,
    type
  );
  let id = newLeaf.id;
  if (!id)
    throw new Error("Leaf id not found");
  updateState({
    leafId: id,
    temp,
    peek: true
  });
  const originalLeafId = originalLeaf.id;
  console.log(newLeaf && newLeaf.view instanceof import_obsidian3.MarkdownView);
  if (newLeaf && newLeaf.view instanceof import_obsidian3.MarkdownView) {
    const editorView = getEditorView(newLeaf);
    if (!editorView)
      throw new Error("Editor view not found");
    const viewport = newLeaf.view.editor.getScrollInfo();
    removeHighlight(editorView, from, to);
    highlightSelection(editorView, from, to);
    console.log("leaves are equal" + id === originalLeafId);
    tempDirectionIndicator(
      newLeaf,
      text,
      prefix,
      suffix,
      dataString,
      id === originalLeafId
    );
    const cursorViewport = newLeaf.view.editor.getScrollInfo();
    updateState({
      dataString,
      originalTop: editorView.documentTop,
      // originalLeafId: currLeafID,
      cursorViewport
    });
  }
  if (originalLeafId) {
    updateState({
      originalLeafId
    });
  }
}
async function endReferenceCursorEffect() {
  var _a, _b;
  if (!getCursor() || Object.keys(getCursor()).length == 0) {
    resetCursor();
    return;
  }
  const {
    dataString,
    leafId,
    originalLeafId,
    temp,
    cursorViewport,
    peek,
    uuid,
    removed
  } = getCursor();
  resetCursor();
  if (getHover() != null && getHover().dataString == dataString) {
    resetCursor();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  endEffectRemoveHighlights(workspace, leafId, uuid);
  const activeLeaf = getThat().workspace.getLeaf();
  const activeLeafId = activeLeaf.id;
  let editorView = getEditorView(targetLeaf);
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  removeHighlight(editorView, from, to);
  if (!removed)
    defaultHighlightSelection(editorView, from, to);
  if (activeLeafId === leafId) {
    resetCursor();
    let containerEl = getContainerElement(targetLeaf);
    if (containerEl != null) {
      (_a = containerEl.querySelector(".view-content")) == null ? void 0 : _a.setAttribute("style", "");
    }
    return;
  }
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian3.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
    if (getHover() != null) {
      const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getHover();
      let [prefix2, text2, suffix2, file2, from2, to2] = processURI(dataString2);
      const cursorLeaf = workspace.getLeafById(leafId2);
      workspace.revealLeaf(cursorLeaf);
      const editorView2 = getEditorView(cursorLeaf);
      highlightSelection(editorView2, from2, to2);
    } else {
      let containerEl = getContainerElement(targetLeaf);
      if (containerEl != null) {
        (_b = containerEl.querySelector(".view-content")) == null ? void 0 : _b.setAttribute("style", "");
      }
    }
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
  }
  if (peek) {
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf)
      throw new Error("Original leaf not found");
    workspace.revealLeaf(originalLeaf);
  }
  resetCursor();
}
async function endReferenceHoverEffect() {
  if (!getHover() || Object.keys(getHover()).length == 0) {
    resetHover();
    return;
  }
  let { dataString, leafId, originalLeafId, temp, cursorViewport, peek, uuid } = getHover();
  resetHover();
  if (getCursor() != null && getCursor().dataString == dataString) {
    resetHover();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  endEffectRemoveHighlights(workspace, leafId, uuid);
  let editorView = getEditorView(targetLeaf);
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  removeHighlight(editorView, from, to);
  defaultHighlightSelection(editorView, from, to);
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian3.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
    if (getCursor() != null && getCursor().dataString) {
      const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getCursor();
      let [prefix2, text2, suffix2, file2, from2, to2, portal, toggle] = processURI(dataString2);
      const cursorLeaf = workspace.getLeafById(leafId2);
      workspace.revealLeaf(cursorLeaf);
      const editorView2 = getEditorView(cursorLeaf);
      if (!editorView2)
        throw new Error("Editor view not found");
      highlightSelection(editorView2, from2, to2);
    } else {
      let containerEl = getContainerElement(targetLeaf);
      if (containerEl != null) {
        setTimeout(() => {
          var _a;
          (_a = containerEl.querySelector(".view-content")) == null ? void 0 : _a.setAttribute("style", "");
        }, 50);
      }
    }
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf)
      throw new Error("Original leaf not found");
    workspace.revealLeaf(originalLeaf);
  }
  if (peek) {
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf) {
      resetHover();
      throw new Error("Original leaf not found");
    }
    workspace.revealLeaf(originalLeaf);
  }
  resetHover();
}
async function endBacklinkHoverEffect() {
  if (!getBacklinkHover() || Object.keys(getBacklinkHover()).length == 0) {
    resetBacklinkHover();
    return;
  }
  const {
    dataString,
    leafId,
    originalLeafId,
    backlinkLeafId,
    temp,
    cursorViewport,
    peek,
    uuid,
    backlinkUUID
  } = getBacklinkHover();
  resetBacklinkHover();
  if (getCursor() != null && getCursor().dataString == dataString) {
    resetBacklinkHover();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  endEffectRemoveHighlights(workspace, leafId, uuid, backlinkUUID);
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian3.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
  }
  let containerEl = getContainerElement(targetLeaf);
  if (containerEl != null) {
    setTimeout(() => {
      var _a;
      (_a = containerEl.querySelector(".view-content")) == null ? void 0 : _a.setAttribute("style", "");
    }, 50);
  }
  let editorView = getEditorView(targetLeaf);
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  const originalLeaf = workspace.getLeafById(backlinkLeafId);
  if (!originalLeaf) {
    resetBacklinkHover();
    throw new Error("Original leaf not found");
  }
  let originalEditorView = getEditorView(originalLeaf);
  removeHighlight(originalEditorView, from, to);
  defaultHighlightSelection(originalEditorView, from, to);
  if (getCursor() != null && getCursor().dataString) {
    const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getCursor();
    let [prefix2, text2, suffix2, file2, from2, to2] = processURI(dataString2);
    const cursorLeaf = workspace.getLeafById(leafId2);
    workspace.revealLeaf(cursorLeaf);
    const editorView2 = getEditorView(cursorLeaf);
    highlightSelection(editorView2, from2, to2);
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
  }
  if (peek) {
    let originalLeaf2 = workspace.getLeafById(originalLeafId);
    if (!originalLeaf2) {
      resetBacklinkHover();
      throw new Error("Original leaf not found");
    }
    workspace.revealLeaf(originalLeaf2);
  }
  resetBacklinkHover();
}

// src/references.ts
function generateDefaultHighlights(leaf) {
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  let editorView = getCodeMirrorEditorView(editor);
  let backlinks2 = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    backlinks2.push(backlinkContainer.children.item(i));
  }
  for (let backlink of backlinks2) {
    let reference = backlink.getAttribute("reference") ? JSON.parse(backlink.getAttribute("reference")) : null;
    if (reference) {
      let referenceFrom = reference.referencedLocation.from;
      let referenceTo = reference.referencedLocation.to;
      console.log("default highlight selection");
      defaultHighlightSelection(editorView, referenceFrom, referenceTo);
    }
  }
}
function createReferenceIcon(portalText = null) {
  const span = document.createElement("span");
  span.style.cursor = "pointer";
  span.classList.add("reference-data-span");
  span.classList.add("uuid-" + v4_default());
  if (portalText == null) {
    return span;
  }
  if (portalText != "inline reference widget |*|") {
    let portal = document.createElement("div");
    portal.classList.add("portal");
    portalText.split(":").forEach((text, index) => {
      if (index === 0 || index === 2)
        portal.innerHTML += decodeURIComponentString(text);
      else if (index === 1) {
        portal.innerHTML += `<span class="text-accent";>${text}</span>`;
      }
    });
    portal.style.userSelect = "none";
    portal.style.pointerEvents = "none";
    span.appendChild(portal);
  }
  return span;
}
function getCodeMirrorEditorView(editor) {
  return editor.cm;
}
function getContainerElement(editorOrLeaf) {
  return editorOrLeaf.containerEl;
}
function getBacklinkID(backlink) {
  const jsonString = JSON.stringify(backlink);
  const id = v5_default(jsonString, "fb813ebb-1b53-4306-aa9c-655627447f0b");
  return `backlink-${id}`;
}
function getBacklinkContainer(editor) {
  const containerEl = getContainerElement(editor);
  const referenceMarkContainerID = "referenceMarkContainer";
  const container = containerEl.querySelector(`#${referenceMarkContainerID}`);
  if (container) {
    return container;
  } else {
    const newContainer = document.createElement("div");
    newContainer.id = referenceMarkContainerID;
    containerEl.querySelector(".cm-scroller").appendChild(newContainer);
    return newContainer;
  }
}
function getLeafBBoxElements(leaf) {
  const title = getContainerElement(leaf).querySelector(".inline-title");
  if (!title) {
    throw new Error("Missing title");
  }
  const titleBbox = title.getBoundingClientRect();
  const line = getContainerElement(leaf).querySelector(".cm-line");
  if (!line) {
    throw new Error("Document has no lines");
  }
  const lineBbox = line.getBoundingClientRect();
  return { titleBbox, lineBbox };
}
function updateBacklinkMarkPosition(leaf, backlinksToLeaf, showPortals) {
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  let backlinks2 = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    backlinks2.push(backlinkContainer.children.item(i));
  }
  let backlinkIds = backlinksToLeaf.map((x) => getBacklinkID(x));
  backlinks2.map((x) => x.id).forEach((id) => {
    if (!backlinkIds.includes(id)) {
      let element = document.getElementById(id);
      if (element)
        element.remove();
    }
  });
  const { titleBbox, lineBbox } = getLeafBBoxElements(leaf);
  let referenceMarkers = backlinksToLeaf.map((backlink) => {
    const { from } = backlink.referencedLocation;
    const bbox = getCodeMirrorEditorView(editor).coordsAtPos(from);
    if (!bbox)
      return;
    let referenceMarker = backlinkContainer.querySelector(
      `#${getBacklinkID(backlink)}`
    );
    if (referenceMarker === null) {
      referenceMarker = createBacklinkMark(backlink);
      backlinkContainer.appendChild(referenceMarker);
    }
    if (bbox) {
      referenceMarker.style.position = "absolute";
      referenceMarker.setAttribute("top", bbox.top.toString());
      referenceMarker.style.top = bbox.top - titleBbox.top + 32 + "px";
      referenceMarker.style.left = lineBbox.width + 40 + "px";
    }
    return referenceMarker;
  });
  let lastYBottom = -Infinity;
  let margin = 4;
  referenceMarkers.sort(
    (a, b) => parseInt(a.getAttribute("top")) - parseInt(b.getAttribute("top"))
  ).forEach((marker) => {
    if (!marker)
      return;
    const portal = marker.querySelector(".portal");
    if (showPortals) {
      if (portal) {
        portal.style.display = "inline";
        marker.classList.add("backlink-span");
      }
    } else {
      if (portal) {
        portal.style.display = "none";
      }
      marker.classList.remove("backlink-span");
    }
    let top = parseInt(marker.getAttribute("top"));
    top = Math.max(top, lastYBottom + margin);
    lastYBottom = top + marker.getBoundingClientRect().height + margin;
    marker.setAttribute("top", top.toString());
    marker.style.top = top - titleBbox.top + 32 + "px";
    marker.style.left = lineBbox.width + 40 + "px";
  });
}
var debounceTimer;
async function updateBacklinkMarkPositions() {
  clearTimeout(debounceTimer);
  debounceTimer = setTimeout(async () => {
    console.log("updatebacklinkmarkpositions");
    const leaves = getThat().workspace.getLeavesOfType(
      "markdown"
    );
    setTimeout(async () => {
      const allBacklinks = await recomputeReferencesForPage();
      leaves.map(async (leaf) => {
        const backlinksToLeaf = allBacklinks.filter(
          // @ts-ignore
          (b) => b.referencedLocation.filename == leaf.view.file.path
        );
        const showPortals = getContainerElement(leaf).innerWidth > 900;
        updateBacklinkMarkPosition(leaf, backlinksToLeaf, showPortals);
      });
      await Promise.all(
        leaves.map(async (leaf) => {
          const backlinksToLeaf = allBacklinks.filter(
            // @ts-ignore
            (b) => b.referencedLocation.filename == leaf.view.file.path
          );
          const showPortals = getContainerElement(leaf).innerWidth > 900;
          updateBacklinkMarkPosition(leaf, backlinksToLeaf, showPortals);
        })
      );
    }, 500);
  }, 100);
}
function createBacklinkMark(backlink) {
  let span = createReferenceIcon(backlink.portalText);
  span.classList.add("backlink-data-span");
  const portal = span.querySelector(".portal");
  span.style.position = "absolute";
  span.id = getBacklinkID(backlink);
  span.setAttribute("reference", JSON.stringify(backlink));
  const resizeObserver = new ResizeObserver((entries) => {
    if (portal && portal.style.display != "none") {
      span.classList.add("backlink-portal-open");
    } else {
      span.classList.remove("backlink-portal-open");
    }
  });
  resizeObserver.observe(span);
  span.addEventListener("click", openBacklinkReference);
  return span;
}
var existingObserver = null;
async function addReferencesToLeaf(leaf) {
  const markdownView = getMarkdownView(leaf);
  let workspaceTabs = markdownView.containerEl.closest(".workspace-tabs");
  if (!workspaceTabs) {
    throw new Error("Missing workspace tabs");
  }
  await updateBacklinkMarkPositions();
  await delay(1e3);
  console.log("initial load");
  generateDefaultHighlights(leaf);
  if (existingObserver) {
    existingObserver.disconnect();
  }
  const newObserver = new ResizeObserver(async () => {
    await updateBacklinkMarkPositions();
    await delay(1e3);
    console.log("resize load");
  });
  newObserver.observe(workspaceTabs);
  existingObserver = newObserver;
  return leaf;
}
function getMarkdownView(leaf) {
  if (!(leaf.view instanceof import_obsidian4.MarkdownView)) {
    throw new Error("Unexpected non-markdown view");
  }
  return leaf.view;
}
function findMatchPositions(line, regex) {
  let match;
  const positions = [];
  while ((match = regex.exec(line)) !== null) {
    positions.push({
      match: match[0],
      start: match.index,
      end: match.index + match[0].length
    });
  }
  return positions;
}
function createBacklinkData(referencingFileData, referencingFile) {
  let backlinks2 = [];
  let matches = [...referencingFileData.matchAll(REFERENCE_REGEX)];
  matches.forEach((match) => {
    if (match[1].split(":").length != 8)
      return;
    let [prefix, text, suffix, filename, from, to, portal, toggle] = processURI(
      match[1]
    );
    const referencedLocation = {
      prefix,
      text,
      suffix,
      filename,
      from,
      to,
      portal,
      toggle
    };
    let index = referencingFileData.indexOf(match[0]);
    const referencingSurroundingStrings = getPrefixAndSuffix(
      referencingFileData,
      index,
      index + match[0].length
    );
    const referencingLocation = {
      // prefix: referencingFileData.slice(index - 25, index),
      prefix: referencingSurroundingStrings.prefix,
      text: referencingFileData.slice(index, index + match[0].length),
      // suffix: referencingFileData.slice(
      // 	index + match[0].length,
      // 	index + match[0].length + 25
      // ),
      suffix: referencingSurroundingStrings.suffix,
      filename: referencingFile.path,
      from: match.index,
      // TODO do weird string format
      to: match.index + match[0].length,
      // TODO do weird string format
      portal,
      toggle
    };
    if (portal == "portal") {
      const getLineText = (text2, index2) => {
        const startOfLine = text2.lastIndexOf("\n", index2 - 1) + 1;
        const endOfLine = text2.indexOf("\n", index2);
        return text2.slice(
          startOfLine,
          endOfLine !== -1 ? endOfLine : void 0
        );
      };
      let line = getLineText(referencingFileData, index);
      let matchPositions = findMatchPositions(
        line,
        new RegExp(REFERENCE_REGEX)
      );
      let matchIndex = 0;
      for (let i = 0; i < matchPositions.length; i++) {
        if (matchPositions[i].match == match[0]) {
          break;
        } else {
          matchIndex += matchPositions[i].end - matchPositions[i].start - 1;
        }
      }
      let portalText = line.replace(new RegExp(REFERENCE_REGEX, "g"), "\u2197");
      let portalTextSlice = portalText.slice(0, PORTAL_TEXT_SLICE_SIZE);
      let portalTextIndex = line.indexOf(match[0]) - matchIndex;
      portalTextSlice = "\u2197";
      let startPortalText = portalText.substring(
        Math.max(portalTextIndex - 25, 0),
        portalTextIndex
      );
      if (portalText.substring(Math.max(portalTextIndex - 25, 0), portalTextIndex).length > 0 && portalTextIndex - 25 > 0)
        startPortalText = "..." + startPortalText;
      let endPortalText = portalText.substring(
        portalTextIndex + 1,
        Math.max(portalTextIndex + 25, portalText.length)
      );
      if (portalText.substring(
        portalTextIndex + 1,
        Math.max(portalTextIndex + 25, portalText.length)
      ).length > 0 && portalTextIndex + 25 < portalText.length)
        endPortalText = endPortalText + "...";
      backlinks2.push({
        referencedLocation,
        referencingLocation,
        dataString: match[1],
        portalText: encodeURIComponentString(startPortalText) + ":" + portalTextSlice + ":" + encodeURIComponentString(endPortalText)
      });
    } else {
      backlinks2.push({
        referencedLocation,
        referencingLocation,
        dataString: match[1]
      });
    }
  });
  return backlinks2;
}
async function generateBacklinks() {
  console.log("generating references");
  setTimeout(async () => {
    let backlinks2 = [];
    let markdownFiles = this.app.vault.getMarkdownFiles();
    await Promise.all(
      markdownFiles.map((file) => this.app.vault.read(file))
    ).then((files) => {
      const zippedArray = markdownFiles.map((file, index) => ({
        markdownFile: file,
        fileData: files[index]
      }));
      zippedArray.forEach((file) => {
        let fileBacklinks = createBacklinkData(
          file.fileData,
          file.markdownFile
        );
        updateBacklinks(fileBacklinks);
        backlinks2.push(...fileBacklinks);
      });
    });
  }, 0);
}
function updateHoveredReferenceColor(span, user) {
  const portal = span.querySelector(".portal");
  if (span && !portal) {
    console.log(span);
    handleRemoveHoveredCursor(user);
    span.style.backgroundColor = SVG_HOVER_COLOR;
    updateHoveredCursor(span, user);
  }
}
async function recomputeReferencesForPage() {
  await delay(10);
  let references = [];
  let markdownFiles = this.app.vault.getMarkdownFiles();
  let promises = markdownFiles.map((file) => this.app.vault.read(file));
  let files = await Promise.all(promises);
  const zippedArray = markdownFiles.map((file, index) => ({
    markdownFile: file,
    fileData: files[index]
  }));
  zippedArray.forEach((file) => {
    let fileBacklinks = createBacklinkData(file.fileData, file.markdownFile);
    updateBacklinks(fileBacklinks);
    references.push(...fileBacklinks);
  });
  return references;
}
async function openBacklinkReference(ev) {
  let cursor = getCursor();
  let hover = getBacklinkHover();
  let leaf = getThat().workspace.getLeafById(hover.leafId);
  let container = leaf.containerEl;
  if (!container)
    throw new Error("Container not found");
  container.querySelector(".view-content").style.boxShadow = "none";
  if (cursor && hover && cursor.dataString && hover.dataString && cursor.dataString == hover.dataString) {
    updateCursor({
      temp: false,
      cursorViewport: null,
      peek: false
    });
  }
  updateBacklinkHover({
    temp: false,
    cursorViewport: null,
    peek: false
  });
  handleRemoveHoveredCursor(ACTION_TYPE.CURSOR);
  resetCursor();
}
async function openReference(ev) {
  let cursor = getCursor();
  let hover = getHover();
  let leaf = getThat().workspace.getLeafById(hover.leafId);
  let container = leaf.containerEl;
  if (!container)
    throw new Error("Container not found");
  container.querySelector(".view-content").style.boxShadow = "none";
  if (cursor && hover && cursor.dataString && hover.dataString && cursor.dataString == hover.dataString) {
    updateCursor({
      temp: false,
      cursorViewport: null,
      peek: false
    });
  }
  updateHover({
    temp: false,
    cursorViewport: null,
    peek: false
  });
  handleRemoveHoveredCursor(ACTION_TYPE.CURSOR);
  resetCursor();
}

// src/widget/referenceWidget.ts
function processLine(line) {
  let lineCopy = line == null ? void 0 : line.cloneNode(true);
  lineCopy == null ? void 0 : lineCopy.querySelectorAll(".reference-span").forEach((span) => {
    span.innerHTML = "\u2197";
  });
  return lineCopy;
}
function getReferencePosition(view, currLine, reference, content) {
  let lines = view.contentDOM.querySelectorAll(".cm-line");
  let activeLineIndex;
  let seenActive = false;
  lines.forEach((line, i) => {
    if (seenActive)
      return;
    if (line == currLine) {
      seenActive = true;
      activeLineIndex = i;
    }
  });
  if (activeLineIndex === void 0)
    return;
  let activeLine = lines[activeLineIndex];
  let activeLineCopy = processLine(activeLine);
  let parts = activeLineCopy.innerText.split("\u2197");
  let lineReferences = activeLine == null ? void 0 : activeLine.querySelectorAll(".reference-data-span");
  let lineReferencesData = Array.from(lineReferences || []).map(
    (span) => "[\u2197](urn:" + span.getAttribute("data") + ")"
  );
  if (!content)
    throw new Error("Reference not found");
  let index = null;
  lineReferencesData.forEach((reference2, i) => {
    if (!index) {
      if (reference2.includes(content)) {
        index = i;
      }
    }
  });
  if (!index && index != 0)
    throw new Error("Reference not found");
  let startText = [
    ...parts.slice(0, index + 1),
    ...lineReferencesData.slice(0, index)
  ];
  let prevLineCharCount = Array.from(lines).slice(0, activeLineIndex).reduce((acc, line) => {
    let processedLine = processLine(line);
    let parts2 = processedLine.innerText.split("\u2197");
    let lineReferences2 = line == null ? void 0 : line.querySelectorAll(".reference-data-span");
    let lineReferencesData2 = Array.from(lineReferences2 || []).map(
      (span) => "[\u2197](urn:" + span.getAttribute("data") + ")"
    );
    let allSerializedText = [...parts2, ...lineReferencesData2].join("") + "\n";
    return allSerializedText.length + acc;
  }, 0);
  let from = prevLineCharCount + startText.join("").length;
  let to = from + reference.length;
  return { from, to };
}
async function serializeReference(content, referenceSpan, view, toggleValue = null) {
  var _a;
  content = typeof content == "string" ? content : content[1];
  const [prefix, text, suffix, file, from, to, portal, toggle] = content.split(":");
  let newToggle = toggleValue ? toggleValue : toggle === "f" ? "t" : "f";
  let reference = `[\u2197](urn:${prefix}:${text}:${suffix}:${file}:${from}:${to}:${portal}:${newToggle})`;
  let currLine = (_a = referenceSpan == null ? void 0 : referenceSpan.parentElement) == null ? void 0 : _a.parentElement;
  const results = getReferencePosition(
    view,
    currLine,
    reference,
    text
  );
  if (results) {
    const { from: transactionFrom, to: transactionTo } = results;
    const transaction = view.state.update({
      changes: { from: transactionFrom, to: transactionTo, insert: reference }
    });
    view.dispatch(transaction);
    await updateBacklinkMarkPositions();
  }
  return;
}
var ReferenceWidget = class extends import_view4.WidgetType {
  constructor(name, view, pos, referenceSpan = null, parentElement = null, serialized = false) {
    super();
    this.name = name;
    this.view = view;
    this.pos = pos;
    this.referenceSpan = referenceSpan;
    this.parentElement = parentElement;
    this.serialized = serialized;
  }
  eq(other) {
    return this.name === other.name;
  }
  getView() {
    return this.view;
  }
  // this runs when re-serialized as well
  destroy() {
    if (this.serialized) {
      this.serialized = false;
      return;
    }
    setTimeout(() => {
      const regex = /\[↗\]\(urn:([^)]*)\)/g;
      let content = regex.exec(this.name);
      if (!content)
        throw new Error("Invalid reference");
      let reference = content[0];
      let dataString = content[1];
      const [prefix, text, suffix, file, from, to, portal, toggle = "f"] = dataString.split(":");
      let decodedFile = decodeURIComponentString(file);
      let leavesByTab = collectLeavesByTabHelper();
      let leaf = leavesByTab.flat().filter((leaf2) => {
        return leaf2.getViewState().state.file == decodedFile;
      })[0];
      let view = getEditorView(leaf);
      removeHighlight(view, parseInt(from), parseInt(to));
      const editor = getMarkdownView(leaf).editor;
      const backlinkContainer = getBacklinkContainer(editor);
      const backlinks2 = Array.from(
        backlinkContainer.querySelectorAll(".reference-data-span")
      );
      const backlinkData = backlinks2.map((backlink) => {
        let reference2 = backlink.getAttribute("reference");
        if (!reference2)
          return {};
        return JSON.parse(reference2);
      });
      const backlinkIndex = backlinkData.findIndex((backlink) => {
        return backlink.dataString === dataString && backlink.referencedLocation.filename === decodeURIComponentString(file);
      });
      backlinks2[backlinkIndex].remove();
    }, 10);
  }
  toDOM() {
    const regex = /\[↗\]\(urn:([^)]*)\)/g;
    let content = regex.exec(this.name);
    if (!content)
      throw new Error("Invalid reference");
    const [prefix, text, suffix, file, from, to, portal, toggle = "f"] = content[1].split(":");
    const span = createReferenceIcon(
      portal == "portal" ? "inline reference widget |*|" : null
    );
    if (content)
      span.setAttribute("data", content[1]);
    const containerSpan = document.createElement("span");
    containerSpan.classList.add("reference-container-span");
    const referenceSpan = document.createElement("span");
    referenceSpan.classList.add("reference-span");
    referenceSpan.innerHTML = decodeURIComponentString(text);
    referenceSpan.classList.toggle("reference-span-hidden", toggle === "f");
    containerSpan.appendChild(referenceSpan);
    containerSpan.appendChild(span);
    this.referenceSpan = referenceSpan;
    setTimeout(() => {
      this.parentElement = containerSpan.parentElement;
    }, 20);
    containerSpan.addEventListener("click", async (ev) => {
      var _a;
      if (ev.metaKey || ev.ctrlKey) {
        openReference(ev);
      } else {
        this.serialized = true;
        await serializeReference(content, referenceSpan, this.view);
        referenceSpan.classList.toggle("reference-span-hidden");
        if (content)
          this.name = content[0];
        if (referenceSpan) {
          this.referenceSpan = referenceSpan;
          this.parentElement = (_a = referenceSpan == null ? void 0 : referenceSpan.parentElement) == null ? void 0 : _a.parentElement;
        }
      }
    });
    return containerSpan;
  }
};
var referenceDecoration = (match, view, pos) => {
  let decoration = import_view4.Decoration.replace({
    widget: new ReferenceWidget(match[0], view, pos)
  });
  return decoration;
};
var referenceMatcher = new import_view4.MatchDecorator({
  // regexp: /\[\u2197\]\(urn:[\s\S^\)]*\)/g,
  // regexp: /\[\u2197\]\(urn:([^:]*:){5,6}[^:]*\)/g,
  // regexp: /\[\u2197\]\(urn:([^:]*:){6}[^:)]*\)/g,
  regexp: /\[\u2197\]\(urn:([^:]*:){7}[^:)]*\)/g,
  decoration: (match, view, pos) => {
    return referenceDecoration(match, view, pos);
  }
});
var referenceResources = import_view4.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.referenceResources = referenceMatcher.createDeco(view);
    }
    update(update) {
      this.referenceResources = referenceMatcher.updateDeco(
        update,
        this.referenceResources
      );
    }
    destroy() {
      this.referenceResources = import_view4.Decoration.none;
    }
  },
  {
    decorations: (instance) => instance.referenceResources,
    provide: (plugin) => import_view4.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.referenceResources) || import_view4.Decoration.none;
    })
  }
);

// src/clipboard.ts
var import_obsidian5 = require("obsidian");
async function updateClipboard(toggle = false, only = false) {
  const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
  if (view) {
    let selection = view.editor.getSelection();
    if (view.file) {
      const text = view.data;
      const from = view.editor.posToOffset(view.editor.getCursor("from"));
      const to = view.editor.posToOffset(view.editor.getCursor("to"));
      const { prefix, suffix } = getPrefixAndSuffix(text, from, to);
      let reference = `[\u2197](urn:${encodeURIComponentString(
        prefix
      )}-:${encodeURIComponentString(selection)}:-${encodeURIComponentString(
        suffix
      )}:${encodeURIComponentString(view.file.path)}:${from}:${to}:${// only ? "portal" : "no-portal"
      "portal"}:${toggle ? "t" : "f"})`;
      await navigator.clipboard.writeText(reference);
    }
  }
}

// src/main.ts
var import_view5 = require("@codemirror/view");
var lastMouse = null;
async function handleMovementEffects(evt) {
  let span;
  if (evt.target && (evt.target instanceof HTMLSpanElement || evt.target instanceof SVGElement || evt.target instanceof SVGPathElement)) {
    span = evt.target;
    while (!(span instanceof HTMLSpanElement) && span.parentElement != null) {
      span = span.parentElement;
    }
  } else if (lastMouse) {
    const mouseX = lastMouse.clientX;
    const mouseY = lastMouse.clientY;
    span = document.elementFromPoint(mouseX, mouseY);
  }
  if (!evt.metaKey && !evt.ctrlKey) {
    if (getHover() != null) {
      await endReferenceHoverEffect();
      handleRemoveHoveredCursor(ACTION_TYPE.MOUSE);
    } else if (getBacklinkHover() != null) {
      await endBacklinkHoverEffect();
    }
    return;
  } else {
    console.log(span);
    if (span && span instanceof HTMLSpanElement && (span == null ? void 0 : span.parentElement) && (span == null ? void 0 : span.parentElement.classList.contains("reference-container-span"))) {
      console.log("start hover reference effect");
      if (getHover() != null)
        return;
      if (!span.getAttribute("data")) {
        span = span.parentElement;
        span = span.querySelector(".reference-data-span");
        if (!span)
          throw new Error("Span element not found");
      }
      updateHoveredReferenceColor(span, ACTION_TYPE.MOUSE);
      startReferenceEffect(span, ACTION_TYPE.MOUSE);
    } else if (span && span instanceof HTMLSpanElement && span.getAttribute("reference")) {
      console.log("start hover backlink effect");
      if (getBacklinkHover() != null)
        return;
      startBacklinkEffect(span);
    } else if (getHover() != null) {
      console.log("end hover reference effect");
      const requiredKeys = [
        "dataString",
        "leafId",
        "originalLeafId",
        "temp",
        "cursorViewport",
        "peek",
        "uuid"
      ];
      const allKeysPresent = () => requiredKeys.every((key) => key in getHover());
      if (!allKeysPresent()) {
        await new Promise((resolve) => setTimeout(resolve, 50));
      }
      await endReferenceHoverEffect();
      handleRemoveHoveredCursor(ACTION_TYPE.MOUSE);
    } else if (getBacklinkHover() != null) {
      console.log("end hover backlink effect");
      const requiredKeys = [
        "dataString",
        "leafId",
        "originalLeafId",
        "backlinkLeafId",
        "temp",
        "cursorViewport",
        "peek",
        "uuid",
        "backlinkUUID"
      ];
      const allKeysPresent = () => requiredKeys.every((key) => key in getBacklinkHover());
      if (!allKeysPresent()) {
        await new Promise((resolve) => setTimeout(resolve, 50));
      }
      await endBacklinkHoverEffect();
    }
  }
  await updateBacklinkMarkPositions();
}
var ReferencePlugin = class extends import_obsidian6.Plugin {
  onload() {
    setTimeout(async () => {
      await generateBacklinks();
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      let promises = leaves.map(
        (leaf) => {
          return addReferencesToLeaf(leaf);
        }
      );
      await Promise.all(promises);
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", async (ev) => {
          try {
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
            if ((activeView == null ? void 0 : activeView.leaf) != null) {
              await addReferencesToLeaf(activeView.leaf);
            }
          } catch (e) {
            console.log(e);
          }
        })
      );
    }, 4e3);
    updateThat(this);
    this.registerEditorExtension([
      highlights,
      referenceResources,
      import_view5.EditorView.updateListener.of(function(e) {
        if (Math.abs(e.changes.desc.newLength - e.changes.desc.length) > 1) {
          updateBacklinkMarkPositions();
        }
      })
    ]);
    let prevX = 0;
    let prevY = 0;
    this.registerDomEvent(document, "mousemove", async (evt) => {
      let difference = Math.abs(prevX - evt.clientX) + Math.abs(prevY - evt.clientY);
      prevX = evt.clientX;
      prevY = evt.clientY;
      lastMouse = evt;
      if (difference > 10) {
        return;
      }
      handleMovementEffects(evt);
    });
    this.registerDomEvent(document, "click", async (evt) => {
      console.log("click");
      console.log(evt);
      handleMovementEffects(evt);
      updateBacklinkMarkPositions();
    });
    this.registerDomEvent(document, "keyup", async (evt) => {
      if (evt.metaKey || evt.ctrlKey)
        return;
      handleMovementEffects(evt);
      updateBacklinkMarkPositions();
    });
    this.registerDomEvent(document, "keydown", async (evt) => {
      var _a, _b;
      console.log(evt);
      if (evt.metaKey || evt.ctrlKey) {
        handleMovementEffects(evt);
      }
      if (evt.key == "v" && (evt.metaKey || evt.ctrlKey)) {
        console.log("hello");
        let currentLeaf = getThat().workspace.getLeaf();
        await addReferencesToLeaf(currentLeaf);
      } else if (evt.key == "\xC7" && (evt.metaKey || evt.ctrlKey) && evt.shiftKey && evt.altKey) {
        updateClipboard(false);
        new import_obsidian6.Notice("Copied reference to clipboard");
      } else if ((evt.key == "c" || evt.key == "C") && (evt.metaKey || evt.ctrlKey) && evt.shiftKey) {
        updateClipboard(true);
        new import_obsidian6.Notice("Copied reference to clipboard");
      } else if ((evt.key == "s" || evt.key == "S") && (evt.metaKey || evt.ctrlKey) && evt.shiftKey) {
        let target = evt.target;
        let children = Array.from(target.children);
        let currentLine = children.filter(
          (child) => child.classList.contains("cm-active")
        )[0];
        const spans = Array.from(
          currentLine.querySelectorAll(".reference-span")
        );
        let hasOneHidden = false;
        spans.forEach((span) => {
          if (span.classList.contains("reference-span-hidden")) {
            hasOneHidden = true;
          }
        });
        if (spans.every(
          (span) => span.classList.contains("reference-span-hidden")
        ) || hasOneHidden) {
          new import_obsidian6.Notice("Toggle annotations on");
          for (const span of spans) {
            let referenceSpan = (_a = span.parentElement) == null ? void 0 : _a.querySelector(
              ".reference-data-span"
            );
            let content = referenceSpan == null ? void 0 : referenceSpan.getAttribute("data");
            const activeView = this.app.workspace.getLeaf();
            const editor = getMarkdownView(activeView).editor;
            const editorView = getCodeMirrorEditorView(editor);
            await serializeReference(content, span, editorView, "f");
            if (!span.classList.contains("reference-span-hidden")) {
              span.classList.add("reference-span-hidden");
            }
            span.classList.remove("reference-span-hidden");
          }
        } else {
          new import_obsidian6.Notice("Toggle annotations off");
          for (const span of spans) {
            let referenceSpan = (_b = span.parentElement) == null ? void 0 : _b.querySelector(
              ".reference-data-span"
            );
            let content = referenceSpan == null ? void 0 : referenceSpan.getAttribute("data");
            const activeView = this.app.workspace.getLeaf();
            const editor = getMarkdownView(activeView).editor;
            const editorView = getCodeMirrorEditorView(editor);
            await serializeReference(content, span, editorView, "t");
            if (span.classList.contains("reference-span-hidden")) {
              span.classList.remove("reference-span-hidden");
            }
            span.classList.add("reference-span-hidden");
          }
        }
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
