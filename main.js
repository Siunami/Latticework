/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ReferencePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/state.ts
var import_state6 = require("@codemirror/state");

// src/references.ts
var import_obsidian4 = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);
var v5_default = v5;

// src/utils.ts
var import_obsidian3 = require("obsidian");

// src/constants.ts
var REFERENCE_REGEX = /\[\u2197\]\(urn:([^)]*)\)/g;
var ACTION_TYPE = {
  MOUSE: "mouse",
  CURSOR: "cursor",
  BACKLINK: "backlink"
};
var SVG_HOVER_COLOR = "rgb(187, 215, 230)";
var REFERENCE_ICON_HEIGHT = 20;
var PORTAL_TEXT_SLICE_SIZE = 100;

// src/workspace.ts
var import_obsidian = require("obsidian");
function collectLeavesByTab(split, result = []) {
  const type = split.type;
  if (!type)
    throw new Error("Split type not found");
  if (type == "tabs" || type == "split") {
    const children = split.children;
    if (!children)
      throw new Error("Split children not found");
    if (children) {
      for (const child of children) {
        let emptyList = [];
        collectLeavesByTab(child, result);
      }
    }
  } else if (type == "leaf") {
    const parentSplitId = split.parent.id;
    if (!parentSplitId)
      throw new Error("Split parent id not found");
    let idx = result.findIndex((tab) => {
      const tabId = tab[0].parent.id;
      return tabId == parentSplitId;
    });
    if (idx == -1) {
      result.push([split]);
    } else {
      result[idx].push(split);
    }
  }
  return result;
}
function collectLeavesByTabHelper() {
  const { workspace } = getThat();
  const currLeaf = workspace.getLeaf();
  const rootSplit = currLeaf.getRoot();
  return collectLeavesByTab(rootSplit);
}
function getCurrentTabIndex(leavesByTab, span) {
  let workspaceTab = span.closest(".workspace-tabs");
  let currTabIdx = leavesByTab.findIndex((tab) => {
    const leafTab = tab[0].view.containerEl.closest(".workspace-tabs");
    return leafTab == workspaceTab;
  });
  return currTabIdx;
}
function getAdjacentTabs(leavesByTab, currTabIdx, file) {
  let rightAdjacentTab = [];
  let leftAdjacentTab = [];
  let adjacentTabs = [];
  if (leavesByTab[currTabIdx + 1]) {
    rightAdjacentTab = leavesByTab[currTabIdx + 1];
    adjacentTabs = [...adjacentTabs, ...rightAdjacentTab];
  }
  if (leavesByTab[currTabIdx - 1]) {
    leftAdjacentTab = leavesByTab[currTabIdx - 1];
    adjacentTabs = [...adjacentTabs, ...leftAdjacentTab];
  }
  let index = adjacentTabs.findIndex(
    (x) => x.getViewState().state.file == file
  );
  return { adjacentTabs, rightAdjacentTab, leftAdjacentTab, index };
}
async function openFileInAdjacentTab(leavesByTab, currTabIdx, file, type) {
  let { adjacentTabs, rightAdjacentTab, leftAdjacentTab } = getAdjacentTabs(
    leavesByTab,
    currTabIdx,
    file
  );
  let allTabNames = leavesByTab.map(
    (tab) => tab.map((x) => x.getViewState().state.file)
  );
  let rightAdjacentTabNames = rightAdjacentTab.map(
    (x) => x.getViewState().state.file
  );
  let leftAdjacentTabNames = leftAdjacentTab.map(
    (x) => x.getViewState().state.file
  );
  const { workspace } = getThat();
  if (allTabNames.filter((v, i) => i != currTabIdx).flat().includes(file) && !rightAdjacentTabNames.includes(file) && !leftAdjacentTabNames.includes(file)) {
    let currentTabNames = [];
    let currentTab = [];
    allTabNames.forEach((tabNames, i) => {
      if (tabNames != rightAdjacentTabNames && tabNames != leftAdjacentTabNames && currTabIdx != i) {
        if (tabNames.includes(file)) {
          currentTabNames = tabNames;
          currentTab = leavesByTab[i];
        }
      }
    });
    const originalLeaf = currentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = currentTab[currentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (rightAdjacentTabNames.includes(file)) {
    const originalLeaf = rightAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = rightAdjacentTab[rightAdjacentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (leftAdjacentTabNames.includes(file)) {
    const originalLeaf = leftAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let leaf = leftAdjacentTab[leftAdjacentTabNames.indexOf(file)];
    workspace.revealLeaf(leaf);
    return { newLeaf: leaf, temp: false, originalLeaf };
  } else if (rightAdjacentTab.length > 0) {
    const originalLeaf = rightAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let currLeaf = workspace.getLeaf();
    workspace.setActiveLeaf(originalLeaf);
    let newLeaf = workspace.getLeaf(true);
    await openFileInLeaf(newLeaf, file);
    workspace.revealLeaf(newLeaf);
    workspace.setActiveLeaf(currLeaf);
    return { newLeaf, temp: true, originalLeaf };
  } else if (leftAdjacentTab.length > 0) {
    const originalLeaf = leftAdjacentTab.filter(
      (t) => t.containerEl.style.display != "none"
    )[0];
    let currLeaf = workspace.getLeaf();
    workspace.setActiveLeaf(originalLeaf);
    let newLeaf = workspace.getLeaf(true);
    await openFileInLeaf(newLeaf, file);
    workspace.revealLeaf(newLeaf);
    workspace.setActiveLeaf(currLeaf);
    return { newLeaf, temp: true, originalLeaf };
  } else {
    const currLeaf = workspace.getLeaf();
    let newLeaf = workspace.createLeafBySplit(currLeaf);
    await openFileInLeaf(newLeaf, file);
    return { newLeaf, temp: true };
  }
}
async function openFileInLeaf(leaf, file) {
  let targetFile = getThat().vault.getAbstractFileByPath(file);
  if (targetFile && targetFile instanceof import_obsidian.TFile)
    await leaf.openFile(targetFile, { active: false });
}

// src/effects.ts
var import_obsidian2 = require("obsidian");

// src/mark.ts
var import_view = require("@codemirror/view");
var import_state2 = require("@codemirror/state");
var addHighlight = import_state2.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var resetHighlight = import_state2.StateEffect.define({
  map: ({ from, to }, change) => ({
    from: change.mapPos(from),
    to: change.mapPos(to)
  })
});
var highlightField = import_state2.StateField.define({
  create() {
    return import_view.Decoration.none;
  },
  update(higlights, tr) {
    higlights = higlights.map(tr.changes);
    for (let e of tr.effects)
      if (e.is(addHighlight)) {
        higlights = higlights.update({
          add: [highlightMark.range(e.value.from, e.value.to)]
        });
      } else if (e.is(resetHighlight)) {
        higlights = higlights.update({ filter: (from, to) => false });
      }
    return higlights;
  },
  provide: (f2) => import_view.EditorView.decorations.from(f2)
});
var highlightMark = import_view.Decoration.mark({ class: "highlight" });
var highlightTheme = import_view.EditorView.baseTheme({
  ".highlight": {
    "background-color": "white",
    color: "black"
  }
});
var defaultHighlightTheme = import_view.EditorView.baseTheme({
  ".default-highlight": {
    "background-color": SVG_HOVER_COLOR,
    color: "black"
  }
});
function highlightSelection(view, from, to) {
  let effects = [addHighlight.of({ from, to })];
  if (!effects.length)
    return false;
  if (!view.state.field(highlightField, false))
    effects.push(import_state2.StateEffect.appendConfig.of([highlightField, highlightTheme]));
  view.dispatch({ effects });
  return true;
}
function removeHighlights(view) {
  if (!view)
    return;
  let effects = view.state.selection.ranges.map(
    ({ from, to }) => resetHighlight.of({ from, to })
  );
  if (effects.length) {
    view.dispatch({ effects });
    return true;
  }
  return false;
}

// src/effects.ts
var import_view2 = require("@codemirror/view");
function getEditorView(leaf) {
  var _a;
  if (!leaf)
    return null;
  const view = leaf.view;
  const editor = (_a = view.sourceMode) == null ? void 0 : _a.cmEditor;
  if (!editor.CodeMirror && editor.cm instanceof import_view2.EditorView) {
    const editorView = editor.cm;
    return editorView;
  }
  return null;
}
function checkSpanElementExists(span, containerEl) {
  const spanElements = containerEl.getElementsByTagName("span");
  for (let i = 0; i < spanElements.length; i++) {
    if (spanElements[i] === span) {
      return true;
    }
  }
  return false;
}
function parseCSSString(css) {
  const cssPropertiesRegex = /([\w-]+)\s*:\s*([^;]+)\s*;?/g;
  let cssPropertiesObject = {};
  let match;
  while ((match = cssPropertiesRegex.exec(css)) !== null) {
    cssPropertiesObject[match[1]] = match[2];
  }
  return cssPropertiesObject;
}
function delay(milliseconds) {
  return new Promise((resolve) => {
    setTimeout(resolve, milliseconds);
  });
}
function tempDirectionIndicator(leaf, text, prefix, suffix, dataString, isSame, user) {
  let positions = findTextPositions(
    leaf.view.data,
    text,
    prefix.slice(0, prefix.length - 1),
    suffix.slice(1, suffix.length)
  );
  if (!positions)
    throw new Error("Positions not found");
  let rangeStart = positions.rangeStart;
  let rangeEnd = positions.rangeEnd;
  if (user === ACTION_TYPE.BACKLINK) {
    let startTop = leaf.view.editor.getScrollInfo().top;
    leaf.view.editor.scrollIntoView(
      {
        from: Object.assign(rangeStart, { ch: 0 }),
        to: Object.assign(rangeEnd, { ch: 0 })
      },
      true
    );
    setTimeout(() => {
      let endTop = leaf.view.editor.getScrollInfo().top;
      if (startTop === endTop && isSame) {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "none";
      } else if (startTop === endTop || !isSame) {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px 0px 10px 10px rgba(248, 255, 255)";
      } else if (startTop < endTop) {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px 20px 20px 0px rgba(248, 255, 255)";
      } else {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px -30px 20px 0px rgba(248, 255, 255)";
      }
    }, 10);
    return;
  }
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  const windowHeight = leaf.view.containerEl.querySelector(".cm-scroller").getBoundingClientRect().height;
  const scrollTop = leaf.view.containerEl.querySelector(".cm-scroller").scrollTop;
  const scrollBottom = scrollTop + windowHeight;
  let visibleElements = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    let style = backlinkContainer.children[i].getAttribute("style");
    if (style == null)
      continue;
    let cssProperties = parseCSSString(style);
    let top = parseFloat(cssProperties["top"].replace("px", ""));
    if (top == null)
      continue;
    if (scrollTop <= top && top <= scrollBottom && backlinkContainer.children[i]) {
      let reference = backlinkContainer.children[i].getAttribute("reference");
      if (reference) {
        visibleElements.push(JSON.parse(reference).dataString);
      }
    }
  }
  if (!visibleElements.includes(dataString)) {
    let startTop = leaf.view.editor.getScrollInfo().top;
    leaf.view.editor.scrollIntoView(
      {
        from: Object.assign(rangeStart, { ch: 0 }),
        to: Object.assign(rangeEnd, { ch: 0 })
      },
      true
    );
    setTimeout(() => {
      let endTop = leaf.view.editor.getScrollInfo().top;
      if (startTop == endTop && isSame) {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px 20px 20px 0px rgba(248, 255, 255, 0)";
      } else if (startTop === endTop || !isSame) {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px 0px 10px 10px rgba(248, 255, 255)";
      } else if (startTop < endTop) {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px 20px 20px 0px rgba(248, 255, 255)";
      } else {
        leaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px -30px 20px 0px rgba(248, 255, 255)";
      }
    }, 10);
  }
}
async function startBacklinkEffect(span) {
  var _a, _b, _c, _d;
  let source = getBacklinkHover();
  let destination = getCursor();
  let updateState = updateBacklinkHover;
  if (source != null)
    return;
  updateState({
    type: `${ACTION_TYPE.BACKLINK}-start`
  });
  if (!span)
    return;
  let uuid = Array.from(span.classList).filter((el) => el.includes("uuid"))[0];
  (_b = (_a = span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.add("reference-span-selected");
  span.classList.add("reference-data-span-selected");
  updateState({
    uuid
    // uuid2,
  });
  const referenceData = span.getAttribute("reference");
  if (!referenceData)
    throw new Error("Reference data not found");
  const backlink = JSON.parse(referenceData);
  const dataString = backlink.dataString;
  if (destination != null && destination.dataString == dataString) {
    updateState(destination);
    return;
  }
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  let leavesByTab = collectLeavesByTabHelper();
  let currTabIdx = getCurrentTabIndex(leavesByTab, span);
  let backlinkLeaf = leavesByTab[currTabIdx].filter((leaf) => {
    let containerEl = getContainerElement(leaf);
    const exists = checkSpanElementExists(span, containerEl);
    return exists;
  })[0];
  let backlinkLeafID = backlinkLeaf.id;
  if (!backlinkLeafID)
    throw new Error("Leaf id not found");
  if (backlinkLeaf && backlinkLeaf.view instanceof import_obsidian2.MarkdownView) {
    const editorView = getEditorView(backlinkLeaf);
    if (!editorView)
      throw new Error("Editor view not found");
    const viewport = backlinkLeaf.view.editor.getScrollInfo();
    highlightSelection(editorView, from, to);
    updateState({
      dataString,
      originalTop: editorView.documentTop,
      backlinkLeafId: backlinkLeafID
    });
  }
  let referencingFile = backlink.referencingLocation.filename;
  const { newLeaf, temp, originalLeaf } = await openFileInAdjacentTab(
    leavesByTab,
    currTabIdx,
    referencingFile
  );
  let id = newLeaf.id;
  if (!id)
    throw new Error("Leaf id not found");
  updateState({
    leafId: id,
    temp,
    peek: true
  });
  const originalLeafId = originalLeaf.id;
  const matches = [
    ...backlink.referencingLocation.text.matchAll(REFERENCE_REGEX)
  ];
  if (matches.length == 0)
    throw new Error("Matches not found");
  tempDirectionIndicator(
    newLeaf,
    backlink.referencingLocation.text,
    backlink.referencingLocation.prefix + "-",
    "-" + backlink.referencingLocation.suffix,
    matches[0][1],
    id === originalLeafId,
    ACTION_TYPE.BACKLINK
  );
  const cursorViewport = newLeaf.view.editor.getScrollInfo();
  updateState({
    cursorViewport
  });
  let backlinkSpan = newLeaf.containerEl.querySelector(
    `span[data="${backlink.dataString}"]`
  );
  if (backlinkSpan) {
    let backlinkUUID = Array.from(backlinkSpan.classList).filter(
      (el) => el.includes("uuid")
    )[0];
    (_d = (_c = backlinkSpan.parentElement) == null ? void 0 : _c.querySelector(".reference-span")) == null ? void 0 : _d.classList.add("reference-span-selected");
    backlinkSpan.classList.add("reference-data-span-selected");
    updateState({
      backlinkUUID
      // backlinkUUID2,
    });
  }
  if (id === originalLeafId) {
    newLeaf.containerEl.querySelector(".view-content").style.boxShadow = "none";
  }
  if (originalLeafId) {
    updateState({
      originalLeafId
    });
  }
  return;
}
async function startReferenceEffect(span, type) {
  var _a, _b;
  let source = type == ACTION_TYPE.MOUSE ? getHover() : getCursor();
  let destination = type == ACTION_TYPE.MOUSE ? getCursor() : getHover();
  let updateState = type == ACTION_TYPE.MOUSE ? updateHover : updateCursor;
  if (source != null)
    return;
  updateState({
    type: `${type}-start`
  });
  if (!span)
    return;
  let uuid = Array.from(span.classList).filter((el) => el.includes("uuid"))[0];
  (_b = (_a = span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.add("reference-span-selected");
  span.classList.add("reference-data-span-selected");
  updateState({
    uuid
    // uuid2,
  });
  const dataString = span.getAttribute("data");
  if (!dataString)
    throw new Error("Data string not found");
  if (destination != null && destination.dataString == dataString) {
    updateHover(destination);
    return;
  }
  let [prefix, text, suffix, file, from, to] = processURI(dataString);
  let leavesByTab = collectLeavesByTabHelper();
  let currTabIdx = getCurrentTabIndex(leavesByTab, span);
  let currLeaf = getThat().workspace.getLeaf();
  let currLeafID = currLeaf.id;
  if (!currLeafID)
    throw new Error("currLeafID id not found");
  const { newLeaf, temp, originalLeaf } = await openFileInAdjacentTab(
    leavesByTab,
    currTabIdx,
    file,
    type
  );
  let id = newLeaf.id;
  if (!id)
    throw new Error("Leaf id not found");
  updateState({
    leafId: id,
    temp,
    peek: true
  });
  const originalLeafId = originalLeaf.id;
  if (newLeaf && newLeaf.view instanceof import_obsidian2.MarkdownView) {
    const editorView = getEditorView(newLeaf);
    if (!editorView)
      throw new Error("Editor view not found");
    const viewport = newLeaf.view.editor.getScrollInfo();
    highlightSelection(editorView, from, to);
    tempDirectionIndicator(
      newLeaf,
      text,
      prefix,
      suffix,
      dataString,
      id === originalLeafId
    );
    const cursorViewport = newLeaf.view.editor.getScrollInfo();
    updateState({
      dataString,
      originalTop: editorView.documentTop,
      // originalLeafId: currLeafID,
      cursorViewport
    });
  }
  if (id != originalLeafId && (newLeaf.containerEl.querySelector(".view-content").style.boxShadow == "none" || newLeaf.containerEl.querySelector(".view-content").style.boxShadow == "")) {
    newLeaf.containerEl.querySelector(".view-content").style.boxShadow = "inset 0px 0px 10px 10px rgba(248, 255, 255)";
  }
  if (originalLeafId) {
    updateState({
      originalLeafId
    });
  }
}
async function endReferenceCursorEffect() {
  var _a, _b, _c, _d;
  if (!getCursor() || Object.keys(getCursor()).length == 0) {
    resetCursor();
    return;
  }
  const {
    dataString,
    leafId,
    originalLeafId,
    temp,
    cursorViewport,
    peek,
    uuid
  } = getCursor();
  if (getHover() != null && getHover().dataString == dataString) {
    resetCursor();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  if (!targetLeaf) {
    resetHover();
    throw new Error("Target leaf not found");
  }
  const workspaceContainer = workspace.containerEl;
  const span = workspaceContainer.querySelector("." + uuid);
  (_b = (_a = span == null ? void 0 : span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.remove("reference-span-selected");
  span == null ? void 0 : span.classList.remove("reference-data-span-selected");
  const activeLeaf = getThat().workspace.getLeaf();
  const activeLeafId = activeLeaf.id;
  let editorView = getEditorView(targetLeaf);
  removeHighlights(editorView);
  if (activeLeafId === leafId) {
    resetCursor();
    let containerEl = getContainerElement(targetLeaf);
    if (containerEl != null) {
      (_c = containerEl.querySelector(".view-content")) == null ? void 0 : _c.setAttribute("style", "");
    }
    return;
  }
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian2.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
    if (getHover() != null) {
      const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getHover();
      let [prefix, text, suffix, file, from, to] = processURI(dataString2);
      const cursorLeaf = workspace.getLeafById(leafId2);
      workspace.revealLeaf(cursorLeaf);
      const editorView2 = getEditorView(cursorLeaf);
      highlightSelection(editorView2, from, to);
    } else {
      let containerEl = getContainerElement(targetLeaf);
      if (containerEl != null) {
        (_d = containerEl.querySelector(".view-content")) == null ? void 0 : _d.setAttribute("style", "");
      }
    }
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
  }
  if (peek) {
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf)
      throw new Error("Original leaf not found");
    workspace.revealLeaf(originalLeaf);
  }
  resetCursor();
}
async function endReferenceHoverEffect() {
  var _a, _b;
  if (!getHover() || Object.keys(getHover()).length == 0) {
    resetHover();
    return;
  }
  let {
    dataString,
    leafId,
    originalLeafId,
    temp,
    cursorViewport,
    peek,
    uuid,
    uuid2
  } = getHover();
  if (getCursor() != null && getCursor().dataString == dataString) {
    resetHover();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  if (!targetLeaf) {
    resetHover();
    throw new Error("Target leaf not found");
  }
  const workspaceContainer = workspace.containerEl;
  const span = workspaceContainer.querySelector("." + uuid);
  (_b = (_a = span == null ? void 0 : span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.remove("reference-span-selected");
  span == null ? void 0 : span.classList.remove("reference-data-span-selected");
  const activeLeaf = getThat().workspace.getLeaf();
  let editorView = getEditorView(targetLeaf);
  removeHighlights(editorView);
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian2.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
    if (getCursor() != null && getCursor().dataString) {
      const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getCursor();
      let [prefix, text, suffix, file, from, to, portal, toggle] = processURI(dataString2);
      const cursorLeaf = workspace.getLeafById(leafId2);
      workspace.revealLeaf(cursorLeaf);
      const editorView2 = getEditorView(cursorLeaf);
      if (!editorView2)
        throw new Error("Editor view not found");
      highlightSelection(editorView2, from, to);
    } else {
      let containerEl = getContainerElement(targetLeaf);
      if (containerEl != null) {
        setTimeout(() => {
          var _a2;
          (_a2 = containerEl.querySelector(".view-content")) == null ? void 0 : _a2.setAttribute("style", "");
        }, 50);
      }
    }
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf)
      throw new Error("Original leaf not found");
    workspace.revealLeaf(originalLeaf);
  }
  if (peek) {
    let originalLeaf = workspace.getLeafById(originalLeafId);
    if (!originalLeaf) {
      resetHover();
      throw new Error("Original leaf not found");
    }
    workspace.revealLeaf(originalLeaf);
  }
  resetHover();
}
async function endBacklinkHoverEffect() {
  var _a, _b, _c, _d;
  if (!getBacklinkHover() || Object.keys(getBacklinkHover()).length == 0) {
    resetBacklinkHover();
    return;
  }
  const {
    dataString,
    leafId,
    originalLeafId,
    backlinkLeafId,
    temp,
    cursorViewport,
    originalTab,
    peek,
    uuid,
    // uuid2,
    backlinkUUID
    // backlinkUUID2,
  } = getBacklinkHover();
  if (getCursor() != null && getCursor().dataString == dataString) {
    resetBacklinkHover();
    return;
  }
  const { workspace } = getThat();
  let targetLeaf = workspace.getLeafById(leafId);
  if (!targetLeaf) {
    resetBacklinkHover();
    throw new Error("Target leaf not found");
  }
  const workspaceContainer = workspace.containerEl;
  const span = workspaceContainer.querySelector("." + uuid);
  (_b = (_a = span == null ? void 0 : span.parentElement) == null ? void 0 : _a.querySelector(".reference-span")) == null ? void 0 : _b.classList.remove("reference-span-selected");
  span == null ? void 0 : span.classList.remove("reference-data-span-selected");
  const backlinkSpan = workspaceContainer.querySelector("." + backlinkUUID);
  (_d = (_c = backlinkSpan == null ? void 0 : backlinkSpan.parentElement) == null ? void 0 : _c.querySelector(".reference-span")) == null ? void 0 : _d.classList.remove("reference-span-selected");
  backlinkSpan == null ? void 0 : backlinkSpan.classList.remove("reference-data-span-selected");
  if (cursorViewport && targetLeaf && targetLeaf.view instanceof import_obsidian2.MarkdownView) {
    const view = targetLeaf.view;
    view.editor.scrollTo(0, cursorViewport.top);
  }
  let containerEl = getContainerElement(targetLeaf);
  if (containerEl != null) {
    setTimeout(() => {
      var _a2;
      (_a2 = containerEl.querySelector(".view-content")) == null ? void 0 : _a2.setAttribute("style", "");
    }, 50);
  }
  let editorView = getEditorView(targetLeaf);
  removeHighlights(editorView);
  const originalLeaf = workspace.getLeafById(backlinkLeafId);
  if (!originalLeaf) {
    resetBacklinkHover();
    throw new Error("Original leaf not found");
  }
  let originalEditorView = getEditorView(originalLeaf);
  removeHighlights(originalEditorView);
  if (getCursor() != null && getCursor().dataString) {
    const { dataString: dataString2, cursorViewport: cursorViewport2, leafId: leafId2, originalLeafId: originalLeafId2 } = getCursor();
    let [prefix, text, suffix, file, from, to] = processURI(dataString2);
    const cursorLeaf = workspace.getLeafById(leafId2);
    workspace.revealLeaf(cursorLeaf);
    const editorView2 = getEditorView(cursorLeaf);
    highlightSelection(editorView2, from, to);
  }
  if (temp && targetLeaf) {
    targetLeaf.detach();
  }
  if (peek) {
    let originalLeaf2 = workspace.getLeafById(originalLeafId);
    if (!originalLeaf2) {
      resetBacklinkHover();
      throw new Error("Original leaf not found");
    }
    workspace.revealLeaf(originalLeaf2);
  }
  resetBacklinkHover();
}

// src/utils.ts
function encodeURIComponentString(str) {
  return encodeURIComponent(str).replace(/[:()]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}
function decodeURIComponentString2(str) {
  return decodeURIComponent(
    str.replace(/%3A/g, ":").replace(/%28/g, "(").replace(/%29/g, ")")
  );
}
function processURI(dataString) {
  let [prefix, text, suffix, file, from, to, portal, toggle] = dataString.split(":");
  prefix = decodeURIComponentString2(prefix);
  text = decodeURIComponentString2(text);
  suffix = decodeURIComponentString2(suffix);
  file = decodeURIComponentString2(file);
  from = decodeURIComponentString2(from);
  to = decodeURIComponentString2(to);
  if (portal)
    portal = decodeURIComponentString2(portal);
  toggle = decodeURIComponentString2(toggle);
  return [
    prefix,
    text,
    suffix,
    file,
    parseInt(from),
    parseInt(to),
    portal,
    toggle
  ];
}
function getPrefixAndSuffix(document2, from, to) {
  let prefix = document2.slice(from - 25, from).split("\n").slice(-1)[0];
  let suffix = document2.slice(to, to + 25).split("\n")[0];
  return { prefix, suffix };
}
function findTextPositions(text, searchTerm, prefix = "", suffix = "") {
  let rollingIndex = 0;
  const lines = text.split("\n").map((line, i) => {
    let data = { line, index: rollingIndex, length: line.length + 1, i };
    rollingIndex += data.length;
    return data;
  });
  if (text.includes(prefix + searchTerm + suffix)) {
    let matchIndex = text.indexOf(prefix + searchTerm + suffix);
    let startIndex = lines.findIndex((line) => line.index > matchIndex + prefix.length) - 1;
    let endIndex = lines.findIndex(
      (line) => line.index > matchIndex + prefix.length + searchTerm.length
    ) - 1;
    if (startIndex == -2)
      startIndex = lines.length - 1;
    if (endIndex == -2)
      endIndex = lines.length - 1;
    return {
      rangeStart: {
        line: startIndex,
        ch: matchIndex + prefix.length - lines[startIndex].index
      },
      rangeEnd: {
        line: endIndex,
        ch: matchIndex + prefix.length + searchTerm.length - lines[endIndex].index
      },
      lines
    };
  }
  return null;
}
function checkCursorPositionAtDatastring(evt) {
  const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
  const cursorFrom = activeView == null ? void 0 : activeView.editor.getCursor("from");
  const cursorTo = activeView == null ? void 0 : activeView.editor.getCursor("to");
  let matched = false;
  let matchSpan = void 0;
  if (cursorFrom && cursorTo && cursorFrom.ch == cursorTo.ch && cursorFrom.line == cursorTo.line) {
    const lineText = activeView == null ? void 0 : activeView.editor.getLine(cursorFrom.line);
    if (lineText) {
      const matches = [...lineText.matchAll(REFERENCE_REGEX)];
      matches.forEach((match) => {
        var _a;
        if ((_a = match.index) == null ? void 0 : _a.toString()) {
          const start = match.index;
          const end = start + match[0].length;
          if (end == cursorTo.ch && evt.target) {
            const dataString = match[1];
            let checkContainer = evt.target instanceof Element;
            if (!checkContainer)
              throw new Error("Element not instance of Element");
            let container = evt.target;
            let activeLine;
            if (container.classList.contains("cm-active")) {
              activeLine = container;
            } else {
              activeLine = container.querySelector(".cm-active");
            }
            if (!activeLine)
              throw new Error("Element not instance of Element");
            let span = activeLine.querySelector(`span[data="${dataString}"]`);
            if (span && span instanceof HTMLSpanElement) {
              matched = true;
              matchSpan = span;
            } else {
            }
          }
        }
      });
    }
  }
  return { matched, span: matchSpan };
}
function handleRemoveHoveredCursor2(user) {
  if (getHoveredCursor()) {
    let nonCursors = getHoveredCursor().filter((element) => {
      return element.user !== user;
    }).map((element) => element.cursor.closest("span"));
    getHoveredCursor().filter((element) => element.user === user).forEach((element) => {
      if (!nonCursors.includes(element.cursor.closest("span"))) {
        let svg = element.cursor;
        if (!svg)
          throw new Error("SVG not found");
        if (svg.classList.contains("reference-icon"))
          svg.style.backgroundColor = "white";
        else {
          svg.setAttribute("fill", "white");
          svg.style.backgroundColor = "";
        }
        element.cursor.style.backgroundColor = "white";
      }
    });
    removeHoveredCursor(user);
  }
}
function checkFocusCursor(evt) {
  let { matched, span } = checkCursorPositionAtDatastring(evt);
  console.log(span);
  if (matched && span) {
    updateHoveredCursorColor(span, ACTION_TYPE.CURSOR);
    endReferenceCursorEffect();
    startReferenceEffect(span, ACTION_TYPE.CURSOR);
  } else {
    endReferenceCursorEffect();
    handleRemoveHoveredCursor2(ACTION_TYPE.CURSOR);
  }
}

// src/references.ts
function createReferenceIcon(portalText = null) {
  const span = document.createElement("span");
  span.style.cursor = "pointer";
  span.classList.add("reference-data-span");
  span.classList.add("uuid-" + v4_default());
  const height = REFERENCE_ICON_HEIGHT;
  const width = height * 0.9;
  if (portalText == null) {
    const svg2 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    return { span, svg: svg2 };
  }
  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  if (portalText != "inline reference widget |*|") {
    let portal = document.createElement("div");
    portal.classList.add("portal");
    portalText.split(":").forEach((text, index) => {
      if (index === 0 || index === 2)
        portal.innerHTML += decodeURIComponentString2(text);
      else if (index === 1) {
        portal.innerHTML += `<span class="text-accent";>${text}</span>`;
      }
    });
    portal.style.userSelect = "none";
    portal.style.pointerEvents = "none";
    span.appendChild(portal);
  }
  return { span, svg };
}
function updateHoveredCursorColor(span, user) {
  const svg = span.querySelector("svg");
  const portal = span.querySelector(".portal");
  if (span && svg && !portal) {
    handleRemoveHoveredCursor2(user);
    if (svg.classList.contains("reference-icon"))
      svg.style.backgroundColor = SVG_HOVER_COLOR;
    else {
      span = span.querySelector("span");
      span.style.backgroundColor = SVG_HOVER_COLOR;
    }
    updateHoveredCursor3(svg, user);
  }
}
function getCodeMirrorEditorView(editor) {
  return editor.cm;
}
function getContainerElement(editorOrLeaf) {
  return editorOrLeaf.containerEl;
}
function getBacklinkID(backlink) {
  const jsonString = JSON.stringify(backlink);
  const id = v5_default(jsonString, "fb813ebb-1b53-4306-aa9c-655627447f0b");
  return `backlink-${id}`;
}
function getBacklinkContainer(editor) {
  const containerEl = getContainerElement(editor);
  const referenceMarkContainerID = "referenceMarkContainer";
  const container = containerEl.querySelector(`#${referenceMarkContainerID}`);
  if (container) {
    return container;
  } else {
    const newContainer = document.createElement("div");
    newContainer.id = referenceMarkContainerID;
    containerEl.querySelector(".cm-scroller").appendChild(newContainer);
    return newContainer;
  }
}
function getLeafBBoxElements2(leaf) {
  const title = getContainerElement(leaf).querySelector(".inline-title");
  if (!title) {
    throw new Error("Missing title");
  }
  const titleBbox = title.getBoundingClientRect();
  const line = getContainerElement(leaf).querySelector(".cm-line");
  if (!line) {
    throw new Error("Document has no lines");
  }
  const lineBbox = line.getBoundingClientRect();
  return { titleBbox, lineBbox };
}
function updateBacklinkMarkPosition2(leaf, backlinksToLeaf, showPortals) {
  const editor = getMarkdownView(leaf).editor;
  const backlinkContainer = getBacklinkContainer(editor);
  let backlinks2 = [];
  for (let i = 0; i < backlinkContainer.children.length; i++) {
    backlinks2.push(backlinkContainer.children.item(i));
  }
  let backlinkIds = backlinksToLeaf.map((x) => getBacklinkID(x));
  backlinks2.map((x) => x.id).forEach((id) => {
    if (!backlinkIds.includes(id)) {
      let element = document.getElementById(id);
      if (element)
        element.remove();
    }
  });
  const { titleBbox, lineBbox } = getLeafBBoxElements2(leaf);
  let referenceMarkers = backlinksToLeaf.map((backlink) => {
    const { from } = backlink.referencedLocation;
    const bbox = getCodeMirrorEditorView(editor).coordsAtPos(from);
    if (!bbox)
      return;
    let referenceMarker = backlinkContainer.querySelector(
      `#${getBacklinkID(backlink)}`
    );
    if (referenceMarker === null) {
      referenceMarker = createBacklinkMark(backlink);
      backlinkContainer.appendChild(referenceMarker);
    }
    if (bbox) {
      referenceMarker.style.position = "absolute";
      referenceMarker.setAttribute("top", bbox.top.toString());
      referenceMarker.style.top = bbox.top - titleBbox.top + 32 + "px";
      referenceMarker.style.left = lineBbox.width + 40 + "px";
    }
    return referenceMarker;
  });
  let lastYBottom = -Infinity;
  let margin = 4;
  referenceMarkers.sort(
    (a, b) => parseInt(a.getAttribute("top")) - parseInt(b.getAttribute("top"))
  ).forEach((marker) => {
    if (!marker)
      return;
    const portal = marker.querySelector(".portal");
    const svg = marker.querySelector("svg");
    if (showPortals) {
      if (portal) {
        portal.style.display = "inline";
        marker.classList.add("backlink-span");
      }
    } else {
      if (portal) {
        portal.style.display = "none";
      }
      marker.classList.remove("backlink-span");
    }
    let top = parseInt(marker.getAttribute("top"));
    top = Math.max(top, lastYBottom + margin);
    lastYBottom = top + marker.getBoundingClientRect().height + margin;
    marker.setAttribute("top", top.toString());
    marker.style.top = top - titleBbox.top + 32 + "px";
    marker.style.left = lineBbox.width + 40 + "px";
  });
}
var debounceTimer;
async function updateBacklinkMarkPositions2() {
  clearTimeout(debounceTimer);
  debounceTimer = setTimeout(() => {
    const leaves = getThat().workspace.getLeavesOfType(
      "markdown"
    );
    setTimeout(async () => {
      const allBacklinks = await recomputeReferencesForPage();
      leaves.forEach((leaf) => {
        const backlinksToLeaf = allBacklinks.filter(
          // @ts-ignore
          (b) => b.referencedLocation.filename == leaf.view.file.path
        );
        const showPortals = getContainerElement(leaf).innerWidth > 900;
        updateBacklinkMarkPosition2(leaf, backlinksToLeaf, showPortals);
      });
    }, 500);
  }, 100);
}
function createBacklinkMark(backlink) {
  let { span, svg } = createReferenceIcon(backlink.portalText);
  span.classList.add("backlink-data-span");
  const portal = span.querySelector(".portal");
  span.style.position = "absolute";
  span.id = getBacklinkID(backlink);
  span.setAttribute("reference", JSON.stringify(backlink));
  const resizeObserver = new ResizeObserver((entries) => {
    if (portal && portal.style.display != "none") {
      span.classList.add("backlink-portal-open");
    } else {
      span.classList.remove("backlink-portal-open");
    }
  });
  resizeObserver.observe(span);
  span.addEventListener("click", openBacklinkReference);
  return span;
}
function addReferencesToLeaf(leaf) {
  const markdownView = getMarkdownView(leaf);
  let workspaceTabs = markdownView.containerEl.closest(".workspace-tabs");
  if (!workspaceTabs) {
    throw new Error("Missing workspace tabs");
  }
  updateBacklinkMarkPositions2();
  getContainerElement(markdownView.editor).querySelector(".cm-scroller").addEventListener("scroll", () => {
    updateBacklinkMarkPositions2();
  });
  let resizeObserver = new ResizeObserver(() => {
    updateBacklinkMarkPositions2();
  });
  resizeObserver.observe(workspaceTabs);
}
function getMarkdownView(leaf) {
  if (!(leaf.view instanceof import_obsidian4.MarkdownView)) {
    throw new Error("Unexpected non-markdown view");
  }
  return leaf.view;
}
function findMatchPositions(line, regex) {
  let match;
  const positions = [];
  while ((match = regex.exec(line)) !== null) {
    positions.push({
      match: match[0],
      start: match.index,
      end: match.index + match[0].length
    });
  }
  return positions;
}
function createBacklinkData(referencingFileData, referencingFile) {
  let backlinks2 = [];
  let matches = [...referencingFileData.matchAll(REFERENCE_REGEX)];
  matches.forEach((match) => {
    if (match[1].split(":").length != 8)
      return;
    let [prefix, text, suffix, filename, from, to, portal, toggle] = processURI(
      match[1]
    );
    const referencedLocation = {
      prefix,
      text,
      suffix,
      filename,
      from,
      to,
      portal,
      toggle
    };
    let index = referencingFileData.indexOf(match[0]);
    const referencingSurroundingStrings = getPrefixAndSuffix(
      referencingFileData,
      index,
      index + match[0].length
    );
    const referencingLocation = {
      // prefix: referencingFileData.slice(index - 25, index),
      prefix: referencingSurroundingStrings.prefix,
      text: referencingFileData.slice(index, index + match[0].length),
      // suffix: referencingFileData.slice(
      // 	index + match[0].length,
      // 	index + match[0].length + 25
      // ),
      suffix: referencingSurroundingStrings.suffix,
      filename: referencingFile.path,
      from: match.index,
      // TODO do weird string format
      to: match.index + match[0].length,
      // TODO do weird string format
      portal,
      toggle
    };
    if (portal == "portal") {
      const getLineText = (text2, index2) => {
        const startOfLine = text2.lastIndexOf("\n", index2 - 1) + 1;
        const endOfLine = text2.indexOf("\n", index2);
        return text2.slice(
          startOfLine,
          endOfLine !== -1 ? endOfLine : void 0
        );
      };
      let line = getLineText(referencingFileData, index);
      let matchPositions = findMatchPositions(
        line,
        new RegExp(REFERENCE_REGEX)
      );
      let matchIndex = 0;
      for (let i = 0; i < matchPositions.length; i++) {
        if (matchPositions[i].match == match[0]) {
          break;
        } else {
          matchIndex += matchPositions[i].end - matchPositions[i].start - 1;
        }
      }
      let portalText = line.replace(new RegExp(REFERENCE_REGEX, "g"), "\u2197");
      let portalTextSlice = portalText.slice(0, PORTAL_TEXT_SLICE_SIZE);
      let portalTextIndex = line.indexOf(match[0]) - matchIndex;
      portalTextSlice = "\u2197";
      let startPortalText = portalText.substring(
        Math.max(portalTextIndex - 25, 0),
        portalTextIndex
      );
      if (portalText.substring(Math.max(portalTextIndex - 25, 0), portalTextIndex).length > 0 && portalTextIndex - 25 > 0)
        startPortalText = "..." + startPortalText;
      let endPortalText = portalText.substring(
        portalTextIndex + 1,
        Math.max(portalTextIndex + 25, portalText.length)
      );
      if (portalText.substring(
        portalTextIndex + 1,
        Math.max(portalTextIndex + 25, portalText.length)
      ).length > 0 && portalTextIndex + 25 < portalText.length)
        endPortalText = endPortalText + "...";
      backlinks2.push({
        referencedLocation,
        referencingLocation,
        dataString: match[1],
        portalText: encodeURIComponentString(startPortalText) + ":" + portalTextSlice + ":" + encodeURIComponentString(endPortalText)
      });
    } else {
      backlinks2.push({
        referencedLocation,
        referencingLocation,
        dataString: match[1]
      });
    }
  });
  return backlinks2;
}
function generateBacklinks() {
  console.log("generating references");
  let backlinks2 = [];
  let markdownFiles = this.app.vault.getMarkdownFiles();
  Promise.all(
    markdownFiles.map((file) => this.app.vault.read(file))
  ).then((files) => {
    const zippedArray = markdownFiles.map((file, index) => ({
      markdownFile: file,
      fileData: files[index]
    }));
    zippedArray.forEach((file) => {
      let fileBacklinks = createBacklinkData(file.fileData, file.markdownFile);
      updateBacklinks(fileBacklinks);
      backlinks2.push(...fileBacklinks);
    });
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    leaves.forEach((leaf) => {
      addReferencesToLeaf(leaf);
    });
  });
}
async function recomputeReferencesForPage() {
  let references = [];
  let markdownFiles = this.app.vault.getMarkdownFiles();
  let promises = markdownFiles.map((file) => this.app.vault.read(file));
  let files = await Promise.all(promises);
  const zippedArray = markdownFiles.map((file, index) => ({
    markdownFile: file,
    fileData: files[index]
  }));
  zippedArray.forEach((file) => {
    let fileBacklinks = createBacklinkData(file.fileData, file.markdownFile);
    updateBacklinks(fileBacklinks);
    references.push(...fileBacklinks);
  });
  return references;
}
async function openBacklinkReference(ev) {
  let cursor = getCursor();
  let hover = getBacklinkHover();
  let leaf = getThat().workspace.getLeafById(hover.leafId);
  let container = leaf.containerEl;
  if (!container)
    throw new Error("Container not found");
  container.querySelector(".view-content").style.boxShadow = "none";
  if (cursor && hover && cursor.dataString && hover.dataString && cursor.dataString == hover.dataString) {
    updateCursor({
      temp: false,
      cursorViewport: null,
      peek: false
    });
  }
  updateBacklinkHover({
    temp: false,
    cursorViewport: null,
    peek: false
  });
  handleRemoveHoveredCursor2(ACTION_TYPE.CURSOR);
  resetCursor();
}
async function openReference(ev) {
  let cursor = getCursor();
  let hover = getHover();
  let leaf = getThat().workspace.getLeafById(hover.leafId);
  let container = leaf.containerEl;
  if (!container)
    throw new Error("Container not found");
  container.querySelector(".view-content").style.boxShadow = "none";
  if (cursor && hover && cursor.dataString && hover.dataString && cursor.dataString == hover.dataString) {
    updateCursor({
      temp: false,
      cursorViewport: null,
      peek: false
    });
  }
  updateHover({
    temp: false,
    cursorViewport: null,
    peek: false
  });
  handleRemoveHoveredCursor2(ACTION_TYPE.CURSOR);
  resetCursor();
}

// src/state.ts
var that = import_state6.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "that") {
      return tr["annotations"][0].value.that.app;
    }
    return value;
  }
});
var hoveredCursor = import_state6.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "hoveredCursor") {
      if (value)
        return [
          ...value.filter(
            (cursor) => cursor.user != tr["annotations"][0].value.user
          ),
          {
            cursor: tr["annotations"][0].value.cursor,
            user: tr["annotations"][0].value.user
          }
        ];
      return [
        {
          cursor: tr["annotations"][0].value.cursor,
          user: tr["annotations"][0].value.user
        }
      ];
    } else if (tr["annotations"].length == 2 && tr["annotations"][0].value.type == "removeHoveredCursor") {
      if (value)
        return value.filter(
          (cursor) => cursor.user != tr["annotations"][0].value.user
        );
      return value;
    }
    return value;
  }
});
var backlinks = import_state6.StateField.define({
  create() {
    return [];
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(
          tr.effects[0].value
        );
        if (data.type == "backlink") {
          if (data.backlinks.length == 0)
            return value;
          let referencingLocation = data.backlinks[0]["referencingLocation"]["filename"];
          let filteredValues = value.filter(
            (backlink) => backlink.referencingLocation.filename != referencingLocation
          );
          return [...filteredValues, ...data.backlinks];
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var hoverElement = import_state6.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "hover-start") {
          return Object.assign({}, data);
        } else if (data.type == "hover") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "hover-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var backlinkHoverElement = import_state6.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "backlink-start") {
          return Object.assign({}, data);
        } else if (data.type == "backlink-update") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "backlink-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var cursorElement = import_state6.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "cursor-start") {
          return {};
        } else if (data.type == "cursor") {
          if (value)
            return Object.assign(value, data);
          return data;
        } else if (data.type == "cursor-off") {
          return null;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var editorChange = import_state6.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    if (tr.effects.length > 0) {
      try {
        let data = JSON.parse(tr.effects[0].value);
        if (data.type == "sync") {
          updateBacklinkMarkPositions2();
          return value;
        }
        return value;
      } catch (e) {
        console.log(e);
        return value;
      }
    }
    return value;
  }
});
var thatAnnotation = import_state6.Annotation.define();
var hoveredCursorAnnotation = import_state6.Annotation.define();
var hoverEffect = import_state6.StateEffect.define();
var backlinkHoverEffect = import_state6.StateEffect.define();
var cursorEffect = import_state6.StateEffect.define();
var backlinkEffect = import_state6.StateEffect.define();
var state3 = import_state6.EditorState.create({
  extensions: [
    that,
    hoveredCursor,
    backlinks,
    hoverElement,
    backlinkHoverElement,
    cursorElement,
    editorChange
  ]
});
function getThat() {
  return state3.field(that);
}
function updateThat(that2) {
  state3 = state3.update({
    annotations: thatAnnotation.of({
      type: "that",
      that: that2
    })
  }).state;
}
function getHoveredCursor() {
  return state3.field(hoveredCursor);
}
function updateHoveredCursor3(cursor, user) {
  state3 = state3.update({
    annotations: hoveredCursorAnnotation.of({
      type: "hoveredCursor",
      cursor,
      user
    })
  }).state;
}
function removeHoveredCursor(user) {
  state3 = state3.update({
    annotations: hoveredCursorAnnotation.of({
      type: "removeHoveredCursor",
      user
    })
  }).state;
}
function getHover() {
  return state3.field(hoverElement);
}
function updateHover(value) {
  state3 = state3.update({
    effects: hoverEffect.of(
      JSON.stringify(Object.assign(value, { type: "hover" }))
    )
  }).state;
}
function resetHover() {
  state3 = state3.update({
    effects: hoverEffect.of(
      JSON.stringify({
        type: "hover-off"
      })
    )
  }).state;
}
function getBacklinkHover() {
  return state3.field(backlinkHoverElement);
}
function updateBacklinkHover(value) {
  state3 = state3.update({
    effects: backlinkHoverEffect.of(
      JSON.stringify(Object.assign(value, { type: "backlink-update" }))
    )
  }).state;
}
function resetBacklinkHover() {
  state3 = state3.update({
    effects: backlinkHoverEffect.of(
      JSON.stringify({
        type: "backlink-off"
      })
    )
  }).state;
}
function getCursor() {
  return state3.field(cursorElement);
}
function updateCursor(value) {
  state3 = state3.update({
    effects: cursorEffect.of(
      JSON.stringify(Object.assign(value, { type: "cursor" }))
    )
  }).state;
}
function resetCursor() {
  state3 = state3.update({
    effects: cursorEffect.of(
      JSON.stringify({
        type: "cursor-off"
      })
    )
  }).state;
}
function getBacklinks2() {
  return state3.field(backlinks);
}
function updateBacklinks(value) {
  state3 = state3.update({
    effects: backlinkEffect.of(
      JSON.stringify(Object.assign({ backlinks: value }, { type: "backlink" }))
    )
  }).state;
}

// src/widget/highlightWidget.ts
var import_view3 = require("@codemirror/view");
var HighlighterWidget = class extends import_view3.WidgetType {
  constructor(name, view) {
    super();
    this.name = name;
    this.view = view;
  }
  eq(other) {
    return this.name === other.name;
  }
  toDOM() {
    const span = document.createElement("fragment");
    span.textContent = this.name;
    span.style.backgroundColor = SVG_HOVER_COLOR;
    span.style.color = "black";
    return span;
  }
};
var highlighterDecoration = (match, view) => import_view3.Decoration.replace({
  widget: new HighlighterWidget(match[1], view)
});
var highlightMatcher = new import_view3.MatchDecorator({
  regexp: /\+\+\+(.*?)\+\+\+/g,
  decoration: (match, view, pos) => {
    return highlighterDecoration(match, view);
  }
});
var highlights = import_view3.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.highlights = highlightMatcher.createDeco(view);
    }
    update(update) {
      this.highlights = highlightMatcher.updateDeco(update, this.highlights);
    }
    destroy() {
      this.highlights = import_view3.Decoration.none;
    }
  },
  {
    decorations: (instance) => instance.highlights,
    provide: (plugin) => import_view3.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.highlights) || import_view3.Decoration.none;
    })
  }
);

// src/widget/referenceWidget.ts
var import_view4 = require("@codemirror/view");
var ReferenceWidget = class extends import_view4.WidgetType {
  constructor(name, view, pos) {
    super();
    this.name = name;
    this.view = view;
    this.pos = pos;
  }
  eq(other) {
    return this.name === other.name;
  }
  async updateName(name, from, to) {
    const transaction = this.view.state.update({
      changes: { from, to, insert: name }
    });
    this.view.dispatch(transaction);
    await updateBacklinkMarkPositions2();
    this.name = name;
  }
  getView() {
    return this.view;
  }
  toDOM() {
    const regex = /\[↗\]\(urn:([^)]*)\)/g;
    let content = regex.exec(this.name);
    if (!content)
      throw new Error("Invalid reference");
    const [prefix, text, suffix, file, from, to, portal, toggle = "f"] = content[1].split(":");
    const { span, svg } = createReferenceIcon(
      portal == "portal" ? "inline reference widget |*|" : null
    );
    if (content)
      span.setAttribute("data", content[1]);
    const containerSpan = document.createElement("span");
    containerSpan.classList.add("reference-container-span");
    const referenceSpan = document.createElement("span");
    referenceSpan.classList.add("reference-span");
    referenceSpan.innerHTML = decodeURIComponentString2(text);
    referenceSpan.classList.toggle("reference-span-hidden", toggle === "f");
    containerSpan.appendChild(referenceSpan);
    containerSpan.appendChild(span);
    function processLine(line) {
      let lineCopy = line == null ? void 0 : line.cloneNode(true);
      lineCopy == null ? void 0 : lineCopy.querySelectorAll(".reference-span").forEach((span2) => {
        span2.innerHTML = "\u2197";
      });
      return lineCopy;
    }
    containerSpan.addEventListener("click", (ev) => {
      if (ev.metaKey || ev.ctrlKey) {
        referenceSpan.classList.toggle("reference-span-hidden");
        console.log(referenceSpan);
        let newToggle = referenceSpan.classList.contains(
          "reference-span-hidden"
        ) ? "f" : "t";
        let reference = `[\u2197](urn:${prefix}:${text}:${suffix}:${file}:${from}:${to}:${portal}:${newToggle})`;
        let lines = this.getView().contentDOM.querySelectorAll(".cm-line");
        let activeLineIndex;
        let seenActive = false;
        lines.forEach((line, i) => {
          if (seenActive)
            return;
          if (line.classList.contains("cm-active")) {
            seenActive = true;
            activeLineIndex = i;
          }
        });
        if (activeLineIndex === void 0)
          return;
        let activeLine = lines[activeLineIndex];
        let activeLineCopy = processLine(activeLine);
        let parts = activeLineCopy.innerText.split("\u2197");
        let lineReferences = activeLine == null ? void 0 : activeLine.querySelectorAll(
          ".reference-data-span"
        );
        let lineReferencesData = Array.from(lineReferences || []).map(
          (span2) => "[\u2197](urn:" + span2.getAttribute("data") + ")"
        );
        if (content && content[1]) {
          let index = lineReferencesData.indexOf(content[0]);
          if (index == -1)
            throw new Error("Reference not found");
          let startText = [
            ...parts.slice(0, index + 1),
            ...lineReferencesData.slice(0, index)
          ];
          let prevLineCharCount = Array.from(lines).slice(0, activeLineIndex).reduce((acc, line) => {
            let processedLine = processLine(line);
            let parts2 = processedLine.innerText.split("\u2197");
            let lineReferences2 = line == null ? void 0 : line.querySelectorAll(
              ".reference-data-span"
            );
            let lineReferencesData2 = Array.from(lineReferences2 || []).map(
              (span2) => "[\u2197](urn:" + span2.getAttribute("data") + ")"
            );
            let allSerializedText = [...parts2, ...lineReferencesData2].join("") + "\n";
            return allSerializedText.length + acc;
          }, 0);
          let from2 = prevLineCharCount + startText.join("").length;
          let to2 = from2 + reference.length;
          this.updateName(reference, from2, to2);
        }
      } else {
        openReference(ev);
      }
    });
    return containerSpan;
  }
};
var referenceDecoration = (match, view, pos) => {
  let decoration = import_view4.Decoration.replace({
    widget: new ReferenceWidget(match[0], view, pos)
  });
  return decoration;
};
var referenceMatcher = new import_view4.MatchDecorator({
  // regexp: /\[\u2197\]\(urn:[\s\S^\)]*\)/g,
  // regexp: /\[\u2197\]\(urn:([^:]*:){5,6}[^:]*\)/g,
  // regexp: /\[\u2197\]\(urn:([^:]*:){6}[^:)]*\)/g,
  regexp: /\[\u2197\]\(urn:([^:]*:){7}[^:)]*\)/g,
  decoration: (match, view, pos) => {
    return referenceDecoration(match, view, pos);
  }
});
var referenceResources = import_view4.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.referenceResources = referenceMatcher.createDeco(view);
    }
    update(update) {
      this.referenceResources = referenceMatcher.updateDeco(
        update,
        this.referenceResources
      );
    }
    destroy() {
      this.referenceResources = import_view4.Decoration.none;
    }
  },
  {
    decorations: (instance) => instance.referenceResources,
    provide: (plugin) => import_view4.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.referenceResources) || import_view4.Decoration.none;
    })
  }
);

// src/clipboard.ts
var import_obsidian5 = require("obsidian");
async function updateClipboard(toggle = false, only = false) {
  const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
  if (view) {
    let selection = view.editor.getSelection();
    if (view.file) {
      const text = view.data;
      const from = view.editor.posToOffset(view.editor.getCursor("from"));
      const to = view.editor.posToOffset(view.editor.getCursor("to"));
      const { prefix, suffix } = getPrefixAndSuffix(text, from, to);
      let reference = `[\u2197](urn:${encodeURIComponentString(
        prefix
      )}-:${encodeURIComponentString(selection)}:-${encodeURIComponentString(
        suffix
      )}:${encodeURIComponentString(view.file.path)}:${from}:${to}:${// only ? "portal" : "no-portal"
      "portal"}:${toggle ? "t" : "f"})`;
      await navigator.clipboard.writeText(reference);
    }
  }
}

// src/main.ts
var import_view5 = require("@codemirror/view");
var ReferencePlugin = class extends import_obsidian6.Plugin {
  onload() {
    setTimeout(() => {
      generateBacklinks();
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", (ev) => {
          try {
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
            if ((activeView == null ? void 0 : activeView.leaf) != null) {
              addReferencesToLeaf(activeView.leaf);
            }
          } catch (e) {
            console.log(e);
          }
        })
      );
    }, 4e3);
    updateThat(this);
    this.registerEditorExtension([
      highlights,
      referenceResources,
      import_view5.EditorView.updateListener.of(function(e) {
        if (Math.abs(e.changes.desc.newLength - e.changes.desc.length) > 1) {
          updateBacklinkMarkPositions2();
        }
      })
    ]);
    let startEffectLast = new Date().getTime();
    this.registerDomEvent(document, "mousemove", async (evt) => {
      if (evt.metaKey || evt.ctrlKey)
        return;
      let span;
      let dataString;
      if (evt.target && (evt.target instanceof HTMLSpanElement || evt.target instanceof SVGElement || evt.target instanceof SVGPathElement)) {
        span = evt.target;
        while (!(span instanceof HTMLSpanElement) && span.parentElement != null) {
          span = span.parentElement;
        }
      }
      if (span && span instanceof HTMLSpanElement && (span == null ? void 0 : span.parentElement) && (span == null ? void 0 : span.parentElement.classList.contains("reference-container-span"))) {
        if (getHover() != null)
          return;
        startEffectLast = new Date().getTime();
        if (!span.getAttribute("data")) {
          span = span.parentElement;
          span = span.querySelector(".reference-data-span");
          if (!span)
            throw new Error("Span element not found");
        }
        updateHoveredCursorColor(span, ACTION_TYPE.MOUSE);
        startReferenceEffect(span, ACTION_TYPE.MOUSE);
      } else if (span && span instanceof HTMLSpanElement && span.getAttribute("reference")) {
        startEffectLast = new Date().getTime();
        startBacklinkEffect(span);
      } else if (getHover() != null) {
        if (Object.keys(getHover()).length == 2)
          await delay(50);
        endReferenceHoverEffect();
        handleRemoveHoveredCursor2(ACTION_TYPE.MOUSE);
      } else if (getBacklinks2() != null) {
        if (new Date().getTime() - startEffectLast < 50)
          await delay(50);
        endBacklinkHoverEffect();
      }
    });
    this.registerDomEvent(document, "click", async (evt) => {
      if (evt.metaKey || evt.ctrlKey)
        return;
      checkFocusCursor(evt);
      updateBacklinkMarkPositions2();
    });
    this.registerDomEvent(document, "keyup", async (evt) => {
      if (evt.metaKey || evt.ctrlKey)
        return;
      checkFocusCursor(evt);
      updateBacklinkMarkPositions2();
    });
    this.registerDomEvent(document, "keydown", async (evt) => {
      var _a;
      if (evt.key == "\xC7" && evt.metaKey && evt.shiftKey && evt.altKey) {
        updateClipboard(false);
        new import_obsidian6.Notice("Copied reference to clipboard");
      } else if (evt.key == "c" && evt.metaKey && evt.shiftKey) {
        updateClipboard(true);
        new import_obsidian6.Notice("Copied reference to clipboard");
      } else if (evt.key == "s" && evt.metaKey && evt.shiftKey) {
        const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView)) == null ? void 0 : _a.editor;
        if (!editor)
          return;
        const cursor = editor.getCursor();
        const element = editor.getDoc().cm.contentDOM;
        const lines = element.querySelectorAll(".cm-line");
        const currentLine = lines[cursor.line];
        const spans = Array.from(
          currentLine.querySelectorAll(".reference-span")
        );
        if (spans.every(
          (span) => span.classList.contains("reference-span-hidden")
        )) {
          spans.forEach((span) => {
            span.classList.toggle("reference-span-hidden", false);
          });
          new import_obsidian6.Notice("Toggle annotations on");
        } else {
          spans.forEach((span) => {
            spans.forEach((span2) => {
              span2.classList.toggle("reference-span-hidden", true);
            });
          });
          new import_obsidian6.Notice("Toggle annotations off");
        }
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
